
Drivers1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004678  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  080047a8  080047a8  000147a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b08  08004b08  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  08004b08  08004b08  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b08  08004b08  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b08  08004b08  00014b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b0c  08004b0c  00014b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08004b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  20000200  08004d10  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  08004d10  00020620  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf5a  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001db6  00000000  00000000  0002c183  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000205e  00000000  00000000  0002df39  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000510  00000000  00000000  0002ff98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000418  00000000  00000000  000304a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000034ea  00000000  00000000  000308c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00006690  00000000  00000000  00033daa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000137f9  00000000  00000000  0003a43a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0004dc33  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001900  00000000  00000000  0004dcb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000200 	.word	0x20000200
 800014c:	00000000 	.word	0x00000000
 8000150:	08004790 	.word	0x08004790

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000204 	.word	0x20000204
 800016c:	08004790 	.word	0x08004790

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <strlen>:
 8000184:	4603      	mov	r3, r0
 8000186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800018a:	2a00      	cmp	r2, #0
 800018c:	d1fb      	bne.n	8000186 <strlen+0x2>
 800018e:	1a18      	subs	r0, r3, r0
 8000190:	3801      	subs	r0, #1
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <keypad_init>:





void keypad_init(){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
	Pin_Config_t Pin_config;

	  /* COLUMNS ARE OUTPUTS */

	Pin_config.Pin_Num = 5;
 8000ac2:	2305      	movs	r3, #5
 8000ac4:	607b      	str	r3, [r7, #4]
	Pin_config.mode = Output_Push_pull;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	60bb      	str	r3, [r7, #8]
	Pin_config.Speed_Output = speed_10;
 8000aca:	2301      	movs	r3, #1
 8000acc:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOB, &Pin_config);
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	482c      	ldr	r0, [pc, #176]	; (8000b84 <keypad_init+0xc8>)
 8000ad4:	f000 fd3e 	bl	8001554 <MCAL_GPIO_Init>

	Pin_config.Pin_Num = 6;
 8000ad8:	2306      	movs	r3, #6
 8000ada:	607b      	str	r3, [r7, #4]
	Pin_config.mode = Output_Push_pull;
 8000adc:	2304      	movs	r3, #4
 8000ade:	60bb      	str	r3, [r7, #8]
	Pin_config.Speed_Output = speed_10;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOB, &Pin_config);
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4826      	ldr	r0, [pc, #152]	; (8000b84 <keypad_init+0xc8>)
 8000aea:	f000 fd33 	bl	8001554 <MCAL_GPIO_Init>

	Pin_config.Pin_Num = 7;
 8000aee:	2307      	movs	r3, #7
 8000af0:	607b      	str	r3, [r7, #4]
	Pin_config.mode = Output_Push_pull;
 8000af2:	2304      	movs	r3, #4
 8000af4:	60bb      	str	r3, [r7, #8]
	Pin_config.Speed_Output = speed_10;
 8000af6:	2301      	movs	r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOB, &Pin_config);
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	4619      	mov	r1, r3
 8000afe:	4821      	ldr	r0, [pc, #132]	; (8000b84 <keypad_init+0xc8>)
 8000b00:	f000 fd28 	bl	8001554 <MCAL_GPIO_Init>
//	Pin_config.Speed_Output = speed_10;
//	MCAL_GPIO_Init(GPIOB, &Pin_config);

	 //ROWS ARE PULL-UP INPUTS

	Pin_config.Pin_Num = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
	Pin_config.mode = Input_PullUp;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	60bb      	str	r3, [r7, #8]
	Pin_config.Speed_Output = speed_10;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOB, &Pin_config);
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4619      	mov	r1, r3
 8000b14:	481b      	ldr	r0, [pc, #108]	; (8000b84 <keypad_init+0xc8>)
 8000b16:	f000 fd1d 	bl	8001554 <MCAL_GPIO_Init>

	Pin_config.Pin_Num = 1;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	607b      	str	r3, [r7, #4]
	Pin_config.mode = Input_PullUp;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	60bb      	str	r3, [r7, #8]
	Pin_config.Speed_Output = speed_10;
 8000b22:	2301      	movs	r3, #1
 8000b24:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOB, &Pin_config);
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4816      	ldr	r0, [pc, #88]	; (8000b84 <keypad_init+0xc8>)
 8000b2c:	f000 fd12 	bl	8001554 <MCAL_GPIO_Init>

	Pin_config.Pin_Num = 3;
 8000b30:	2303      	movs	r3, #3
 8000b32:	607b      	str	r3, [r7, #4]
	Pin_config.mode = Input_PullUp;
 8000b34:	2302      	movs	r3, #2
 8000b36:	60bb      	str	r3, [r7, #8]
	Pin_config.Speed_Output = speed_10;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOB, &Pin_config);
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4810      	ldr	r0, [pc, #64]	; (8000b84 <keypad_init+0xc8>)
 8000b42:	f000 fd07 	bl	8001554 <MCAL_GPIO_Init>

	Pin_config.Pin_Num = 4;
 8000b46:	2304      	movs	r3, #4
 8000b48:	607b      	str	r3, [r7, #4]
	Pin_config.mode = Input_PullUp;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	60bb      	str	r3, [r7, #8]
	Pin_config.Speed_Output = speed_10;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOB, &Pin_config);
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	4619      	mov	r1, r3
 8000b56:	480b      	ldr	r0, [pc, #44]	; (8000b84 <keypad_init+0xc8>)
 8000b58:	f000 fcfc 	bl	8001554 <MCAL_GPIO_Init>


	//OUTPUTS ARE PUSHING HIGH VOLT
	MCAL_GPIO_WritePin(GPIOB,C0,1);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2105      	movs	r1, #5
 8000b60:	4808      	ldr	r0, [pc, #32]	; (8000b84 <keypad_init+0xc8>)
 8000b62:	f000 fd76 	bl	8001652 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB,C1,1);
 8000b66:	2201      	movs	r2, #1
 8000b68:	2106      	movs	r1, #6
 8000b6a:	4806      	ldr	r0, [pc, #24]	; (8000b84 <keypad_init+0xc8>)
 8000b6c:	f000 fd71 	bl	8001652 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB,C2,1);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2107      	movs	r1, #7
 8000b74:	4803      	ldr	r0, [pc, #12]	; (8000b84 <keypad_init+0xc8>)
 8000b76:	f000 fd6c 	bl	8001652 <MCAL_GPIO_WritePin>
//	MCAL_GPIO_WritePin(GPIOB,C3,1);


}
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40010c00 	.word	0x40010c00

08000b88 <keypad_GETKEY>:

char keypad_GETKEY(){
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b08b      	sub	sp, #44	; 0x2c
 8000b8c:	af00      	add	r7, sp, #0
	int keypad_rows[] = { R0, R1, R2, R3 }; //rows of the keypad
 8000b8e:	4b51      	ldr	r3, [pc, #324]	; (8000cd4 <keypad_GETKEY+0x14c>)
 8000b90:	f107 0410 	add.w	r4, r7, #16
 8000b94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int keypad_Columns[] = { C0, C1, C2 }; //columns
 8000b9a:	4a4f      	ldr	r2, [pc, #316]	; (8000cd8 <keypad_GETKEY+0x150>)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ba0:	e883 0007 	stmia.w	r3, {r0, r1, r2}


	int i,j;
	for(i=0; i<3; i++)
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ba8:	e08b      	b.n	8000cc2 <keypad_GETKEY+0x13a>
	{
		//OUTPUT ARE PUSHING HIGH VOLT AS A START
		MCAL_GPIO_WritePin(GPIOB,5,1);
 8000baa:	2201      	movs	r2, #1
 8000bac:	2105      	movs	r1, #5
 8000bae:	484b      	ldr	r0, [pc, #300]	; (8000cdc <keypad_GETKEY+0x154>)
 8000bb0:	f000 fd4f 	bl	8001652 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,6,1);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2106      	movs	r1, #6
 8000bb8:	4848      	ldr	r0, [pc, #288]	; (8000cdc <keypad_GETKEY+0x154>)
 8000bba:	f000 fd4a 	bl	8001652 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,7,1);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2107      	movs	r1, #7
 8000bc2:	4846      	ldr	r0, [pc, #280]	; (8000cdc <keypad_GETKEY+0x154>)
 8000bc4:	f000 fd45 	bl	8001652 <MCAL_GPIO_WritePin>
//		MCAL_GPIO_WritePin(GPIOB,8,1);
		// COLUMN[i] is ground
		MCAL_GPIO_WritePin(GPIOB,keypad_Columns[i],0);
 8000bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000bd0:	4413      	add	r3, r2
 8000bd2:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4840      	ldr	r0, [pc, #256]	; (8000cdc <keypad_GETKEY+0x154>)
 8000bdc:	f000 fd39 	bl	8001652 <MCAL_GPIO_WritePin>

		for(j=0; j<4; j++)
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
 8000be4:	e067      	b.n	8000cb6 <keypad_GETKEY+0x12e>
		{
			if( MCAL_GPIO_ReadPin(GPIOB, keypad_rows[j]) == 0   )   // Check if key is pressed
 8000be6:	6a3b      	ldr	r3, [r7, #32]
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000bee:	4413      	add	r3, r2
 8000bf0:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4839      	ldr	r0, [pc, #228]	; (8000cdc <keypad_GETKEY+0x154>)
 8000bf8:	f000 fd49 	bl	800168e <MCAL_GPIO_ReadPin>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d156      	bne.n	8000cb0 <keypad_GETKEY+0x128>
			{
				while(   MCAL_GPIO_ReadPin(GPIOB, keypad_rows[j]) == 0     );  // wait for key to be released(single pressing)
 8000c02:	bf00      	nop
 8000c04:	6a3b      	ldr	r3, [r7, #32]
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000c0c:	4413      	add	r3, r2
 8000c0e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000c12:	4619      	mov	r1, r3
 8000c14:	4831      	ldr	r0, [pc, #196]	; (8000cdc <keypad_GETKEY+0x154>)
 8000c16:	f000 fd3a 	bl	800168e <MCAL_GPIO_ReadPin>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d0f1      	beq.n	8000c04 <keypad_GETKEY+0x7c>

				switch(i)
 8000c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d017      	beq.n	8000c56 <keypad_GETKEY+0xce>
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d029      	beq.n	8000c7e <keypad_GETKEY+0xf6>
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d140      	bne.n	8000cb0 <keypad_GETKEY+0x128>
				{

				case 0:{
					if(j==0)
 8000c2e:	6a3b      	ldr	r3, [r7, #32]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d101      	bne.n	8000c38 <keypad_GETKEY+0xb0>
						return '*';
 8000c34:	232a      	movs	r3, #42	; 0x2a
 8000c36:	e049      	b.n	8000ccc <keypad_GETKEY+0x144>
					else if(j==1)
 8000c38:	6a3b      	ldr	r3, [r7, #32]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d101      	bne.n	8000c42 <keypad_GETKEY+0xba>
						return '7';
 8000c3e:	2337      	movs	r3, #55	; 0x37
 8000c40:	e044      	b.n	8000ccc <keypad_GETKEY+0x144>
					else if(j==2)
 8000c42:	6a3b      	ldr	r3, [r7, #32]
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d101      	bne.n	8000c4c <keypad_GETKEY+0xc4>
						return '4';
 8000c48:	2334      	movs	r3, #52	; 0x34
 8000c4a:	e03f      	b.n	8000ccc <keypad_GETKEY+0x144>
					else if(j==3)
 8000c4c:	6a3b      	ldr	r3, [r7, #32]
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	d129      	bne.n	8000ca6 <keypad_GETKEY+0x11e>
						return '1';
 8000c52:	2331      	movs	r3, #49	; 0x31
 8000c54:	e03a      	b.n	8000ccc <keypad_GETKEY+0x144>
					break;
				}
				case 1:{
					if(j==0)
 8000c56:	6a3b      	ldr	r3, [r7, #32]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d101      	bne.n	8000c60 <keypad_GETKEY+0xd8>
						return '0';
 8000c5c:	2330      	movs	r3, #48	; 0x30
 8000c5e:	e035      	b.n	8000ccc <keypad_GETKEY+0x144>
					else if(j==1)
 8000c60:	6a3b      	ldr	r3, [r7, #32]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d101      	bne.n	8000c6a <keypad_GETKEY+0xe2>
						return '8';
 8000c66:	2338      	movs	r3, #56	; 0x38
 8000c68:	e030      	b.n	8000ccc <keypad_GETKEY+0x144>
					else if(j==2)
 8000c6a:	6a3b      	ldr	r3, [r7, #32]
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d101      	bne.n	8000c74 <keypad_GETKEY+0xec>
						return '5';
 8000c70:	2335      	movs	r3, #53	; 0x35
 8000c72:	e02b      	b.n	8000ccc <keypad_GETKEY+0x144>
					else if(j==3)
 8000c74:	6a3b      	ldr	r3, [r7, #32]
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d117      	bne.n	8000caa <keypad_GETKEY+0x122>
						return '2';
 8000c7a:	2332      	movs	r3, #50	; 0x32
 8000c7c:	e026      	b.n	8000ccc <keypad_GETKEY+0x144>
					break;
				}
				case 2:{
					if(j==0)
 8000c7e:	6a3b      	ldr	r3, [r7, #32]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d101      	bne.n	8000c88 <keypad_GETKEY+0x100>
						return '#';
 8000c84:	2323      	movs	r3, #35	; 0x23
 8000c86:	e021      	b.n	8000ccc <keypad_GETKEY+0x144>
					else if(j==1)
 8000c88:	6a3b      	ldr	r3, [r7, #32]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d101      	bne.n	8000c92 <keypad_GETKEY+0x10a>
						return '9';
 8000c8e:	2339      	movs	r3, #57	; 0x39
 8000c90:	e01c      	b.n	8000ccc <keypad_GETKEY+0x144>
					else if(j==2)
 8000c92:	6a3b      	ldr	r3, [r7, #32]
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d101      	bne.n	8000c9c <keypad_GETKEY+0x114>
						return '6';
 8000c98:	2336      	movs	r3, #54	; 0x36
 8000c9a:	e017      	b.n	8000ccc <keypad_GETKEY+0x144>
					else if(j==3)
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	2b03      	cmp	r3, #3
 8000ca0:	d105      	bne.n	8000cae <keypad_GETKEY+0x126>
						return '3';
 8000ca2:	2333      	movs	r3, #51	; 0x33
 8000ca4:	e012      	b.n	8000ccc <keypad_GETKEY+0x144>
					break;
 8000ca6:	bf00      	nop
 8000ca8:	e002      	b.n	8000cb0 <keypad_GETKEY+0x128>
					break;
 8000caa:	bf00      	nop
 8000cac:	e000      	b.n	8000cb0 <keypad_GETKEY+0x128>
					break;
 8000cae:	bf00      	nop
		for(j=0; j<4; j++)
 8000cb0:	6a3b      	ldr	r3, [r7, #32]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	623b      	str	r3, [r7, #32]
 8000cb6:	6a3b      	ldr	r3, [r7, #32]
 8000cb8:	2b03      	cmp	r3, #3
 8000cba:	dd94      	ble.n	8000be6 <keypad_GETKEY+0x5e>
	for(i=0; i<3; i++)
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	f77f af70 	ble.w	8000baa <keypad_GETKEY+0x22>

				}
			}
		}
	}
	return 'A'; // Return A if no key is pressed
 8000cca:	2341      	movs	r3, #65	; 0x41

}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	372c      	adds	r7, #44	; 0x2c
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd90      	pop	{r4, r7, pc}
 8000cd4:	080047a8 	.word	0x080047a8
 8000cd8:	080047b8 	.word	0x080047b8
 8000cdc:	40010c00 	.word	0x40010c00

08000ce0 <wait_ms>:

uint16_t RS[2]={RS1,RS2}, EN[2]={EN1,EN2};
GPIO_REGISTERS_t* LCD_PORT[2] = {LCD1_PORT,LCD2_PORT};
//vuint32_t* LCD_DATA[2] = {LCD1_DATA,LCD2_DATA};

void wait_ms(uint32_t time){
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i = 0; i<time; i++)
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	e00b      	b.n	8000d06 <wait_ms+0x26>
		for(j=0; j<255; j++);
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	e002      	b.n	8000cfa <wait_ms+0x1a>
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	2bfe      	cmp	r3, #254	; 0xfe
 8000cfe:	d9f9      	bls.n	8000cf4 <wait_ms+0x14>
	for(i = 0; i<time; i++)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	3301      	adds	r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d3ef      	bcc.n	8000cee <wait_ms+0xe>
}
 8000d0e:	bf00      	nop
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <LCD_Kick>:

/* NOTE: if index = 0 -> ADMIN LCD , if index =  1	ENTRY LCD */

void LCD_Kick(int index){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	MCAL_GPIO_WritePin(LCD_PORT[index],EN[index],GPIO_PIN_SET);
 8000d20:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <LCD_Kick+0x48>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d28:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <LCD_Kick+0x4c>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d30:	2201      	movs	r2, #1
 8000d32:	4619      	mov	r1, r3
 8000d34:	f000 fc8d 	bl	8001652 <MCAL_GPIO_WritePin>
	wait_ms(10);
 8000d38:	200a      	movs	r0, #10
 8000d3a:	f7ff ffd1 	bl	8000ce0 <wait_ms>
	MCAL_GPIO_WritePin(LCD_PORT[index],EN[index],GPIO_PIN_RESET);
 8000d3e:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <LCD_Kick+0x48>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d46:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <LCD_Kick+0x4c>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	4619      	mov	r1, r3
 8000d52:	f000 fc7e 	bl	8001652 <MCAL_GPIO_WritePin>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000004 	.word	0x20000004

08000d68 <LCD_Send_Command>:

void LCD_Send_Command (unsigned char CMD,int index){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
	//turn RS off for command mode.
	MCAL_GPIO_WritePin(LCD_PORT[index],RS[index],GPIO_PIN_RESET);
 8000d74:	4a39      	ldr	r2, [pc, #228]	; (8000e5c <LCD_Send_Command+0xf4>)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d7c:	4a38      	ldr	r2, [pc, #224]	; (8000e60 <LCD_Send_Command+0xf8>)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d84:	2200      	movs	r2, #0
 8000d86:	4619      	mov	r1, r3
 8000d88:	f000 fc63 	bl	8001652 <MCAL_GPIO_WritePin>
	LCD_Kick();
#endif

#ifdef FOUR_Bit_MODE
	//Write the command on D4..D7 first
	MCAL_GPIO_WritePin(LCD_PORT[index], D4, Read_Bit(CMD,4));
 8000d8c:	4a33      	ldr	r2, [pc, #204]	; (8000e5c <LCD_Send_Command+0xf4>)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	111b      	asrs	r3, r3, #4
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	210c      	movs	r1, #12
 8000da0:	f000 fc57 	bl	8001652 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT[index], D5, Read_Bit(CMD,5));
 8000da4:	4a2d      	ldr	r2, [pc, #180]	; (8000e5c <LCD_Send_Command+0xf4>)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	115b      	asrs	r3, r3, #5
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	461a      	mov	r2, r3
 8000db6:	210d      	movs	r1, #13
 8000db8:	f000 fc4b 	bl	8001652 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT[index], D6, Read_Bit(CMD,6));
 8000dbc:	4a27      	ldr	r2, [pc, #156]	; (8000e5c <LCD_Send_Command+0xf4>)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	119b      	asrs	r3, r3, #6
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	461a      	mov	r2, r3
 8000dce:	210e      	movs	r1, #14
 8000dd0:	f000 fc3f 	bl	8001652 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT[index], D7, Read_Bit(CMD,7));
 8000dd4:	4a21      	ldr	r2, [pc, #132]	; (8000e5c <LCD_Send_Command+0xf4>)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	09db      	lsrs	r3, r3, #7
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	461a      	mov	r2, r3
 8000de4:	210f      	movs	r1, #15
 8000de6:	f000 fc34 	bl	8001652 <MCAL_GPIO_WritePin>
	LCD_Kick(index);
 8000dea:	6838      	ldr	r0, [r7, #0]
 8000dec:	f7ff ff94 	bl	8000d18 <LCD_Kick>
	//Write the command on D0..D3
	MCAL_GPIO_WritePin(LCD_PORT[index], D4, Read_Bit(CMD,0));
 8000df0:	4a1a      	ldr	r2, [pc, #104]	; (8000e5c <LCD_Send_Command+0xf4>)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	461a      	mov	r2, r3
 8000e00:	210c      	movs	r1, #12
 8000e02:	f000 fc26 	bl	8001652 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT[index], D5, Read_Bit(CMD,1));
 8000e06:	4a15      	ldr	r2, [pc, #84]	; (8000e5c <LCD_Send_Command+0xf4>)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	105b      	asrs	r3, r3, #1
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	461a      	mov	r2, r3
 8000e18:	210d      	movs	r1, #13
 8000e1a:	f000 fc1a 	bl	8001652 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT[index], D6, Read_Bit(CMD,2));
 8000e1e:	4a0f      	ldr	r2, [pc, #60]	; (8000e5c <LCD_Send_Command+0xf4>)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	109b      	asrs	r3, r3, #2
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	461a      	mov	r2, r3
 8000e30:	210e      	movs	r1, #14
 8000e32:	f000 fc0e 	bl	8001652 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT[index], D7, Read_Bit(CMD,3));
 8000e36:	4a09      	ldr	r2, [pc, #36]	; (8000e5c <LCD_Send_Command+0xf4>)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	10db      	asrs	r3, r3, #3
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	461a      	mov	r2, r3
 8000e48:	210f      	movs	r1, #15
 8000e4a:	f000 fc02 	bl	8001652 <MCAL_GPIO_WritePin>
	LCD_Kick(index);
 8000e4e:	6838      	ldr	r0, [r7, #0]
 8000e50:	f7ff ff62 	bl	8000d18 <LCD_Kick>
#endif
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000000 	.word	0x20000000

08000e64 <LCD_Init>:

void LCD_Init(){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0

	//First Loop initialize ADMIN LCD and The Second initialize ENTRY LCD
	for(int j=0; j<2; j++){
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
 8000e6e:	e070      	b.n	8000f52 <LCD_Init+0xee>
		wait_ms(20);
 8000e70:	2014      	movs	r0, #20
 8000e72:	f7ff ff35 	bl	8000ce0 <wait_ms>
		//set the control port direction as output so you can send commands to the LCD.
		Pin_Config_t Pincfg;

		//RS OUTPUT Push-Pull
		Pincfg.Pin_Num = RS[j];
 8000e76:	4a3a      	ldr	r2, [pc, #232]	; (8000f60 <LCD_Init+0xfc>)
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e7e:	60fb      	str	r3, [r7, #12]
		Pincfg.mode = Output_Push_pull;
 8000e80:	2304      	movs	r3, #4
 8000e82:	613b      	str	r3, [r7, #16]
		Pincfg.Speed_Output = speed_10;
 8000e84:	2301      	movs	r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(LCD_PORT[j],&Pincfg);
 8000e88:	4a36      	ldr	r2, [pc, #216]	; (8000f64 <LCD_Init+0x100>)
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e90:	f107 020c 	add.w	r2, r7, #12
 8000e94:	4611      	mov	r1, r2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 fb5c 	bl	8001554 <MCAL_GPIO_Init>

		//EN OUTPUT Push-Pull
		Pincfg.Pin_Num = EN[j];
 8000e9c:	4a32      	ldr	r2, [pc, #200]	; (8000f68 <LCD_Init+0x104>)
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ea4:	60fb      	str	r3, [r7, #12]
		Pincfg.mode = Output_Push_pull;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	613b      	str	r3, [r7, #16]
		Pincfg.Speed_Output = speed_10;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(LCD_PORT[j],&Pincfg);
 8000eae:	4a2d      	ldr	r2, [pc, #180]	; (8000f64 <LCD_Init+0x100>)
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb6:	f107 020c 	add.w	r2, r7, #12
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fb49 	bl	8001554 <MCAL_GPIO_Init>

		//turn off enable
		MCAL_GPIO_WritePin(LCD_PORT[j],EN[j],GPIO_PIN_RESET);
 8000ec2:	4a28      	ldr	r2, [pc, #160]	; (8000f64 <LCD_Init+0x100>)
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000eca:	4a27      	ldr	r2, [pc, #156]	; (8000f68 <LCD_Init+0x104>)
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f000 fbbc 	bl	8001652 <MCAL_GPIO_WritePin>
		LCD_Send_Command(LCD_8bit_4Line);
#endif

#ifdef FOUR_Bit_MODE
		//set the MSB port direction as output so you can send information to the LCD.
		uint16_t pin[4]={D4,D5,D6,D7};
 8000eda:	4a24      	ldr	r2, [pc, #144]	; (8000f6c <LCD_Init+0x108>)
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ee2:	e883 0003 	stmia.w	r3, {r0, r1}

		for(int i=0; i<4; i++){
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
 8000eea:	e018      	b.n	8000f1e <LCD_Init+0xba>
			Pincfg.Pin_Num = pin[i];
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	f107 0220 	add.w	r2, r7, #32
 8000ef4:	4413      	add	r3, r2
 8000ef6:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8000efa:	60fb      	str	r3, [r7, #12]
			Pincfg.mode = Output_Push_pull;
 8000efc:	2304      	movs	r3, #4
 8000efe:	613b      	str	r3, [r7, #16]
			Pincfg.Speed_Output = speed_10;
 8000f00:	2301      	movs	r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(LCD_PORT[j],&Pincfg);
 8000f04:	4a17      	ldr	r2, [pc, #92]	; (8000f64 <LCD_Init+0x100>)
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0c:	f107 020c 	add.w	r2, r7, #12
 8000f10:	4611      	mov	r1, r2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 fb1e 	bl	8001554 <MCAL_GPIO_Init>
		for(int i=0; i<4; i++){
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	61bb      	str	r3, [r7, #24]
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	dde3      	ble.n	8000eec <LCD_Init+0x88>
		}
		LCD_Send_Command(0x02,j);
 8000f24:	69f9      	ldr	r1, [r7, #28]
 8000f26:	2002      	movs	r0, #2
 8000f28:	f7ff ff1e 	bl	8000d68 <LCD_Send_Command>
		LCD_Send_Command(LCD_4bit_4_Line,j);
 8000f2c:	69f9      	ldr	r1, [r7, #28]
 8000f2e:	2028      	movs	r0, #40	; 0x28
 8000f30:	f7ff ff1a 	bl	8000d68 <LCD_Send_Command>
#endif

		LCD_Send_Command(LCD_Entry_Mode,j);
 8000f34:	69f9      	ldr	r1, [r7, #28]
 8000f36:	2006      	movs	r0, #6
 8000f38:	f7ff ff16 	bl	8000d68 <LCD_Send_Command>
		LCD_Send_Command(LCD_Start_At_Beginning_Of_First_Line,j);
 8000f3c:	69f9      	ldr	r1, [r7, #28]
 8000f3e:	2080      	movs	r0, #128	; 0x80
 8000f40:	f7ff ff12 	bl	8000d68 <LCD_Send_Command>
		LCD_Send_Command(LCD_Display_Cursor_Blinking,j);
 8000f44:	69f9      	ldr	r1, [r7, #28]
 8000f46:	200f      	movs	r0, #15
 8000f48:	f7ff ff0e 	bl	8000d68 <LCD_Send_Command>
	for(int j=0; j<2; j++){
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	dd8b      	ble.n	8000e70 <LCD_Init+0xc>
	}
}
 8000f58:	bf00      	nop
 8000f5a:	3720      	adds	r7, #32
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000004 	.word	0x20000004
 8000f6c:	080047c4 	.word	0x080047c4

08000f70 <LCD_Send_A_Character>:
void LCD_Send_A_Character (char data,int index){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
	//turn RS ON for Data mode.
	MCAL_GPIO_WritePin(LCD_PORT[index],RS[index],GPIO_PIN_SET);
 8000f7c:	4a39      	ldr	r2, [pc, #228]	; (8001064 <LCD_Send_A_Character+0xf4>)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f84:	4a38      	ldr	r2, [pc, #224]	; (8001068 <LCD_Send_A_Character+0xf8>)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f000 fb5f 	bl	8001652 <MCAL_GPIO_WritePin>
	LCD_Kick();
#endif

#ifdef FOUR_Bit_MODE
	//send D4..D7 first
	MCAL_GPIO_WritePin(LCD_PORT[index], D4, Read_Bit(data,4));
 8000f94:	4a33      	ldr	r2, [pc, #204]	; (8001064 <LCD_Send_A_Character+0xf4>)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	111b      	asrs	r3, r3, #4
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	210c      	movs	r1, #12
 8000fa8:	f000 fb53 	bl	8001652 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT[index], D5, Read_Bit(data,5));
 8000fac:	4a2d      	ldr	r2, [pc, #180]	; (8001064 <LCD_Send_A_Character+0xf4>)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	115b      	asrs	r3, r3, #5
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	210d      	movs	r1, #13
 8000fc0:	f000 fb47 	bl	8001652 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT[index], D6, Read_Bit(data,6));
 8000fc4:	4a27      	ldr	r2, [pc, #156]	; (8001064 <LCD_Send_A_Character+0xf4>)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	119b      	asrs	r3, r3, #6
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	210e      	movs	r1, #14
 8000fd8:	f000 fb3b 	bl	8001652 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT[index], D7, Read_Bit(data,7));
 8000fdc:	4a21      	ldr	r2, [pc, #132]	; (8001064 <LCD_Send_A_Character+0xf4>)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	09db      	lsrs	r3, r3, #7
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	461a      	mov	r2, r3
 8000fec:	210f      	movs	r1, #15
 8000fee:	f000 fb30 	bl	8001652 <MCAL_GPIO_WritePin>
	LCD_Kick(index);
 8000ff2:	6838      	ldr	r0, [r7, #0]
 8000ff4:	f7ff fe90 	bl	8000d18 <LCD_Kick>
	//send data D0..D3
	MCAL_GPIO_WritePin(LCD_PORT[index], D4, Read_Bit(data,0));
 8000ff8:	4a1a      	ldr	r2, [pc, #104]	; (8001064 <LCD_Send_A_Character+0xf4>)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	461a      	mov	r2, r3
 8001008:	210c      	movs	r1, #12
 800100a:	f000 fb22 	bl	8001652 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT[index], D5, Read_Bit(data,1));
 800100e:	4a15      	ldr	r2, [pc, #84]	; (8001064 <LCD_Send_A_Character+0xf4>)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	105b      	asrs	r3, r3, #1
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	461a      	mov	r2, r3
 8001020:	210d      	movs	r1, #13
 8001022:	f000 fb16 	bl	8001652 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT[index], D6, Read_Bit(data,2));
 8001026:	4a0f      	ldr	r2, [pc, #60]	; (8001064 <LCD_Send_A_Character+0xf4>)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	109b      	asrs	r3, r3, #2
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	461a      	mov	r2, r3
 8001038:	210e      	movs	r1, #14
 800103a:	f000 fb0a 	bl	8001652 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT[index], D7, Read_Bit(data,3));
 800103e:	4a09      	ldr	r2, [pc, #36]	; (8001064 <LCD_Send_A_Character+0xf4>)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	10db      	asrs	r3, r3, #3
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	461a      	mov	r2, r3
 8001050:	210f      	movs	r1, #15
 8001052:	f000 fafe 	bl	8001652 <MCAL_GPIO_WritePin>
	LCD_Kick(index);
 8001056:	6838      	ldr	r0, [r7, #0]
 8001058:	f7ff fe5e 	bl	8000d18 <LCD_Kick>
#endif
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000008 	.word	0x20000008
 8001068:	20000000 	.word	0x20000000

0800106c <LCD_Clear_Screen>:

void LCD_Clear_Screen(int index){
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	wait_ms(10);
 8001074:	200a      	movs	r0, #10
 8001076:	f7ff fe33 	bl	8000ce0 <wait_ms>
	LCD_Send_Command(LCD_Clear_Display,index);
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	2001      	movs	r0, #1
 800107e:	f7ff fe73 	bl	8000d68 <LCD_Send_Command>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <LCD_Goto_XY>:

void LCD_Goto_XY(unsigned char line,unsigned char position,int index){
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	603a      	str	r2, [r7, #0]
 8001094:	71fb      	strb	r3, [r7, #7]
 8001096:	460b      	mov	r3, r1
 8001098:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d107      	bne.n	80010b0 <LCD_Goto_XY+0x26>
		LCD_Send_Command(LCD_Start_At_Beginning_Of_First_Line + position,index);
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	3b80      	subs	r3, #128	; 0x80
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	6839      	ldr	r1, [r7, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fe5d 	bl	8000d68 <LCD_Send_Command>
		LCD_Send_Command(LCD_Start_At_Beginning_Of_Second_Line + position,index);
	else if(line == 3)
		LCD_Send_Command(LCD_Start_At_Beginning_Of_Third_Line + position,index);
	else if(line == 4)
		LCD_Send_Command(LCD_Start_At_Beginning_Of_Fourth_Line + position,index);
}
 80010ae:	e01f      	b.n	80010f0 <LCD_Goto_XY+0x66>
	else if(line == 2)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d107      	bne.n	80010c6 <LCD_Goto_XY+0x3c>
		LCD_Send_Command(LCD_Start_At_Beginning_Of_Second_Line + position,index);
 80010b6:	79bb      	ldrb	r3, [r7, #6]
 80010b8:	3b40      	subs	r3, #64	; 0x40
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	6839      	ldr	r1, [r7, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fe52 	bl	8000d68 <LCD_Send_Command>
}
 80010c4:	e014      	b.n	80010f0 <LCD_Goto_XY+0x66>
	else if(line == 3)
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	d107      	bne.n	80010dc <LCD_Goto_XY+0x52>
		LCD_Send_Command(LCD_Start_At_Beginning_Of_Third_Line + position,index);
 80010cc:	79bb      	ldrb	r3, [r7, #6]
 80010ce:	3b70      	subs	r3, #112	; 0x70
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	6839      	ldr	r1, [r7, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fe47 	bl	8000d68 <LCD_Send_Command>
}
 80010da:	e009      	b.n	80010f0 <LCD_Goto_XY+0x66>
	else if(line == 4)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b04      	cmp	r3, #4
 80010e0:	d106      	bne.n	80010f0 <LCD_Goto_XY+0x66>
		LCD_Send_Command(LCD_Start_At_Beginning_Of_Fourth_Line + position,index);
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	3b30      	subs	r3, #48	; 0x30
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	6839      	ldr	r1, [r7, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fe3c 	bl	8000d68 <LCD_Send_Command>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <LCD_Send_A_String>:

void LCD_Send_A_String(char* str,int index){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
	char count = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	73fb      	strb	r3, [r7, #15]
	while(*str != 0){
 8001106:	e032      	b.n	800116e <LCD_Send_A_String+0x76>
		LCD_Send_A_Character(*str++,index);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	6839      	ldr	r1, [r7, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff2c 	bl	8000f70 <LCD_Send_A_Character>
		count++;
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	3301      	adds	r3, #1
 800111c:	73fb      	strb	r3, [r7, #15]
		//Line 1 is complete
		if (count == 16){
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	2b10      	cmp	r3, #16
 8001122:	d105      	bne.n	8001130 <LCD_Send_A_String+0x38>
			//Go to the second line
			LCD_Goto_XY(2,0,index);
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	2100      	movs	r1, #0
 8001128:	2002      	movs	r0, #2
 800112a:	f7ff ffae 	bl	800108a <LCD_Goto_XY>
 800112e:	e01e      	b.n	800116e <LCD_Send_A_String+0x76>
		}
		//Line 2 is complete
		else if(count == 32){
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	2b20      	cmp	r3, #32
 8001134:	d105      	bne.n	8001142 <LCD_Send_A_String+0x4a>
			//Go to the third line
			LCD_Goto_XY(3,0,index);
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	2100      	movs	r1, #0
 800113a:	2003      	movs	r0, #3
 800113c:	f7ff ffa5 	bl	800108a <LCD_Goto_XY>
 8001140:	e015      	b.n	800116e <LCD_Send_A_String+0x76>
		}
		//Line 3 is complete
		else if(count == 48){
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	2b30      	cmp	r3, #48	; 0x30
 8001146:	d105      	bne.n	8001154 <LCD_Send_A_String+0x5c>
			//Go to the fourth line
			LCD_Goto_XY(4,0,index);
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	2100      	movs	r1, #0
 800114c:	2004      	movs	r0, #4
 800114e:	f7ff ff9c 	bl	800108a <LCD_Goto_XY>
 8001152:	e00c      	b.n	800116e <LCD_Send_A_String+0x76>
		}
		//Line 4 is complete
		else if(count == 64){
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	2b40      	cmp	r3, #64	; 0x40
 8001158:	d109      	bne.n	800116e <LCD_Send_A_String+0x76>
			//Clear the display and go back to line one
			LCD_Clear_Screen(index);
 800115a:	6838      	ldr	r0, [r7, #0]
 800115c:	f7ff ff86 	bl	800106c <LCD_Clear_Screen>
			LCD_Goto_XY(1,0,index);
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	2100      	movs	r1, #0
 8001164:	2001      	movs	r0, #1
 8001166:	f7ff ff90 	bl	800108a <LCD_Goto_XY>
			count = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]
	while(*str != 0){
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1c8      	bne.n	8001108 <LCD_Send_A_String+0x10>
		}
	}
}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <Servo1_Entry_Gate_Init>:



//B8 SERVO1
void Servo1_Entry_Gate_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
	/*SERVO MOTOR 1*/
	Pin_Config_t PinCinfg;
	PinCinfg.Pin_Num=8;
 8001186:	2308      	movs	r3, #8
 8001188:	607b      	str	r3, [r7, #4]
	PinCinfg.mode= Output_Push_pull;
 800118a:	2304      	movs	r3, #4
 800118c:	60bb      	str	r3, [r7, #8]
	PinCinfg.Speed_Output =speed_10;
 800118e:	2301      	movs	r3, #1
 8001190:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	4619      	mov	r1, r3
 8001196:	4803      	ldr	r0, [pc, #12]	; (80011a4 <Servo1_Entry_Gate_Init+0x24>)
 8001198:	f000 f9dc 	bl	8001554 <MCAL_GPIO_Init>
}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40010c00 	.word	0x40010c00

080011a8 <Servo1_Entry_Gate>:

//Direction Up or Down
void Servo1_Entry_Gate(uint8_t Direction)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
	if(Direction == UP)
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d10d      	bne.n	80011d4 <Servo1_Entry_Gate+0x2c>
	{
		//servo1 Enter gate up +90
		MCAL_GPIO_WritePin(GPIOB, 8, 1);
 80011b8:	2201      	movs	r2, #1
 80011ba:	2108      	movs	r1, #8
 80011bc:	4810      	ldr	r0, [pc, #64]	; (8001200 <Servo1_Entry_Gate+0x58>)
 80011be:	f000 fa48 	bl	8001652 <MCAL_GPIO_WritePin>
		dus(500);
 80011c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011c6:	f000 fb73 	bl	80018b0 <dus>
		MCAL_GPIO_WritePin(GPIOB, 8, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2108      	movs	r1, #8
 80011ce:	480c      	ldr	r0, [pc, #48]	; (8001200 <Servo1_Entry_Gate+0x58>)
 80011d0:	f000 fa3f 	bl	8001652 <MCAL_GPIO_WritePin>
	}
	if(Direction==Down)
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d10d      	bne.n	80011f6 <Servo1_Entry_Gate+0x4e>
	{
		//servo1 Enter gate down -90
		MCAL_GPIO_WritePin(GPIOB, 8, 1);
 80011da:	2201      	movs	r2, #1
 80011dc:	2108      	movs	r1, #8
 80011de:	4808      	ldr	r0, [pc, #32]	; (8001200 <Servo1_Entry_Gate+0x58>)
 80011e0:	f000 fa37 	bl	8001652 <MCAL_GPIO_WritePin>
		dus(1488);
 80011e4:	f44f 60ba 	mov.w	r0, #1488	; 0x5d0
 80011e8:	f000 fb62 	bl	80018b0 <dus>
		MCAL_GPIO_WritePin(GPIOB, 8, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2108      	movs	r1, #8
 80011f0:	4803      	ldr	r0, [pc, #12]	; (8001200 <Servo1_Entry_Gate+0x58>)
 80011f2:	f000 fa2e 	bl	8001652 <MCAL_GPIO_WritePin>
	}


}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40010c00 	.word	0x40010c00

08001204 <Servo2_Exit_Gate_Init>:

//B9 SERVO2
void Servo2_Exit_Gate_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
	/*SERVO MOTOR 2*/
	Pin_Config_t PinCinfg;
	PinCinfg.Pin_Num=9;
 800120a:	2309      	movs	r3, #9
 800120c:	607b      	str	r3, [r7, #4]
	PinCinfg.mode = Output_Push_pull;
 800120e:	2304      	movs	r3, #4
 8001210:	60bb      	str	r3, [r7, #8]
	PinCinfg.Speed_Output =speed_10;
 8001212:	2301      	movs	r3, #1
 8001214:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	4619      	mov	r1, r3
 800121a:	4803      	ldr	r0, [pc, #12]	; (8001228 <Servo2_Exit_Gate_Init+0x24>)
 800121c:	f000 f99a 	bl	8001554 <MCAL_GPIO_Init>
}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40010c00 	.word	0x40010c00

0800122c <Servo2_Exit_Gate>:

//Direction Up or Down
void Servo2_Exit_Gate(uint8_t Direction)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
	if(Direction == UP)
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d10d      	bne.n	8001258 <Servo2_Exit_Gate+0x2c>
	{
		//servo2 Exit gate up +90
		MCAL_GPIO_WritePin(GPIOB, 9, 1);
 800123c:	2201      	movs	r2, #1
 800123e:	2109      	movs	r1, #9
 8001240:	4810      	ldr	r0, [pc, #64]	; (8001284 <Servo2_Exit_Gate+0x58>)
 8001242:	f000 fa06 	bl	8001652 <MCAL_GPIO_WritePin>
		dus(500);
 8001246:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800124a:	f000 fb31 	bl	80018b0 <dus>
		MCAL_GPIO_WritePin(GPIOB, 9, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2109      	movs	r1, #9
 8001252:	480c      	ldr	r0, [pc, #48]	; (8001284 <Servo2_Exit_Gate+0x58>)
 8001254:	f000 f9fd 	bl	8001652 <MCAL_GPIO_WritePin>
	}

	if(Direction == Down)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d10d      	bne.n	800127a <Servo2_Exit_Gate+0x4e>
	{
		//servo2 Exit gate down -90
		MCAL_GPIO_WritePin(GPIOB, 9, 1);
 800125e:	2201      	movs	r2, #1
 8001260:	2109      	movs	r1, #9
 8001262:	4808      	ldr	r0, [pc, #32]	; (8001284 <Servo2_Exit_Gate+0x58>)
 8001264:	f000 f9f5 	bl	8001652 <MCAL_GPIO_WritePin>
		dus(1488);
 8001268:	f44f 60ba 	mov.w	r0, #1488	; 0x5d0
 800126c:	f000 fb20 	bl	80018b0 <dus>
		MCAL_GPIO_WritePin(GPIOB, 9, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2109      	movs	r1, #9
 8001274:	4803      	ldr	r0, [pc, #12]	; (8001284 <Servo2_Exit_Gate+0x58>)
 8001276:	f000 f9ec 	bl	8001652 <MCAL_GPIO_WritePin>
	}

}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40010c00 	.word	0x40010c00

08001288 <EXTI0_IRQHandler>:
// ISR functions
//-----------------------------


void EXTI0_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<0); //WRITE 1 TO CLEAR
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <EXTI0_IRQHandler+0x1c>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <EXTI0_IRQHandler+0x1c>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <EXTI0_IRQHandler+0x20>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4798      	blx	r3
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40010400 	.word	0x40010400
 80012a8:	2000023c 	.word	0x2000023c

080012ac <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<1); //WRITE 1 TO CLEAR
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <EXTI1_IRQHandler+0x1c>)
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <EXTI1_IRQHandler+0x1c>)
 80012b6:	f043 0302 	orr.w	r3, r3, #2
 80012ba:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <EXTI1_IRQHandler+0x20>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	4798      	blx	r3
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40010400 	.word	0x40010400
 80012cc:	2000023c 	.word	0x2000023c

080012d0 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<2); //WRITE 1 TO CLEAR
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <EXTI2_IRQHandler+0x1c>)
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <EXTI2_IRQHandler+0x1c>)
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <EXTI2_IRQHandler+0x20>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	4798      	blx	r3
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40010400 	.word	0x40010400
 80012f0:	2000023c 	.word	0x2000023c

080012f4 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<3); //WRITE 1 TO CLEAR
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <EXTI3_IRQHandler+0x1c>)
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	4a04      	ldr	r2, [pc, #16]	; (8001310 <EXTI3_IRQHandler+0x1c>)
 80012fe:	f043 0308 	orr.w	r3, r3, #8
 8001302:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <EXTI3_IRQHandler+0x20>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	4798      	blx	r3
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40010400 	.word	0x40010400
 8001314:	2000023c 	.word	0x2000023c

08001318 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<4); //WRITE 1 TO CLEAR
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <EXTI4_IRQHandler+0x1c>)
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <EXTI4_IRQHandler+0x1c>)
 8001322:	f043 0310 	orr.w	r3, r3, #16
 8001326:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <EXTI4_IRQHandler+0x20>)
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	4798      	blx	r3
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40010400 	.word	0x40010400
 8001338:	2000023c 	.word	0x2000023c

0800133c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	if( EXTI->EXTI_PR & (1<<5))
 8001340:	4b26      	ldr	r3, [pc, #152]	; (80013dc <EXTI9_5_IRQHandler+0xa0>)
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	f003 0320 	and.w	r3, r3, #32
 8001348:	2b00      	cmp	r3, #0
 800134a:	d008      	beq.n	800135e <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->EXTI_PR |= (1<<5); //WRITE 1 TO CLEAR
 800134c:	4b23      	ldr	r3, [pc, #140]	; (80013dc <EXTI9_5_IRQHandler+0xa0>)
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	4a22      	ldr	r2, [pc, #136]	; (80013dc <EXTI9_5_IRQHandler+0xa0>)
 8001352:	f043 0320 	orr.w	r3, r3, #32
 8001356:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[5]();
 8001358:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <EXTI9_5_IRQHandler+0xa4>)
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<6))
 800135e:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <EXTI9_5_IRQHandler+0xa0>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001366:	2b00      	cmp	r3, #0
 8001368:	d008      	beq.n	800137c <EXTI9_5_IRQHandler+0x40>
	{
		EXTI->EXTI_PR |= (1<<6); //WRITE 1 TO CLEAR
 800136a:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <EXTI9_5_IRQHandler+0xa0>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	4a1b      	ldr	r2, [pc, #108]	; (80013dc <EXTI9_5_IRQHandler+0xa0>)
 8001370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001374:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[6]();
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <EXTI9_5_IRQHandler+0xa4>)
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<7))
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <EXTI9_5_IRQHandler+0xa0>)
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001384:	2b00      	cmp	r3, #0
 8001386:	d008      	beq.n	800139a <EXTI9_5_IRQHandler+0x5e>
	{
		EXTI->EXTI_PR |= (1<<7); //WRITE 1 TO CLEAR
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <EXTI9_5_IRQHandler+0xa0>)
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	4a13      	ldr	r2, [pc, #76]	; (80013dc <EXTI9_5_IRQHandler+0xa0>)
 800138e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001392:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[7]();
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <EXTI9_5_IRQHandler+0xa4>)
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<8))
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <EXTI9_5_IRQHandler+0xa0>)
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d008      	beq.n	80013b8 <EXTI9_5_IRQHandler+0x7c>
	{
		EXTI->EXTI_PR |= (1<<8); //WRITE 1 TO CLEAR
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <EXTI9_5_IRQHandler+0xa0>)
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	4a0c      	ldr	r2, [pc, #48]	; (80013dc <EXTI9_5_IRQHandler+0xa0>)
 80013ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b0:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[8]();
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <EXTI9_5_IRQHandler+0xa4>)
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<9))
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <EXTI9_5_IRQHandler+0xa0>)
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d008      	beq.n	80013d6 <EXTI9_5_IRQHandler+0x9a>
	{
		EXTI->EXTI_PR |= (1<<9); //WRITE 1 TO CLEAR
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <EXTI9_5_IRQHandler+0xa0>)
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <EXTI9_5_IRQHandler+0xa0>)
 80013ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ce:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[9]();
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <EXTI9_5_IRQHandler+0xa4>)
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	4798      	blx	r3
	}
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40010400 	.word	0x40010400
 80013e0:	2000023c 	.word	0x2000023c

080013e4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	if( EXTI->EXTI_PR & (1<<10))
 80013e8:	4b30      	ldr	r3, [pc, #192]	; (80014ac <EXTI15_10_IRQHandler+0xc8>)
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d009      	beq.n	8001408 <EXTI15_10_IRQHandler+0x24>
	{
		EXTI->EXTI_PR |= (1<<10); //WRITE 1 TO CLEAR
 80013f4:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <EXTI15_10_IRQHandler+0xc8>)
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	4a2c      	ldr	r2, [pc, #176]	; (80014ac <EXTI15_10_IRQHandler+0xc8>)
 80013fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013fe:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[10]();
 8001400:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <EXTI15_10_IRQHandler+0xcc>)
 8001402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001404:	4798      	blx	r3
		EXTI->EXTI_PR |= (1<<15); //WRITE 1 TO CLEAR
		GP_IRQ_CallBack[15]();
	}


}
 8001406:	e04e      	b.n	80014a6 <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<11))
 8001408:	4b28      	ldr	r3, [pc, #160]	; (80014ac <EXTI15_10_IRQHandler+0xc8>)
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001410:	2b00      	cmp	r3, #0
 8001412:	d009      	beq.n	8001428 <EXTI15_10_IRQHandler+0x44>
		EXTI->EXTI_PR |= (1<<11); //WRITE 1 TO CLEAR
 8001414:	4b25      	ldr	r3, [pc, #148]	; (80014ac <EXTI15_10_IRQHandler+0xc8>)
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	4a24      	ldr	r2, [pc, #144]	; (80014ac <EXTI15_10_IRQHandler+0xc8>)
 800141a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800141e:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[11]();
 8001420:	4b23      	ldr	r3, [pc, #140]	; (80014b0 <EXTI15_10_IRQHandler+0xcc>)
 8001422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001424:	4798      	blx	r3
}
 8001426:	e03e      	b.n	80014a6 <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<12))
 8001428:	4b20      	ldr	r3, [pc, #128]	; (80014ac <EXTI15_10_IRQHandler+0xc8>)
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d009      	beq.n	8001448 <EXTI15_10_IRQHandler+0x64>
		EXTI->EXTI_PR |= (1<<12); //WRITE 1 TO CLEAR
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <EXTI15_10_IRQHandler+0xc8>)
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	4a1c      	ldr	r2, [pc, #112]	; (80014ac <EXTI15_10_IRQHandler+0xc8>)
 800143a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800143e:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[12]();
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <EXTI15_10_IRQHandler+0xcc>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	4798      	blx	r3
}
 8001446:	e02e      	b.n	80014a6 <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<13))
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <EXTI15_10_IRQHandler+0xc8>)
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d009      	beq.n	8001468 <EXTI15_10_IRQHandler+0x84>
		EXTI->EXTI_PR |= (1<<13); //WRITE 1 TO CLEAR
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <EXTI15_10_IRQHandler+0xc8>)
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	4a14      	ldr	r2, [pc, #80]	; (80014ac <EXTI15_10_IRQHandler+0xc8>)
 800145a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800145e:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[13]();
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <EXTI15_10_IRQHandler+0xcc>)
 8001462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001464:	4798      	blx	r3
}
 8001466:	e01e      	b.n	80014a6 <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<14))
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <EXTI15_10_IRQHandler+0xc8>)
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d009      	beq.n	8001488 <EXTI15_10_IRQHandler+0xa4>
		EXTI->EXTI_PR |= (1<<14); //WRITE 1 TO CLEAR
 8001474:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <EXTI15_10_IRQHandler+0xc8>)
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	4a0c      	ldr	r2, [pc, #48]	; (80014ac <EXTI15_10_IRQHandler+0xc8>)
 800147a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147e:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[14]();
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <EXTI15_10_IRQHandler+0xcc>)
 8001482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001484:	4798      	blx	r3
}
 8001486:	e00e      	b.n	80014a6 <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<15))
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <EXTI15_10_IRQHandler+0xc8>)
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d008      	beq.n	80014a6 <EXTI15_10_IRQHandler+0xc2>
		EXTI->EXTI_PR |= (1<<15); //WRITE 1 TO CLEAR
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <EXTI15_10_IRQHandler+0xc8>)
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	4a04      	ldr	r2, [pc, #16]	; (80014ac <EXTI15_10_IRQHandler+0xc8>)
 800149a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800149e:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[15]();
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <EXTI15_10_IRQHandler+0xcc>)
 80014a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a4:	4798      	blx	r3
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40010400 	.word	0x40010400
 80014b0:	2000023c 	.word	0x2000023c

080014b4 <get_CRLH_position>:
 *  ENG-TERA
 */
#include "GPIO_DRIVER.h"


int get_CRLH_position(uint32_t pin_num){
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

	switch(pin_num)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b0f      	cmp	r3, #15
 80014c0:	d842      	bhi.n	8001548 <get_CRLH_position+0x94>
 80014c2:	a201      	add	r2, pc, #4	; (adr r2, 80014c8 <get_CRLH_position+0x14>)
 80014c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c8:	08001509 	.word	0x08001509
 80014cc:	0800150d 	.word	0x0800150d
 80014d0:	08001511 	.word	0x08001511
 80014d4:	08001515 	.word	0x08001515
 80014d8:	08001519 	.word	0x08001519
 80014dc:	0800151d 	.word	0x0800151d
 80014e0:	08001521 	.word	0x08001521
 80014e4:	08001525 	.word	0x08001525
 80014e8:	08001529 	.word	0x08001529
 80014ec:	0800152d 	.word	0x0800152d
 80014f0:	08001531 	.word	0x08001531
 80014f4:	08001535 	.word	0x08001535
 80014f8:	08001539 	.word	0x08001539
 80014fc:	0800153d 	.word	0x0800153d
 8001500:	08001541 	.word	0x08001541
 8001504:	08001545 	.word	0x08001545
	{
	case 0:
		return 0;
 8001508:	2300      	movs	r3, #0
 800150a:	e01e      	b.n	800154a <get_CRLH_position+0x96>
	case 1:
		return 4;
 800150c:	2304      	movs	r3, #4
 800150e:	e01c      	b.n	800154a <get_CRLH_position+0x96>
	case 2:
		return 8;
 8001510:	2308      	movs	r3, #8
 8001512:	e01a      	b.n	800154a <get_CRLH_position+0x96>
	case 3:
		return 12;
 8001514:	230c      	movs	r3, #12
 8001516:	e018      	b.n	800154a <get_CRLH_position+0x96>
	case 4:
		return 16;
 8001518:	2310      	movs	r3, #16
 800151a:	e016      	b.n	800154a <get_CRLH_position+0x96>
	case 5:
		return 20;
 800151c:	2314      	movs	r3, #20
 800151e:	e014      	b.n	800154a <get_CRLH_position+0x96>
	case 6:
		return 24;
 8001520:	2318      	movs	r3, #24
 8001522:	e012      	b.n	800154a <get_CRLH_position+0x96>
	case 7:
		return 28;
 8001524:	231c      	movs	r3, #28
 8001526:	e010      	b.n	800154a <get_CRLH_position+0x96>
	case 8:
		return 0;
 8001528:	2300      	movs	r3, #0
 800152a:	e00e      	b.n	800154a <get_CRLH_position+0x96>
	case 9:
		return 4;
 800152c:	2304      	movs	r3, #4
 800152e:	e00c      	b.n	800154a <get_CRLH_position+0x96>
	case 10:
		return 8;
 8001530:	2308      	movs	r3, #8
 8001532:	e00a      	b.n	800154a <get_CRLH_position+0x96>
	case 11:
		return 12;
 8001534:	230c      	movs	r3, #12
 8001536:	e008      	b.n	800154a <get_CRLH_position+0x96>
	case 12:
		return 16;
 8001538:	2310      	movs	r3, #16
 800153a:	e006      	b.n	800154a <get_CRLH_position+0x96>
	case 13:
		return 20;
 800153c:	2314      	movs	r3, #20
 800153e:	e004      	b.n	800154a <get_CRLH_position+0x96>
	case 14:
		return 24;
 8001540:	2318      	movs	r3, #24
 8001542:	e002      	b.n	800154a <get_CRLH_position+0x96>
	case 15:
		return 28;
 8001544:	231c      	movs	r3, #28
 8001546:	e000      	b.n	800154a <get_CRLH_position+0x96>
	}
	return 0;
 8001548:	2300      	movs	r3, #0

}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <MCAL_GPIO_Init>:
 * @param [in]	-Pin_config_s: Is a pointer to the structure that contains the information of the pin we want to configure
 * @retval		-none
 * Note			-In Our package LQFP48 we have only GPIOA and GPIOB
 */

void MCAL_GPIO_Init(GPIO_REGISTERS_t *GPIOx, Pin_Config_t * Pin_config_s){
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]

	volatile uint32_t *configRegister = NULL;
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
	uint32_t pinConfig = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]

	configRegister = (Pin_config_s->Pin_Num < 8)? &GPIOx->GPIOx_CRL : &GPIOx->GPIOx_CRH;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b07      	cmp	r3, #7
 800156c:	d801      	bhi.n	8001572 <MCAL_GPIO_Init+0x1e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	e001      	b.n	8001576 <MCAL_GPIO_Init+0x22>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3304      	adds	r3, #4
 8001576:	60bb      	str	r3, [r7, #8]
	(*configRegister) &= ~(0x000F << get_CRLH_position(Pin_config_s->Pin_Num));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff99 	bl	80014b4 <get_CRLH_position>
 8001582:	4602      	mov	r2, r0
 8001584:	230f      	movs	r3, #15
 8001586:	4093      	lsls	r3, r2
 8001588:	43da      	mvns	r2, r3
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	401a      	ands	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	601a      	str	r2, [r3, #0]

	/* IF OUTPUT */

	if( (Pin_config_s->mode == Output_ALF_Push_pull) || (Pin_config_s->mode == Output_ALF_Open_drain) || (Pin_config_s->mode == Output_Open_drain) || (Pin_config_s->mode == Output_Push_pull) )
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b06      	cmp	r3, #6
 800159a:	d00b      	beq.n	80015b4 <MCAL_GPIO_Init+0x60>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b07      	cmp	r3, #7
 80015a2:	d007      	beq.n	80015b4 <MCAL_GPIO_Init+0x60>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b05      	cmp	r3, #5
 80015aa:	d003      	beq.n	80015b4 <MCAL_GPIO_Init+0x60>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b04      	cmp	r3, #4
 80015b2:	d10a      	bne.n	80015ca <MCAL_GPIO_Init+0x76>
	{
		pinConfig = ( ( ( (Pin_config_s->mode - 4 )<< 2 ) | (Pin_config_s->Speed_Output) ) & 0x0F );
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	3b04      	subs	r3, #4
 80015ba:	009a      	lsls	r2, r3, #2
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	e031      	b.n	800162e <MCAL_GPIO_Init+0xda>
	}

	else // IF INPUT
	{
		if( (Pin_config_s->mode == Input_Analog) || (Pin_config_s ->mode == Input_floating) )
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <MCAL_GPIO_Init+0x86>
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d106      	bne.n	80015e8 <MCAL_GPIO_Init+0x94>
		{
			pinConfig =( ( (Pin_config_s->mode << 2) | 0x00 ) & 0x0F );
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	f003 030f 	and.w	r3, r3, #15
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	e022      	b.n	800162e <MCAL_GPIO_Init+0xda>
		}
		else if(Pin_config_s->mode == Input_AF)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d102      	bne.n	80015f6 <MCAL_GPIO_Init+0xa2>
		{
			pinConfig =( ( (Input_floating << 2 ) | 0x00 ) & 0x0F );
 80015f0:	2304      	movs	r3, #4
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	e01b      	b.n	800162e <MCAL_GPIO_Init+0xda>
		}
		else // IF INPUT PULLUP\PULLDOWN
		{
			pinConfig = ( ( (Input_PullUp << 2 ) | 0x00 ) & 0x0F );
 80015f6:	2308      	movs	r3, #8
 80015f8:	60fb      	str	r3, [r7, #12]
			if(Pin_config_s->mode == Input_PullUp) // IF PULL UP
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d10a      	bne.n	8001618 <MCAL_GPIO_Init+0xc4>
			{
				GPIOx->GPIOx_ODR |= (1<<Pin_config_s->Pin_Num) ;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	2101      	movs	r1, #1
 800160c:	fa01 f202 	lsl.w	r2, r1, r2
 8001610:	431a      	orrs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	e00a      	b.n	800162e <MCAL_GPIO_Init+0xda>
			}
			else // IF PULL DOWN
			{
				GPIOx->GPIOx_ODR &= ~(1<<Pin_config_s->Pin_Num) ;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	2101      	movs	r1, #1
 8001622:	fa01 f202 	lsl.w	r2, r1, r2
 8001626:	43d2      	mvns	r2, r2
 8001628:	401a      	ands	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	60da      	str	r2, [r3, #12]

			}
		}
	}
	(*configRegister) |=( (pinConfig) << get_CRLH_position(Pin_config_s->Pin_Num) );
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ff3e 	bl	80014b4 <get_CRLH_position>
 8001638:	4602      	mov	r2, r0
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	fa03 f202 	lsl.w	r2, r3, r2
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	431a      	orrs	r2, r3
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	601a      	str	r2, [r3, #0]
}
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <MCAL_GPIO_WritePin>:
 * @param [in]	-Value: 1 for output high or 0 for output low
 * @param [in]	-Pin_Num: Variable contains the output pin number
 * @retval		-None
 * Note			-None
 */
void MCAL_GPIO_WritePin(GPIO_REGISTERS_t *GPIOx,uint32_t Pin_Num,uint32_t Value){
 8001652:	b480      	push	{r7}
 8001654:	b085      	sub	sp, #20
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]

GPIOx->GPIOx_ODR &= ~(1<<Pin_Num);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	2101      	movs	r1, #1
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	fa01 f202 	lsl.w	r2, r1, r2
 800166a:	43d2      	mvns	r2, r2
 800166c:	401a      	ands	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	60da      	str	r2, [r3, #12]
GPIOx->GPIOx_ODR |= (Value<<Pin_Num);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	431a      	orrs	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	60da      	str	r2, [r3, #12]

}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr

0800168e <MCAL_GPIO_ReadPin>:
 * @param [in]	-Pin_Num:Variable contains the output pin number
 * @retval		-The value of data which the input pin contain
 * Note			-None
 */

unsigned char MCAL_GPIO_ReadPin(GPIO_REGISTERS_t *GPIOx,uint32_t Pin_Num){
 800168e:	b480      	push	{r7}
 8001690:	b085      	sub	sp, #20
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]

	char bit_read = ((GPIOx->GPIOx_IDR & (1 << Pin_Num)) >> Pin_Num);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2101      	movs	r1, #1
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	fa01 f202 	lsl.w	r2, r1, r2
 80016a4:	401a      	ands	r2, r3
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ac:	73fb      	strb	r3, [r7, #15]
	return bit_read;
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr

080016ba <MCAL_GPIO_TogglePin>:
 * @param [in]	-GPIOx: Where x could be from A >> E depending on the Package
 * @param [in]	-Pin_Num:Variable contains the output pin number
 * @retval		-The value of data which the input port contain
 * Note			-None
 */
void MCAL_GPIO_TogglePin(GPIO_REGISTERS_t *GPIOx,uint8_t Pin_Num){
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	460b      	mov	r3, r1
 80016c4:	70fb      	strb	r3, [r7, #3]

	GPIOx->GPIOx_ODR ^= (1<<Pin_Num);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	78fa      	ldrb	r2, [r7, #3]
 80016cc:	2101      	movs	r1, #1
 80016ce:	fa01 f202 	lsl.w	r2, r1, r2
 80016d2:	405a      	eors	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	60da      	str	r2, [r3, #12]

}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr

080016e2 <I2C1_ER_IRQHandler>:
 * ======================================================================================================================
 */

//Not supported
void I2C1_ER_IRQHandler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0


}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0


}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr

08001706 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
	...

08001714 <RCC_Get_SYSCLK>:
#include "RCC_DRIVER.h"
uint8_t AHB_Prescaler[] = {0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8};
uint8_t APB2_Prescaler[] = {0,0,0,0,1,2,3,4};


uint32_t RCC_Get_SYSCLK(void){
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0

	int x;
	x = ( (RCC->RCC_CFGR)  & (0b11 << 2) ) >> 2;
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <RCC_Get_SYSCLK+0x38>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	607b      	str	r3, [r7, #4]
	switch (x)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d005      	beq.n	8001738 <RCC_Get_SYSCLK+0x24>
 800172c:	2b02      	cmp	r3, #2
 800172e:	d005      	beq.n	800173c <RCC_Get_SYSCLK+0x28>
 8001730:	2b00      	cmp	r3, #0
 8001732:	d105      	bne.n	8001740 <RCC_Get_SYSCLK+0x2c>
	{
	case 0:
		return HSI;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <RCC_Get_SYSCLK+0x3c>)
 8001736:	e004      	b.n	8001742 <RCC_Get_SYSCLK+0x2e>
		break;
	case 1:
		return HSE;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <RCC_Get_SYSCLK+0x40>)
 800173a:	e002      	b.n	8001742 <RCC_Get_SYSCLK+0x2e>
		break;
	case 2:
		return PLL;
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <RCC_Get_SYSCLK+0x40>)
 800173e:	e000      	b.n	8001742 <RCC_Get_SYSCLK+0x2e>
		break;
	}
return 0;
 8001740:	2300      	movs	r3, #0

}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	40021000 	.word	0x40021000
 8001750:	007a1200 	.word	0x007a1200
 8001754:	00f42400 	.word	0x00f42400

08001758 <RCC_Get_HCLK>:
uint32_t RCC_Get_HCLK(void){
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0

	return RCC_Get_SYSCLK() >> AHB_Prescaler[ ( (RCC->RCC_CFGR) & (0b111 << 4) ) >> 4 ];
 800175c:	f7ff ffda 	bl	8001714 <RCC_Get_SYSCLK>
 8001760:	4601      	mov	r1, r0
 8001762:	4b05      	ldr	r3, [pc, #20]	; (8001778 <RCC_Get_HCLK+0x20>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	091b      	lsrs	r3, r3, #4
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	4a03      	ldr	r2, [pc, #12]	; (800177c <RCC_Get_HCLK+0x24>)
 800176e:	5cd3      	ldrb	r3, [r2, r3]
 8001770:	fa21 f303 	lsr.w	r3, r1, r3


}
 8001774:	4618      	mov	r0, r3
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40021000 	.word	0x40021000
 800177c:	20000010 	.word	0x20000010

08001780 <RCC_Get_PCLK2>:
uint32_t RCC_Get_PCLK2(void){
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0

	return RCC_Get_HCLK() >> APB2_Prescaler[ ( (RCC->RCC_CFGR) & (0b111 << 11) ) >> 11 ];
 8001784:	f7ff ffe8 	bl	8001758 <RCC_Get_HCLK>
 8001788:	4601      	mov	r1, r0
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <RCC_Get_PCLK2+0x20>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	0adb      	lsrs	r3, r3, #11
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	4a03      	ldr	r2, [pc, #12]	; (80017a4 <RCC_Get_PCLK2+0x24>)
 8001796:	5cd3      	ldrb	r3, [r2, r3]
 8001798:	fa21 f303 	lsr.w	r3, r1, r3

}
 800179c:	4618      	mov	r0, r3
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40021000 	.word	0x40021000
 80017a4:	20000020 	.word	0x20000020

080017a8 <RCC_Get_PCLK1>:

uint32_t RCC_Get_PCLK1(void){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0

	return RCC_Get_HCLK() >> APB2_Prescaler[ ( (RCC->RCC_CFGR) & (0b111 << 8) ) >> 8 ];
 80017ac:	f7ff ffd4 	bl	8001758 <RCC_Get_HCLK>
 80017b0:	4601      	mov	r1, r0
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <RCC_Get_PCLK1+0x20>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	0a1b      	lsrs	r3, r3, #8
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	4a03      	ldr	r2, [pc, #12]	; (80017cc <RCC_Get_PCLK1+0x24>)
 80017be:	5cd3      	ldrb	r3, [r2, r3]
 80017c0:	fa21 f303 	lsr.w	r3, r1, r3

}
 80017c4:	4618      	mov	r0, r3
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000
 80017cc:	20000020 	.word	0x20000020

080017d0 <SPI1_IRQHandler>:
//------------------<< ISR >>--------------------
//-----------------------------------------------


void SPI1_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
	Interrupt_flags_bits_t IRQ;
	IRQ.Receive_buffer_not_empty_flag = ( ( SPI1->SPI_SR & (1<<0) ) >> 0 );
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <SPI1_IRQHandler+0x40>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	793b      	ldrb	r3, [r7, #4]
 80017e2:	f362 0300 	bfi	r3, r2, #0, #1
 80017e6:	713b      	strb	r3, [r7, #4]
	IRQ.Transmit_buffer_empty_flag = ( ( SPI1->SPI_SR & (1<<1) ) >> 1 );
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <SPI1_IRQHandler+0x40>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	085b      	lsrs	r3, r3, #1
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	793b      	ldrb	r3, [r7, #4]
 80017f6:	f362 0341 	bfi	r3, r2, #1, #1
 80017fa:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config_s->CallBack_PTR (&IRQ);
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <SPI1_IRQHandler+0x44>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	1d3a      	adds	r2, r7, #4
 8001804:	4610      	mov	r0, r2
 8001806:	4798      	blx	r3



}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40013000 	.word	0x40013000
 8001814:	20000278 	.word	0x20000278

08001818 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
	Interrupt_flags_bits_t IRQ;
	IRQ.Receive_buffer_not_empty_flag = ( ( SPI2->SPI_SR & (1<<0) ) >> 0 );
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <SPI2_IRQHandler+0x40>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	b2da      	uxtb	r2, r3
 8001828:	793b      	ldrb	r3, [r7, #4]
 800182a:	f362 0300 	bfi	r3, r2, #0, #1
 800182e:	713b      	strb	r3, [r7, #4]
	IRQ.Transmit_buffer_empty_flag = ( ( SPI2->SPI_SR & (1<<1) ) >> 1 );
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <SPI2_IRQHandler+0x40>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	085b      	lsrs	r3, r3, #1
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	b2da      	uxtb	r2, r3
 800183c:	793b      	ldrb	r3, [r7, #4]
 800183e:	f362 0341 	bfi	r3, r2, #1, #1
 8001842:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config_s->CallBack_PTR (&IRQ);
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <SPI2_IRQHandler+0x44>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	1d3a      	adds	r2, r7, #4
 800184c:	4610      	mov	r0, r2
 800184e:	4798      	blx	r3

}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40003800 	.word	0x40003800
 800185c:	20000278 	.word	0x20000278

08001860 <Timer2_init>:

#include "Timer.h"


void Timer2_init(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
	RCC->RCC_APB1ENR |=(1<<0);     //Enable Rcc for tim2
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <Timer2_init+0x40>)
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	4a0d      	ldr	r2, [pc, #52]	; (80018a0 <Timer2_init+0x40>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	61d3      	str	r3, [r2, #28]
	TIM2_PSC = 7;             //Clk_input=(8M/(7+1))=1MHZ
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <Timer2_init+0x44>)
 8001872:	2207      	movs	r2, #7
 8001874:	601a      	str	r2, [r3, #0]
	TIM2_ARR = 0xC350;        //to make interrupt after 50000 tike(50000*10^-6)=0.05s
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <Timer2_init+0x48>)
 8001878:	f24c 3250 	movw	r2, #50000	; 0xc350
 800187c:	601a      	str	r2, [r3, #0]
	TIM2_CR1 |=(1<<0);
 800187e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6013      	str	r3, [r2, #0]
	while(!(TIM2_SR)&(1<<0));
 800188e:	bf00      	nop
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <Timer2_init+0x4c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0fb      	beq.n	8001890 <Timer2_init+0x30>
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40000028 	.word	0x40000028
 80018a8:	4000002c 	.word	0x4000002c
 80018ac:	40000010 	.word	0x40000010

080018b0 <dus>:

void dus(int us)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	TIM2_CNT=0;
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <dus+0x24>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
	while(TIM2_CNT<us);
 80018be:	bf00      	nop
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <dus+0x24>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d3fa      	bcc.n	80018c0 <dus+0x10>
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	40000024 	.word	0x40000024

080018d8 <dms>:

void dms(int ms)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	int i=0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
	for(i=0;i<ms;i++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	e006      	b.n	80018f8 <dms+0x20>
	{
		dus(1000);
 80018ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018ee:	f7ff ffdf 	bl	80018b0 <dus>
	for(i=0;i<ms;i++)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3301      	adds	r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	dbf4      	blt.n	80018ea <dms+0x12>
	}
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <MCAL_USART_Init>:
 * @param [in] 	-USARTx: Where x could be 1 or 2 or 3 depending on the Package
 * @param [in]	-USART_Config_s: Is a pointer to the structure that contains the information of the SPI we want to configure
 * @retval		-none
 * Note			-In Our package LQFP48 we have only USART1 and USART2
 */
void    MCAL_USART_Init(USART_REGISTERS_t * USARTx,USART_Config_t * USART_Config_s){
 8001908:	b5b0      	push	{r4, r5, r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]

	if(USARTx == USART1)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a89      	ldr	r2, [pc, #548]	; (8001b3c <MCAL_USART_Init+0x234>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d108      	bne.n	800192c <MCAL_USART_Init+0x24>
	{
		Global_USART_Config_s[0] = USART_Config_s;
 800191a:	4a89      	ldr	r2, [pc, #548]	; (8001b40 <MCAL_USART_Init+0x238>)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	6013      	str	r3, [r2, #0]
		USART1_CLOCK_EN();
 8001920:	4b88      	ldr	r3, [pc, #544]	; (8001b44 <MCAL_USART_Init+0x23c>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4a87      	ldr	r2, [pc, #540]	; (8001b44 <MCAL_USART_Init+0x23c>)
 8001926:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800192a:	6193      	str	r3, [r2, #24]

	}
	if(USARTx == USART2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a86      	ldr	r2, [pc, #536]	; (8001b48 <MCAL_USART_Init+0x240>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d108      	bne.n	8001946 <MCAL_USART_Init+0x3e>
	{
		Global_USART_Config_s[1] = USART_Config_s;
 8001934:	4a82      	ldr	r2, [pc, #520]	; (8001b40 <MCAL_USART_Init+0x238>)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	6053      	str	r3, [r2, #4]
		USART2_CLOCK_EN();
 800193a:	4b82      	ldr	r3, [pc, #520]	; (8001b44 <MCAL_USART_Init+0x23c>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	4a81      	ldr	r2, [pc, #516]	; (8001b44 <MCAL_USART_Init+0x23c>)
 8001940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001944:	61d3      	str	r3, [r2, #28]

	}

	if(USART_Config_s->Sync_EN == USART_Enable)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	785b      	ldrb	r3, [r3, #1]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d106      	bne.n	800195c <MCAL_USART_Init+0x54>
	{
		// 1- Bit 11 CLKEN: Clock enable

		USARTx->USART_CR2 |= (1<<11);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	611a      	str	r2, [r3, #16]
 800195a:	e097      	b.n	8001a8c <MCAL_USART_Init+0x184>

	}
	else if(USART_Config_s->Async_EN == USART_Enable)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b01      	cmp	r3, #1
 8001962:	f040 8093 	bne.w	8001a8c <MCAL_USART_Init+0x184>
	{

		// 1- USART ENABLE
		USARTx->USART_CR1 |= (1<<13);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	60da      	str	r2, [r3, #12]

		// 2- TX and RX ENABLE

		USARTx->USART_CR1 |= ( (1<<2) | (1<<3) );
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	f043 020c 	orr.w	r2, r3, #12
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	60da      	str	r2, [r3, #12]

		// 3- Program the M bit in USART_CR1 to define the word length.

		USARTx->USART_CR1 |= USART_Config_s->Async_Config_s.Word_Length;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	7912      	ldrb	r2, [r2, #4]
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	60da      	str	r2, [r3, #12]

		// 4- Program the number of stop bits in USART_CR2.

		USARTx->USART_CR2 |= USART_Config_s->Async_Config_s.Stop_Bits;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	7952      	ldrb	r2, [r2, #5]
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	611a      	str	r2, [r3, #16]

		// 5 - Select the desired baud rate using the USART_BRR register.

		if(USARTx == USART1)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a67      	ldr	r2, [pc, #412]	; (8001b3c <MCAL_USART_Init+0x234>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d12f      	bne.n	8001a02 <MCAL_USART_Init+0xfa>
		{

			USARTx->USART_BRR |= USART_BRR_Register(RCC_Get_PCLK2(),USART_Config_s->Async_Config_s.Baud_Rate);
 80019a2:	f7ff feed 	bl	8001780 <RCC_Get_PCLK2>
 80019a6:	4602      	mov	r2, r0
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	011c      	lsls	r4, r3, #4
 80019b4:	f7ff fee4 	bl	8001780 <RCC_Get_PCLK2>
 80019b8:	4602      	mov	r2, r0
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	009a      	lsls	r2, r3, #2
 80019c2:	441a      	add	r2, r3
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	fbb2 f5f3 	udiv	r5, r2, r3
 80019ce:	f7ff fed7 	bl	8001780 <RCC_Get_PCLK2>
 80019d2:	4602      	mov	r2, r0
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	fbb2 f3f3 	udiv	r3, r2, r3
 80019de:	2264      	movs	r2, #100	; 0x64
 80019e0:	fb02 f303 	mul.w	r3, r2, r3
 80019e4:	1aeb      	subs	r3, r5, r3
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	4a58      	ldr	r2, [pc, #352]	; (8001b4c <MCAL_USART_Init+0x244>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	095b      	lsrs	r3, r3, #5
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	ea44 0203 	orr.w	r2, r4, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	609a      	str	r2, [r3, #8]
		}
		if(USARTx == USART2)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a50      	ldr	r2, [pc, #320]	; (8001b48 <MCAL_USART_Init+0x240>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d12f      	bne.n	8001a6a <MCAL_USART_Init+0x162>
		{
			USARTx->USART_BRR |= USART_BRR_Register(RCC_Get_PCLK1(),USART_Config_s->Async_Config_s.Baud_Rate);
 8001a0a:	f7ff fecd 	bl	80017a8 <RCC_Get_PCLK1>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	011c      	lsls	r4, r3, #4
 8001a1c:	f7ff fec4 	bl	80017a8 <RCC_Get_PCLK1>
 8001a20:	4602      	mov	r2, r0
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	009a      	lsls	r2, r3, #2
 8001a2a:	441a      	add	r2, r3
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	fbb2 f5f3 	udiv	r5, r2, r3
 8001a36:	f7ff feb7 	bl	80017a8 <RCC_Get_PCLK1>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	2264      	movs	r2, #100	; 0x64
 8001a48:	fb02 f303 	mul.w	r3, r2, r3
 8001a4c:	1aeb      	subs	r3, r5, r3
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	4a3e      	ldr	r2, [pc, #248]	; (8001b4c <MCAL_USART_Init+0x244>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	095b      	lsrs	r3, r3, #5
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	ea44 0203 	orr.w	r2, r4, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	609a      	str	r2, [r3, #8]

		}
		// 6 - Set Parity Configurations

		if(USART_Config_s->Async_Config_s.Parity.Parity_Enable == USART_Enable)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	7b1b      	ldrb	r3, [r3, #12]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d10c      	bne.n	8001a8c <MCAL_USART_Init+0x184>
		{

			USARTx->USART_CR1 |= (1<<10);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	60da      	str	r2, [r3, #12]
			USARTx->USART_CR1 |= USART_Config_s->Async_Config_s.Parity.Parity_Even_Odd;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	7b52      	ldrb	r2, [r2, #13]
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	60da      	str	r2, [r3, #12]
		}
	}

	if( (USART_Config_s->interrupts_CNFG.TX_Interrupt_Enable_Or_Disable) == USART_Enable )
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	7c1b      	ldrb	r3, [r3, #16]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d108      	bne.n	8001aa6 <MCAL_USART_Init+0x19e>
	{
		USARTx->USART_CR1 |= (1<<7);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	60da      	str	r2, [r3, #12]
		TX_flag1 =1;
 8001aa0:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <MCAL_USART_Init+0x248>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
	}
	if( (USART_Config_s->interrupts_CNFG.RX_Interrupt_Enable_Or_Disable) == USART_Enable )
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	7c5b      	ldrb	r3, [r3, #17]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d108      	bne.n	8001ac0 <MCAL_USART_Init+0x1b8>
	{
		USARTx->USART_CR1 |= (1<<5);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	f043 0220 	orr.w	r2, r3, #32
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	60da      	str	r2, [r3, #12]
		RX_flag2=1;
 8001aba:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <MCAL_USART_Init+0x24c>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]
	}
	if( (USART_Config_s->interrupts_CNFG.TC_Interrupt_Enable_Or_Disable) == USART_Enable )
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	7c9b      	ldrb	r3, [r3, #18]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d108      	bne.n	8001ada <MCAL_USART_Init+0x1d2>
	{
		USARTx->USART_CR1 |= (1<<6);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	60da      	str	r2, [r3, #12]
		TC_flag3=1;
 8001ad4:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <MCAL_USART_Init+0x250>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	701a      	strb	r2, [r3, #0]
	}

	if( (TX_flag1 || RX_flag2 || TC_flag3) )
 8001ada:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <MCAL_USART_Init+0x248>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d107      	bne.n	8001af2 <MCAL_USART_Init+0x1ea>
 8001ae2:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <MCAL_USART_Init+0x24c>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d103      	bne.n	8001af2 <MCAL_USART_Init+0x1ea>
 8001aea:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <MCAL_USART_Init+0x250>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d01f      	beq.n	8001b32 <MCAL_USART_Init+0x22a>
	{

		if(USARTx == USART1)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a11      	ldr	r2, [pc, #68]	; (8001b3c <MCAL_USART_Init+0x234>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d106      	bne.n	8001b08 <MCAL_USART_Init+0x200>
		{
			NVIC->NVIC_ISER1 |= (1<< 5 );
 8001afa:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <MCAL_USART_Init+0x254>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	4a17      	ldr	r2, [pc, #92]	; (8001b5c <MCAL_USART_Init+0x254>)
 8001b00:	f043 0320 	orr.w	r3, r3, #32
 8001b04:	6053      	str	r3, [r2, #4]
		else if(USARTx == USART3)
		{
			NVIC->NVIC_ISER1 |= (1<<7);
		}
	}
}
 8001b06:	e014      	b.n	8001b32 <MCAL_USART_Init+0x22a>
		else if(USARTx == USART2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a0f      	ldr	r2, [pc, #60]	; (8001b48 <MCAL_USART_Init+0x240>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d106      	bne.n	8001b1e <MCAL_USART_Init+0x216>
			NVIC->NVIC_ISER1 |= (1<<6);
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <MCAL_USART_Init+0x254>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4a11      	ldr	r2, [pc, #68]	; (8001b5c <MCAL_USART_Init+0x254>)
 8001b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b1a:	6053      	str	r3, [r2, #4]
}
 8001b1c:	e009      	b.n	8001b32 <MCAL_USART_Init+0x22a>
		else if(USARTx == USART3)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <MCAL_USART_Init+0x258>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d105      	bne.n	8001b32 <MCAL_USART_Init+0x22a>
			NVIC->NVIC_ISER1 |= (1<<7);
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <MCAL_USART_Init+0x254>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4a0c      	ldr	r2, [pc, #48]	; (8001b5c <MCAL_USART_Init+0x254>)
 8001b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b30:	6053      	str	r3, [r2, #4]
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40013800 	.word	0x40013800
 8001b40:	20000220 	.word	0x20000220
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40004400 	.word	0x40004400
 8001b4c:	51eb851f 	.word	0x51eb851f
 8001b50:	2000021c 	.word	0x2000021c
 8001b54:	2000021d 	.word	0x2000021d
 8001b58:	2000021e 	.word	0x2000021e
 8001b5c:	e000e100 	.word	0xe000e100
 8001b60:	40004800 	.word	0x40004800

08001b64 <MCAL_USART_SendChar>:
 * @param [in] 	-USARTx: Where x could be 1 or 2 or 3 depending on the Package
 * @param [in]	-Buffer: Is a pointer to the buffer that we want to send
 * @retval		-none
 * Note			-In Our package LQFP48 we have only USART1 and USART2
 */
void    MCAL_USART_SendChar(USART_REGISTERS_t * USARTx,uint16_t * Buffer){
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]

	if(!(  (TX_flag1)||(RX_flag2)||(TC_flag3) ))
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <MCAL_USART_SendChar+0x74>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10e      	bne.n	8001b94 <MCAL_USART_SendChar+0x30>
 8001b76:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <MCAL_USART_SendChar+0x78>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10a      	bne.n	8001b94 <MCAL_USART_SendChar+0x30>
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <MCAL_USART_SendChar+0x7c>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d106      	bne.n	8001b94 <MCAL_USART_SendChar+0x30>
	{
		while(!( USARTx->USART_SR & (1<<7) ) );
 8001b86:	bf00      	nop
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f9      	beq.n	8001b88 <MCAL_USART_SendChar+0x24>

	}
	if(USARTx == USART1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <MCAL_USART_SendChar+0x80>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d10a      	bne.n	8001bb2 <MCAL_USART_SendChar+0x4e>
	{
		if(Global_USART_Config_s[0]->Async_Config_s.Word_Length == Nine_bits)
		{
			USARTx->USART_DR = (*Buffer  & 0x01FF );
		}
		else if(Global_USART_Config_s[0]->Async_Config_s.Word_Length == Eight_bits)
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <MCAL_USART_SendChar+0x84>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	791b      	ldrb	r3, [r3, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d113      	bne.n	8001bce <MCAL_USART_SendChar+0x6a>
		{
			USARTx->USART_DR = (*Buffer  & 0xFF );
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	605a      	str	r2, [r3, #4]
	}




}
 8001bb0:	e00d      	b.n	8001bce <MCAL_USART_SendChar+0x6a>
	else if(USARTx == USART2)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	; (8001bec <MCAL_USART_SendChar+0x88>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d109      	bne.n	8001bce <MCAL_USART_SendChar+0x6a>
		else if(Global_USART_Config_s[1]->Async_Config_s.Word_Length == Eight_bits)
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <MCAL_USART_SendChar+0x84>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	791b      	ldrb	r3, [r3, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d104      	bne.n	8001bce <MCAL_USART_SendChar+0x6a>
			USARTx->USART_DR = (*Buffer  & 0xFF );
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	605a      	str	r2, [r3, #4]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	2000021c 	.word	0x2000021c
 8001bdc:	2000021d 	.word	0x2000021d
 8001be0:	2000021e 	.word	0x2000021e
 8001be4:	40013800 	.word	0x40013800
 8001be8:	20000220 	.word	0x20000220
 8001bec:	40004400 	.word	0x40004400

08001bf0 <MCAL_USART_ReceiveChar>:
 * @param [in] 	-USARTx: Where x could be 1 or 2 or 3 depending on the Package
 * @param [in]	-Buffer: Is a pointer to the buffer where we want to save the received value
 * @retval		-none
 * Note			-In Our package LQFP48 we have only USART1 and USART2
 */
void MCAL_USART_ReceiveChar(USART_REGISTERS_t * USARTx,uint16_t * Buffer){
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]

	if( !(  (TX_flag1)||(RX_flag2)||(TC_flag3) )  )
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <MCAL_USART_ReceiveChar+0xb4>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10e      	bne.n	8001c20 <MCAL_USART_ReceiveChar+0x30>
 8001c02:	4b29      	ldr	r3, [pc, #164]	; (8001ca8 <MCAL_USART_ReceiveChar+0xb8>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10a      	bne.n	8001c20 <MCAL_USART_ReceiveChar+0x30>
 8001c0a:	4b28      	ldr	r3, [pc, #160]	; (8001cac <MCAL_USART_ReceiveChar+0xbc>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <MCAL_USART_ReceiveChar+0x30>
	{
		while(!( USARTx->USART_SR & (1<<5) ) );
 8001c12:	bf00      	nop
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0320 	and.w	r3, r3, #32
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0f9      	beq.n	8001c14 <MCAL_USART_ReceiveChar+0x24>

	}
	if(USARTx == USART1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a23      	ldr	r2, [pc, #140]	; (8001cb0 <MCAL_USART_ReceiveChar+0xc0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d11a      	bne.n	8001c5e <MCAL_USART_ReceiveChar+0x6e>
			else
			{
				*Buffer = USARTx->USART_DR & 0x01FF;
			}
		}
		else if(Global_USART_Config_s[0]->Async_Config_s.Word_Length == Eight_bits)
 8001c28:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <MCAL_USART_ReceiveChar+0xc4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	791b      	ldrb	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d133      	bne.n	8001c9a <MCAL_USART_ReceiveChar+0xaa>
		{
			if(Global_USART_Config_s[0]->Async_Config_s.Parity.Parity_Enable)
 8001c32:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <MCAL_USART_ReceiveChar+0xc4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	7b1b      	ldrb	r3, [r3, #12]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d008      	beq.n	8001c4e <MCAL_USART_ReceiveChar+0x5e>
			{
				*Buffer = USARTx->USART_DR   & 0x7F ;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	801a      	strh	r2, [r3, #0]
				*Buffer = USARTx->USART_DR & 0x0FF;
			}
		}
	}

}
 8001c4c:	e025      	b.n	8001c9a <MCAL_USART_ReceiveChar+0xaa>
				*Buffer = USARTx->USART_DR & 0x0FF;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	801a      	strh	r2, [r3, #0]
}
 8001c5c:	e01d      	b.n	8001c9a <MCAL_USART_ReceiveChar+0xaa>
	else if(USARTx == USART2)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a15      	ldr	r2, [pc, #84]	; (8001cb8 <MCAL_USART_ReceiveChar+0xc8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d119      	bne.n	8001c9a <MCAL_USART_ReceiveChar+0xaa>
		else if(Global_USART_Config_s[1]->Async_Config_s.Word_Length == Eight_bits)
 8001c66:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <MCAL_USART_ReceiveChar+0xc4>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	791b      	ldrb	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d114      	bne.n	8001c9a <MCAL_USART_ReceiveChar+0xaa>
			if(Global_USART_Config_s[1]->Async_Config_s.Parity.Parity_Enable)
 8001c70:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <MCAL_USART_ReceiveChar+0xc4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	7b1b      	ldrb	r3, [r3, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d008      	beq.n	8001c8c <MCAL_USART_ReceiveChar+0x9c>
				*Buffer = USARTx->USART_DR   & 0x7F ;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	801a      	strh	r2, [r3, #0]
}
 8001c8a:	e006      	b.n	8001c9a <MCAL_USART_ReceiveChar+0xaa>
				*Buffer = USARTx->USART_DR & 0x0FF;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	801a      	strh	r2, [r3, #0]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	2000021c 	.word	0x2000021c
 8001ca8:	2000021d 	.word	0x2000021d
 8001cac:	2000021e 	.word	0x2000021e
 8001cb0:	40013800 	.word	0x40013800
 8001cb4:	20000220 	.word	0x20000220
 8001cb8:	40004400 	.word	0x40004400

08001cbc <MCAL_USART_GPIO_Pins_Config>:
 * @brief 		-This Function is to configure the USART pins to its alternative function
 * @param [in] 	-USARTx: Where x could be 1 or 2 or 3 depending on the Package
 * @retval		-none
 * Note			-In Our package LQFP48 we have only USART1 AND USART2
 */
void 	MCAL_USART_GPIO_Pins_Config(USART_REGISTERS_t * USARTx){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08c      	sub	sp, #48	; 0x30
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

	// USARTx_RX Full duplex Input floating / Input pull-up
	// USARTx_TX(1) Full duplex Alternate function push-pull
	if(USARTx == USART1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a29      	ldr	r2, [pc, #164]	; (8001d6c <MCAL_USART_GPIO_Pins_Config+0xb0>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d116      	bne.n	8001cfa <MCAL_USART_GPIO_Pins_Config+0x3e>
	{
		// USART1_TX PA9
		//USART1_RX PA10
		Pin_Config_t GPIO_Pin_CNFG_s;
		GPIO_Pin_CNFG_s.Pin_Num = 9;
 8001ccc:	2309      	movs	r3, #9
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_Pin_CNFG_s.mode = Output_ALF_Push_pull;
 8001cd0:	2306      	movs	r3, #6
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_Pin_CNFG_s.Speed_Output = speed_10;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
		MCAL_GPIO_Init(GPIOA, &GPIO_Pin_CNFG_s);
 8001cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4824      	ldr	r0, [pc, #144]	; (8001d70 <MCAL_USART_GPIO_Pins_Config+0xb4>)
 8001ce0:	f7ff fc38 	bl	8001554 <MCAL_GPIO_Init>

		GPIO_Pin_CNFG_s.Pin_Num = 10;
 8001ce4:	230a      	movs	r3, #10
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_Pin_CNFG_s.mode = Input_AF;
 8001ce8:	2308      	movs	r3, #8
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
		MCAL_GPIO_Init(GPIOA, &GPIO_Pin_CNFG_s);
 8001cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	481f      	ldr	r0, [pc, #124]	; (8001d70 <MCAL_USART_GPIO_Pins_Config+0xb4>)
 8001cf4:	f7ff fc2e 	bl	8001554 <MCAL_GPIO_Init>
		GPIO_Pin_CNFG_s.Pin_Num = 11;
		GPIO_Pin_CNFG_s.mode = Input_AF;
		MCAL_GPIO_Init(GPIOB, &GPIO_Pin_CNFG_s);

	}
}
 8001cf8:	e034      	b.n	8001d64 <MCAL_USART_GPIO_Pins_Config+0xa8>
	else if(USARTx == USART2)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a1d      	ldr	r2, [pc, #116]	; (8001d74 <MCAL_USART_GPIO_Pins_Config+0xb8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d116      	bne.n	8001d30 <MCAL_USART_GPIO_Pins_Config+0x74>
		GPIO_Pin_CNFG_s.Pin_Num = 2;
 8001d02:	2302      	movs	r3, #2
 8001d04:	61bb      	str	r3, [r7, #24]
		GPIO_Pin_CNFG_s.mode = Output_ALF_Push_pull;
 8001d06:	2306      	movs	r3, #6
 8001d08:	61fb      	str	r3, [r7, #28]
		GPIO_Pin_CNFG_s.Speed_Output = speed_10;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	623b      	str	r3, [r7, #32]
		MCAL_GPIO_Init(GPIOA, &GPIO_Pin_CNFG_s);
 8001d0e:	f107 0318 	add.w	r3, r7, #24
 8001d12:	4619      	mov	r1, r3
 8001d14:	4816      	ldr	r0, [pc, #88]	; (8001d70 <MCAL_USART_GPIO_Pins_Config+0xb4>)
 8001d16:	f7ff fc1d 	bl	8001554 <MCAL_GPIO_Init>
		GPIO_Pin_CNFG_s.Pin_Num = 3;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	61bb      	str	r3, [r7, #24]
		GPIO_Pin_CNFG_s.mode = Input_AF;
 8001d1e:	2308      	movs	r3, #8
 8001d20:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_Init(GPIOA, &GPIO_Pin_CNFG_s);
 8001d22:	f107 0318 	add.w	r3, r7, #24
 8001d26:	4619      	mov	r1, r3
 8001d28:	4811      	ldr	r0, [pc, #68]	; (8001d70 <MCAL_USART_GPIO_Pins_Config+0xb4>)
 8001d2a:	f7ff fc13 	bl	8001554 <MCAL_GPIO_Init>
}
 8001d2e:	e019      	b.n	8001d64 <MCAL_USART_GPIO_Pins_Config+0xa8>
	else if(USARTx == USART3)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a11      	ldr	r2, [pc, #68]	; (8001d78 <MCAL_USART_GPIO_Pins_Config+0xbc>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d115      	bne.n	8001d64 <MCAL_USART_GPIO_Pins_Config+0xa8>
		GPIO_Pin_CNFG_s.Pin_Num = 10;
 8001d38:	230a      	movs	r3, #10
 8001d3a:	60fb      	str	r3, [r7, #12]
		GPIO_Pin_CNFG_s.mode = Output_ALF_Push_pull;
 8001d3c:	2306      	movs	r3, #6
 8001d3e:	613b      	str	r3, [r7, #16]
		GPIO_Pin_CNFG_s.Speed_Output = speed_10;
 8001d40:	2301      	movs	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOB, &GPIO_Pin_CNFG_s);
 8001d44:	f107 030c 	add.w	r3, r7, #12
 8001d48:	4619      	mov	r1, r3
 8001d4a:	480c      	ldr	r0, [pc, #48]	; (8001d7c <MCAL_USART_GPIO_Pins_Config+0xc0>)
 8001d4c:	f7ff fc02 	bl	8001554 <MCAL_GPIO_Init>
		GPIO_Pin_CNFG_s.Pin_Num = 11;
 8001d50:	230b      	movs	r3, #11
 8001d52:	60fb      	str	r3, [r7, #12]
		GPIO_Pin_CNFG_s.mode = Input_AF;
 8001d54:	2308      	movs	r3, #8
 8001d56:	613b      	str	r3, [r7, #16]
		MCAL_GPIO_Init(GPIOB, &GPIO_Pin_CNFG_s);
 8001d58:	f107 030c 	add.w	r3, r7, #12
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4807      	ldr	r0, [pc, #28]	; (8001d7c <MCAL_USART_GPIO_Pins_Config+0xc0>)
 8001d60:	f7ff fbf8 	bl	8001554 <MCAL_GPIO_Init>
}
 8001d64:	bf00      	nop
 8001d66:	3730      	adds	r7, #48	; 0x30
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40013800 	.word	0x40013800
 8001d70:	40010800 	.word	0x40010800
 8001d74:	40004400 	.word	0x40004400
 8001d78:	40004800 	.word	0x40004800
 8001d7c:	40010c00 	.word	0x40010c00

08001d80 <USART1_IRQHandler>:

//-----------------------------------------------
//------------------<< ISR >>--------------------
//-----------------------------------------------
void USART1_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
	interrupts_Bits IRQ = { ( (USART1->USART_SR) & (0b1<<5) ) >> 5 , ( (USART1->USART_SR) & (0b1<<6) ) >> 6 , ( (USART1->USART_SR) & (0b1<<7) ) >> 7};
 8001d86:	2300      	movs	r3, #0
 8001d88:	713b      	strb	r3, [r7, #4]
 8001d8a:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <USART1_IRQHandler+0x5c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	793b      	ldrb	r3, [r7, #4]
 8001d98:	f362 0300 	bfi	r3, r2, #0, #1
 8001d9c:	713b      	strb	r3, [r7, #4]
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <USART1_IRQHandler+0x5c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	099b      	lsrs	r3, r3, #6
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	793b      	ldrb	r3, [r7, #4]
 8001dac:	f362 0341 	bfi	r3, r2, #1, #1
 8001db0:	713b      	strb	r3, [r7, #4]
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <USART1_IRQHandler+0x5c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	09db      	lsrs	r3, r3, #7
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	793b      	ldrb	r3, [r7, #4]
 8001dc0:	f362 0382 	bfi	r3, r2, #2, #1
 8001dc4:	713b      	strb	r3, [r7, #4]
	Global_USART_Config_s[0]->CallBack_FN (&IRQ);
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <USART1_IRQHandler+0x60>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	1d3a      	adds	r2, r7, #4
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4798      	blx	r3
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40013800 	.word	0x40013800
 8001de0:	20000220 	.word	0x20000220

08001de4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
	interrupts_Bits IRQ = { ( (USART2->USART_SR) & (0b1<<5) ) >> 5 , ( (USART2->USART_SR) & (0b1<<6) ) >> 6 , ( (USART2->USART_SR) & (0b1<<7) ) >> 7};
 8001dea:	2300      	movs	r3, #0
 8001dec:	713b      	strb	r3, [r7, #4]
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <USART2_IRQHandler+0x5c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	793b      	ldrb	r3, [r7, #4]
 8001dfc:	f362 0300 	bfi	r3, r2, #0, #1
 8001e00:	713b      	strb	r3, [r7, #4]
 8001e02:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <USART2_IRQHandler+0x5c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	099b      	lsrs	r3, r3, #6
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	793b      	ldrb	r3, [r7, #4]
 8001e10:	f362 0341 	bfi	r3, r2, #1, #1
 8001e14:	713b      	strb	r3, [r7, #4]
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <USART2_IRQHandler+0x5c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	09db      	lsrs	r3, r3, #7
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	793b      	ldrb	r3, [r7, #4]
 8001e24:	f362 0382 	bfi	r3, r2, #2, #1
 8001e28:	713b      	strb	r3, [r7, #4]
	Global_USART_Config_s[1]->CallBack_FN (&IRQ);
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <USART2_IRQHandler+0x60>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	1d3a      	adds	r2, r7, #4
 8001e32:	4610      	mov	r0, r2
 8001e34:	4798      	blx	r3
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40004400 	.word	0x40004400
 8001e44:	20000220 	.word	0x20000220

08001e48 <main>:




int main(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08e      	sub	sp, #56	; 0x38
 8001e4c:	af00      	add	r7, sp, #0

	GPIOA_CLOCK_EN();
 8001e4e:	4b65      	ldr	r3, [pc, #404]	; (8001fe4 <main+0x19c>)
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	4a64      	ldr	r2, [pc, #400]	; (8001fe4 <main+0x19c>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	6193      	str	r3, [r2, #24]
	GPIOB_CLOCK_EN();
 8001e5a:	4b62      	ldr	r3, [pc, #392]	; (8001fe4 <main+0x19c>)
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	4a61      	ldr	r2, [pc, #388]	; (8001fe4 <main+0x19c>)
 8001e60:	f043 0308 	orr.w	r3, r3, #8
 8001e64:	6193      	str	r3, [r2, #24]
	AFIO_CLOCK_EN();
 8001e66:	4b5f      	ldr	r3, [pc, #380]	; (8001fe4 <main+0x19c>)
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	4a5e      	ldr	r2, [pc, #376]	; (8001fe4 <main+0x19c>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6193      	str	r3, [r2, #24]
	keypad_init();
 8001e72:	f7fe fe23 	bl	8000abc <keypad_init>

	Timer2_init();
 8001e76:	f7ff fcf3 	bl	8001860 <Timer2_init>
	Servo1_Entry_Gate_Init();
 8001e7a:	f7ff f981 	bl	8001180 <Servo1_Entry_Gate_Init>
	Servo2_Exit_Gate_Init();
 8001e7e:	f7ff f9c1 	bl	8001204 <Servo2_Exit_Gate_Init>
	 * PA10 RX
	 * PA11 CTC
	 * PA12 RTS
	 */
	USART_Config_t usartCFG;
	usartCFG.Async_EN = USART_Enable;
 8001e82:	2301      	movs	r3, #1
 8001e84:	773b      	strb	r3, [r7, #28]
	usartCFG.Async_Config_s.Baud_Rate = 115200;
 8001e86:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
	usartCFG.Async_Config_s.Word_Length = Eight_bits;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f887 3020 	strb.w	r3, [r7, #32]
	usartCFG.Async_Config_s.Parity.Parity_Enable = USART_Disable;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	usartCFG.Async_Config_s.Stop_Bits = Stop_1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	usartCFG.interrupts_CNFG.RX_Interrupt_Enable_Or_Disable = USART_Enable;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	usartCFG.CallBack_FN = RFID_CARD_Enter_CallBack;
 8001ea4:	4b50      	ldr	r3, [pc, #320]	; (8001fe8 <main+0x1a0>)
 8001ea6:	633b      	str	r3, [r7, #48]	; 0x30
	MCAL_USART_Init(USART1, &usartCFG);
 8001ea8:	f107 031c 	add.w	r3, r7, #28
 8001eac:	4619      	mov	r1, r3
 8001eae:	484f      	ldr	r0, [pc, #316]	; (8001fec <main+0x1a4>)
 8001eb0:	f7ff fd2a 	bl	8001908 <MCAL_USART_Init>
	MCAL_USART_GPIO_Pins_Config(USART1);
 8001eb4:	484d      	ldr	r0, [pc, #308]	; (8001fec <main+0x1a4>)
 8001eb6:	f7ff ff01 	bl	8001cbc <MCAL_USART_GPIO_Pins_Config>
	 * PA0 ->CTS
	 * PA1 ->RTS
	 */

	USART_Config_t usart2CFG;
	usart2CFG.Async_EN = USART_Enable;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	713b      	strb	r3, [r7, #4]
	usart2CFG.Async_Config_s.Baud_Rate = 115200;
 8001ebe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001ec2:	60fb      	str	r3, [r7, #12]
	usart2CFG.Async_Config_s.Word_Length = Eight_bits;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	723b      	strb	r3, [r7, #8]
	usart2CFG.Async_Config_s.Parity.Parity_Enable = USART_Disable;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	743b      	strb	r3, [r7, #16]
	usart2CFG.Async_Config_s.Stop_Bits = Stop_1;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	727b      	strb	r3, [r7, #9]
	usart2CFG.interrupts_CNFG.RX_Interrupt_Enable_Or_Disable = USART_Enable;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	757b      	strb	r3, [r7, #21]
	usart2CFG.CallBack_FN = RFID_CARD_EXIT_CallBack;
 8001ed4:	4b46      	ldr	r3, [pc, #280]	; (8001ff0 <main+0x1a8>)
 8001ed6:	61bb      	str	r3, [r7, #24]
	MCAL_USART_Init(USART2, &usart2CFG);
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	4619      	mov	r1, r3
 8001edc:	4845      	ldr	r0, [pc, #276]	; (8001ff4 <main+0x1ac>)
 8001ede:	f7ff fd13 	bl	8001908 <MCAL_USART_Init>
	MCAL_USART_GPIO_Pins_Config(USART2);
 8001ee2:	4844      	ldr	r0, [pc, #272]	; (8001ff4 <main+0x1ac>)
 8001ee4:	f7ff feea 	bl	8001cbc <MCAL_USART_GPIO_Pins_Config>


	LCD_Init();
 8001ee8:	f7fe ffbc 	bl	8000e64 <LCD_Init>
	LEDs_Init();
 8001eec:	f000 fa92 	bl	8002414 <LEDs_Init>
	PIRs_Iint();
 8001ef0:	f000 fac6 	bl	8002480 <PIRs_Iint>

	/*==========Enter IDs To Store In Array Pass==========*/
	Store_IDs_From_Admin();
 8001ef4:	f000 fae0 	bl	80024b8 <Store_IDs_From_Admin>

	/*Dash Bord LCD*/
	LCD_Welcome();
 8001ef8:	f000 fa46 	bl	8002388 <LCD_Welcome>
	dms(50);
 8001efc:	2032      	movs	r0, #50	; 0x32
 8001efe:	f7ff fceb 	bl	80018d8 <dms>
	LCD_Display_Empty_Slots();
 8001f02:	f000 fa63 	bl	80023cc <LCD_Display_Empty_Slots>


	int i=0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	637b      	str	r3, [r7, #52]	; 0x34
	while(1)
	{
		if(Available_Slots>'0')
 8001f0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ff8 <main+0x1b0>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b30      	cmp	r3, #48	; 0x30
 8001f10:	d91b      	bls.n	8001f4a <main+0x102>
		{
			LCD_Goto_XY(2, 0, 1);
 8001f12:	2201      	movs	r2, #1
 8001f14:	2100      	movs	r1, #0
 8001f16:	2002      	movs	r0, #2
 8001f18:	f7ff f8b7 	bl	800108a <LCD_Goto_XY>
			LCD_Send_A_String("Put your ID in", 1);
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	4837      	ldr	r0, [pc, #220]	; (8001ffc <main+0x1b4>)
 8001f20:	f7ff f8ea 	bl	80010f8 <LCD_Send_A_String>
			LCD_Goto_XY(3, 0, 1);
 8001f24:	2201      	movs	r2, #1
 8001f26:	2100      	movs	r1, #0
 8001f28:	2003      	movs	r0, #3
 8001f2a:	f7ff f8ae 	bl	800108a <LCD_Goto_XY>
			LCD_Send_A_String("Card Reader", 1);
 8001f2e:	2101      	movs	r1, #1
 8001f30:	4833      	ldr	r0, [pc, #204]	; (8002000 <main+0x1b8>)
 8001f32:	f7ff f8e1 	bl	80010f8 <LCD_Send_A_String>

			while(RFID_CARD_Enter == 0 && RFID_CARD_EXIT == 0);
 8001f36:	bf00      	nop
 8001f38:	4b32      	ldr	r3, [pc, #200]	; (8002004 <main+0x1bc>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d132      	bne.n	8001fa6 <main+0x15e>
 8001f40:	4b31      	ldr	r3, [pc, #196]	; (8002008 <main+0x1c0>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f7      	beq.n	8001f38 <main+0xf0>
 8001f48:	e02d      	b.n	8001fa6 <main+0x15e>

		}
		/*======Parking is full so not allow enetr cars=======*/
		else
		{
			dms(100);
 8001f4a:	2064      	movs	r0, #100	; 0x64
 8001f4c:	f7ff fcc4 	bl	80018d8 <dms>
			LCD_Send_Command(0x0c, 1);
 8001f50:	2101      	movs	r1, #1
 8001f52:	200c      	movs	r0, #12
 8001f54:	f7fe ff08 	bl	8000d68 <LCD_Send_Command>
			LCD_Send_Command(0x01, 1);
 8001f58:	2101      	movs	r1, #1
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f7fe ff04 	bl	8000d68 <LCD_Send_Command>
			LCD_Goto_XY(1, 0, 1);
 8001f60:	2201      	movs	r2, #1
 8001f62:	2100      	movs	r1, #0
 8001f64:	2001      	movs	r0, #1
 8001f66:	f7ff f890 	bl	800108a <LCD_Goto_XY>
			LCD_Send_A_String("Parking is Full", 1);
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	4827      	ldr	r0, [pc, #156]	; (800200c <main+0x1c4>)
 8001f6e:	f7ff f8c3 	bl	80010f8 <LCD_Send_A_String>
			LCD_Goto_XY(2, 0, 1);
 8001f72:	2201      	movs	r2, #1
 8001f74:	2100      	movs	r1, #0
 8001f76:	2002      	movs	r0, #2
 8001f78:	f7ff f887 	bl	800108a <LCD_Goto_XY>
			LCD_Send_A_String("Entry Not", 1);
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	4824      	ldr	r0, [pc, #144]	; (8002010 <main+0x1c8>)
 8001f80:	f7ff f8ba 	bl	80010f8 <LCD_Send_A_String>
			LCD_Goto_XY(3, 0, 1);
 8001f84:	2201      	movs	r2, #1
 8001f86:	2100      	movs	r1, #0
 8001f88:	2003      	movs	r0, #3
 8001f8a:	f7ff f87e 	bl	800108a <LCD_Goto_XY>
			LCD_Send_A_String("Allowed", 1);
 8001f8e:	2101      	movs	r1, #1
 8001f90:	4820      	ldr	r0, [pc, #128]	; (8002014 <main+0x1cc>)
 8001f92:	f7ff f8b1 	bl	80010f8 <LCD_Send_A_String>
			while(RFID_CARD_EXIT == 0);
 8001f96:	bf00      	nop
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <main+0x1c0>)
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0fb      	beq.n	8001f98 <main+0x150>
			RFID_CARD_Enter =0;
 8001fa0:	4b18      	ldr	r3, [pc, #96]	; (8002004 <main+0x1bc>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	801a      	strh	r2, [r3, #0]

		}

		//Search about ID in array of Pass
		for(i=0;i<3;i++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8001faa:	e058      	b.n	800205e <main+0x216>
		{
			if(RFID_CARD_Enter == pass_entery[i])
 8001fac:	4a1a      	ldr	r2, [pc, #104]	; (8002018 <main+0x1d0>)
 8001fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb0:	4413      	add	r3, r2
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	4b13      	ldr	r3, [pc, #76]	; (8002004 <main+0x1bc>)
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d132      	bne.n	8002024 <main+0x1dc>
			{
				Search_Done_Entery = 1;
 8001fbe:	4b17      	ldr	r3, [pc, #92]	; (800201c <main+0x1d4>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
				pass_exit[i] = pass_entery[i];
 8001fc4:	4a14      	ldr	r2, [pc, #80]	; (8002018 <main+0x1d0>)
 8001fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc8:	4413      	add	r3, r2
 8001fca:	7819      	ldrb	r1, [r3, #0]
 8001fcc:	4a14      	ldr	r2, [pc, #80]	; (8002020 <main+0x1d8>)
 8001fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd0:	4413      	add	r3, r2
 8001fd2:	460a      	mov	r2, r1
 8001fd4:	701a      	strb	r2, [r3, #0]
				pass_entery[i] = GARBAGE;
 8001fd6:	4a10      	ldr	r2, [pc, #64]	; (8002018 <main+0x1d0>)
 8001fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fda:	4413      	add	r3, r2
 8001fdc:	22ff      	movs	r2, #255	; 0xff
 8001fde:	701a      	strb	r2, [r3, #0]
 8001fe0:	e03a      	b.n	8002058 <main+0x210>
 8001fe2:	bf00      	nop
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	08002321 	.word	0x08002321
 8001fec:	40013800 	.word	0x40013800
 8001ff0:	08002355 	.word	0x08002355
 8001ff4:	40004400 	.word	0x40004400
 8001ff8:	2000002f 	.word	0x2000002f
 8001ffc:	080047cc 	.word	0x080047cc
 8002000:	080047dc 	.word	0x080047dc
 8002004:	2000027e 	.word	0x2000027e
 8002008:	20000280 	.word	0x20000280
 800200c:	080047e8 	.word	0x080047e8
 8002010:	080047f8 	.word	0x080047f8
 8002014:	08004804 	.word	0x08004804
 8002018:	20000028 	.word	0x20000028
 800201c:	20000228 	.word	0x20000228
 8002020:	2000002c 	.word	0x2000002c
			}
			else if(RFID_CARD_EXIT == pass_exit[i])
 8002024:	4aaf      	ldr	r2, [pc, #700]	; (80022e4 <main+0x49c>)
 8002026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002028:	4413      	add	r3, r2
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b29a      	uxth	r2, r3
 800202e:	4bae      	ldr	r3, [pc, #696]	; (80022e8 <main+0x4a0>)
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d110      	bne.n	8002058 <main+0x210>
			{
				Search_Done_Exit = 1;
 8002036:	4bad      	ldr	r3, [pc, #692]	; (80022ec <main+0x4a4>)
 8002038:	2201      	movs	r2, #1
 800203a:	701a      	strb	r2, [r3, #0]
				pass_entery[i] = pass_exit[i];
 800203c:	4aa9      	ldr	r2, [pc, #676]	; (80022e4 <main+0x49c>)
 800203e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002040:	4413      	add	r3, r2
 8002042:	7819      	ldrb	r1, [r3, #0]
 8002044:	4aaa      	ldr	r2, [pc, #680]	; (80022f0 <main+0x4a8>)
 8002046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002048:	4413      	add	r3, r2
 800204a:	460a      	mov	r2, r1
 800204c:	701a      	strb	r2, [r3, #0]
				pass_exit[i] = GARBAGE;
 800204e:	4aa5      	ldr	r2, [pc, #660]	; (80022e4 <main+0x49c>)
 8002050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002052:	4413      	add	r3, r2
 8002054:	22ff      	movs	r2, #255	; 0xff
 8002056:	701a      	strb	r2, [r3, #0]
		for(i=0;i<3;i++)
 8002058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800205a:	3301      	adds	r3, #1
 800205c:	637b      	str	r3, [r7, #52]	; 0x34
 800205e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002060:	2b02      	cmp	r3, #2
 8002062:	dda3      	ble.n	8001fac <main+0x164>

			}

		}
		/*=====================Enter gate=====================*/
		if((Search_Done_Entery == 1) && (RFID_CARD_Enter != 0) && (Available_Slots > '0'))
 8002064:	4ba3      	ldr	r3, [pc, #652]	; (80022f4 <main+0x4ac>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d14f      	bne.n	800210c <main+0x2c4>
 800206c:	4ba2      	ldr	r3, [pc, #648]	; (80022f8 <main+0x4b0>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d04b      	beq.n	800210c <main+0x2c4>
 8002074:	4ba1      	ldr	r3, [pc, #644]	; (80022fc <main+0x4b4>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b30      	cmp	r3, #48	; 0x30
 800207a:	d947      	bls.n	800210c <main+0x2c4>
		{
			LCD_Send_Command(0x0c, 1);
 800207c:	2101      	movs	r1, #1
 800207e:	200c      	movs	r0, #12
 8002080:	f7fe fe72 	bl	8000d68 <LCD_Send_Command>
			LCD_Send_Command(0x01, 1);
 8002084:	2101      	movs	r1, #1
 8002086:	2001      	movs	r0, #1
 8002088:	f7fe fe6e 	bl	8000d68 <LCD_Send_Command>
			LCD_Goto_XY(1, 0, 1);
 800208c:	2201      	movs	r2, #1
 800208e:	2100      	movs	r1, #0
 8002090:	2001      	movs	r0, #1
 8002092:	f7fe fffa 	bl	800108a <LCD_Goto_XY>
			LCD_Send_A_String("ID is Right", 1);
 8002096:	2101      	movs	r1, #1
 8002098:	4899      	ldr	r0, [pc, #612]	; (8002300 <main+0x4b8>)
 800209a:	f7ff f82d 	bl	80010f8 <LCD_Send_A_String>
			LCD_Goto_XY(2, 0, 1);
 800209e:	2201      	movs	r2, #1
 80020a0:	2100      	movs	r1, #0
 80020a2:	2002      	movs	r0, #2
 80020a4:	f7fe fff1 	bl	800108a <LCD_Goto_XY>
			LCD_Send_A_String("Entry gate opens", 1);
 80020a8:	2101      	movs	r1, #1
 80020aa:	4896      	ldr	r0, [pc, #600]	; (8002304 <main+0x4bc>)
 80020ac:	f7ff f824 	bl	80010f8 <LCD_Send_A_String>
			MCAL_GPIO_WritePin(GPIOA, 11, 0);
 80020b0:	2200      	movs	r2, #0
 80020b2:	210b      	movs	r1, #11
 80020b4:	4894      	ldr	r0, [pc, #592]	; (8002308 <main+0x4c0>)
 80020b6:	f7ff facc 	bl	8001652 <MCAL_GPIO_WritePin>
			Servo1_Entry_Gate(UP);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f7ff f874 	bl	80011a8 <Servo1_Entry_Gate>
			Available_Slots--;
 80020c0:	4b8e      	ldr	r3, [pc, #568]	; (80022fc <main+0x4b4>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	4b8c      	ldr	r3, [pc, #560]	; (80022fc <main+0x4b4>)
 80020ca:	701a      	strb	r2, [r3, #0]
			RFID_CARD_Enter = 0;
 80020cc:	4b8a      	ldr	r3, [pc, #552]	; (80022f8 <main+0x4b0>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	801a      	strh	r2, [r3, #0]
			Search_Done_Entery =0;
 80020d2:	4b88      	ldr	r3, [pc, #544]	; (80022f4 <main+0x4ac>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
			dms(250);
 80020d8:	20fa      	movs	r0, #250	; 0xfa
 80020da:	f7ff fbfd 	bl	80018d8 <dms>
			while(MCAL_GPIO_ReadPin(GPIOA, 7) == 1)
 80020de:	bf00      	nop
 80020e0:	2107      	movs	r1, #7
 80020e2:	4889      	ldr	r0, [pc, #548]	; (8002308 <main+0x4c0>)
 80020e4:	f7ff fad3 	bl	800168e <MCAL_GPIO_ReadPin>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d0f8      	beq.n	80020e0 <main+0x298>
			{
			}
			MCAL_GPIO_WritePin(GPIOA, 11, 1);
 80020ee:	2201      	movs	r2, #1
 80020f0:	210b      	movs	r1, #11
 80020f2:	4885      	ldr	r0, [pc, #532]	; (8002308 <main+0x4c0>)
 80020f4:	f7ff faad 	bl	8001652 <MCAL_GPIO_WritePin>
			Servo1_Entry_Gate(Down);
 80020f8:	2002      	movs	r0, #2
 80020fa:	f7ff f855 	bl	80011a8 <Servo1_Entry_Gate>
			LCD_Welcome();
 80020fe:	f000 f943 	bl	8002388 <LCD_Welcome>
			dms(250);
 8002102:	20fa      	movs	r0, #250	; 0xfa
 8002104:	f7ff fbe8 	bl	80018d8 <dms>
			LCD_Display_Empty_Slots();
 8002108:	f000 f960 	bl	80023cc <LCD_Display_Empty_Slots>
		}


		/*===================Exit gate====================*/

		if( (Search_Done_Exit == 1) && (RFID_CARD_EXIT != 0) && (Available_Slots < '3'))
 800210c:	4b77      	ldr	r3, [pc, #476]	; (80022ec <main+0x4a4>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d150      	bne.n	80021b6 <main+0x36e>
 8002114:	4b74      	ldr	r3, [pc, #464]	; (80022e8 <main+0x4a0>)
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d04c      	beq.n	80021b6 <main+0x36e>
 800211c:	4b77      	ldr	r3, [pc, #476]	; (80022fc <main+0x4b4>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b32      	cmp	r3, #50	; 0x32
 8002122:	d848      	bhi.n	80021b6 <main+0x36e>
		{
			LCD_Send_Command(0x0c, 1);
 8002124:	2101      	movs	r1, #1
 8002126:	200c      	movs	r0, #12
 8002128:	f7fe fe1e 	bl	8000d68 <LCD_Send_Command>
			LCD_Send_Command(0x01, 1);
 800212c:	2101      	movs	r1, #1
 800212e:	2001      	movs	r0, #1
 8002130:	f7fe fe1a 	bl	8000d68 <LCD_Send_Command>
			LCD_Goto_XY(1, 0, 1);
 8002134:	2201      	movs	r2, #1
 8002136:	2100      	movs	r1, #0
 8002138:	2001      	movs	r0, #1
 800213a:	f7fe ffa6 	bl	800108a <LCD_Goto_XY>
			LCD_Send_A_String("ID is Right", 1);
 800213e:	2101      	movs	r1, #1
 8002140:	486f      	ldr	r0, [pc, #444]	; (8002300 <main+0x4b8>)
 8002142:	f7fe ffd9 	bl	80010f8 <LCD_Send_A_String>
			LCD_Goto_XY(2, 0, 1);
 8002146:	2201      	movs	r2, #1
 8002148:	2100      	movs	r1, #0
 800214a:	2002      	movs	r0, #2
 800214c:	f7fe ff9d 	bl	800108a <LCD_Goto_XY>
			LCD_Send_A_String("Exit gate opens", 1);
 8002150:	2101      	movs	r1, #1
 8002152:	486e      	ldr	r0, [pc, #440]	; (800230c <main+0x4c4>)
 8002154:	f7fe ffd0 	bl	80010f8 <LCD_Send_A_String>
			MCAL_GPIO_WritePin(GPIOA, 11, 0);
 8002158:	2200      	movs	r2, #0
 800215a:	210b      	movs	r1, #11
 800215c:	486a      	ldr	r0, [pc, #424]	; (8002308 <main+0x4c0>)
 800215e:	f7ff fa78 	bl	8001652 <MCAL_GPIO_WritePin>
			Servo2_Exit_Gate(UP);
 8002162:	2001      	movs	r0, #1
 8002164:	f7ff f862 	bl	800122c <Servo2_Exit_Gate>
			Available_Slots++;
 8002168:	4b64      	ldr	r3, [pc, #400]	; (80022fc <main+0x4b4>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	3301      	adds	r3, #1
 800216e:	b2da      	uxtb	r2, r3
 8002170:	4b62      	ldr	r3, [pc, #392]	; (80022fc <main+0x4b4>)
 8002172:	701a      	strb	r2, [r3, #0]
			RFID_CARD_EXIT = 0;
 8002174:	4b5c      	ldr	r3, [pc, #368]	; (80022e8 <main+0x4a0>)
 8002176:	2200      	movs	r2, #0
 8002178:	801a      	strh	r2, [r3, #0]
			Search_Done_Exit =0;
 800217a:	4b5c      	ldr	r3, [pc, #368]	; (80022ec <main+0x4a4>)
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
			dms(250);
 8002180:	20fa      	movs	r0, #250	; 0xfa
 8002182:	f7ff fba9 	bl	80018d8 <dms>
			while(MCAL_GPIO_ReadPin(GPIOA, 1) == 1)
 8002186:	bf00      	nop
 8002188:	2101      	movs	r1, #1
 800218a:	485f      	ldr	r0, [pc, #380]	; (8002308 <main+0x4c0>)
 800218c:	f7ff fa7f 	bl	800168e <MCAL_GPIO_ReadPin>
 8002190:	4603      	mov	r3, r0
 8002192:	2b01      	cmp	r3, #1
 8002194:	d0f8      	beq.n	8002188 <main+0x340>
			{
			}
			MCAL_GPIO_WritePin(GPIOA, 11, 1);
 8002196:	2201      	movs	r2, #1
 8002198:	210b      	movs	r1, #11
 800219a:	485b      	ldr	r0, [pc, #364]	; (8002308 <main+0x4c0>)
 800219c:	f7ff fa59 	bl	8001652 <MCAL_GPIO_WritePin>
			Servo2_Exit_Gate(Down);
 80021a0:	2002      	movs	r0, #2
 80021a2:	f7ff f843 	bl	800122c <Servo2_Exit_Gate>
			LCD_Welcome();
 80021a6:	f000 f8ef 	bl	8002388 <LCD_Welcome>
			dms(250);
 80021aa:	20fa      	movs	r0, #250	; 0xfa
 80021ac:	f7ff fb94 	bl	80018d8 <dms>
			LCD_Display_Empty_Slots();
 80021b0:	f000 f90c 	bl	80023cc <LCD_Display_Empty_Slots>
 80021b4:	e047      	b.n	8002246 <main+0x3fe>
		}
		else if(Search_Done_Exit == 1 && RFID_CARD_EXIT != 0 && Available_Slots == '3') {
 80021b6:	4b4d      	ldr	r3, [pc, #308]	; (80022ec <main+0x4a4>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d143      	bne.n	8002246 <main+0x3fe>
 80021be:	4b4a      	ldr	r3, [pc, #296]	; (80022e8 <main+0x4a0>)
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d03f      	beq.n	8002246 <main+0x3fe>
 80021c6:	4b4d      	ldr	r3, [pc, #308]	; (80022fc <main+0x4b4>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b33      	cmp	r3, #51	; 0x33
 80021cc:	d13b      	bne.n	8002246 <main+0x3fe>
			LCD_Send_Command(0x0c, 1);
 80021ce:	2101      	movs	r1, #1
 80021d0:	200c      	movs	r0, #12
 80021d2:	f7fe fdc9 	bl	8000d68 <LCD_Send_Command>
			LCD_Send_Command(0x01, 1);
 80021d6:	2101      	movs	r1, #1
 80021d8:	2001      	movs	r0, #1
 80021da:	f7fe fdc5 	bl	8000d68 <LCD_Send_Command>
			LCD_Goto_XY(1, 0, 1);
 80021de:	2201      	movs	r2, #1
 80021e0:	2100      	movs	r1, #0
 80021e2:	2001      	movs	r0, #1
 80021e4:	f7fe ff51 	bl	800108a <LCD_Goto_XY>
			LCD_Send_A_String("Parking is ", 1);
 80021e8:	2101      	movs	r1, #1
 80021ea:	4849      	ldr	r0, [pc, #292]	; (8002310 <main+0x4c8>)
 80021ec:	f7fe ff84 	bl	80010f8 <LCD_Send_A_String>
			LCD_Goto_XY(2, 0, 1);
 80021f0:	2201      	movs	r2, #1
 80021f2:	2100      	movs	r1, #0
 80021f4:	2002      	movs	r0, #2
 80021f6:	f7fe ff48 	bl	800108a <LCD_Goto_XY>
			LCD_Send_A_String("Empty", 1);
 80021fa:	2101      	movs	r1, #1
 80021fc:	4845      	ldr	r0, [pc, #276]	; (8002314 <main+0x4cc>)
 80021fe:	f7fe ff7b 	bl	80010f8 <LCD_Send_A_String>
			for(i = 0; i<3; i++)
 8002202:	2300      	movs	r3, #0
 8002204:	637b      	str	r3, [r7, #52]	; 0x34
 8002206:	e009      	b.n	800221c <main+0x3d4>
			{
				MCAL_GPIO_TogglePin(GPIOA, 0);
 8002208:	2100      	movs	r1, #0
 800220a:	483f      	ldr	r0, [pc, #252]	; (8002308 <main+0x4c0>)
 800220c:	f7ff fa55 	bl	80016ba <MCAL_GPIO_TogglePin>
				dms(50);
 8002210:	2032      	movs	r0, #50	; 0x32
 8002212:	f7ff fb61 	bl	80018d8 <dms>
			for(i = 0; i<3; i++)
 8002216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002218:	3301      	adds	r3, #1
 800221a:	637b      	str	r3, [r7, #52]	; 0x34
 800221c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221e:	2b02      	cmp	r3, #2
 8002220:	ddf2      	ble.n	8002208 <main+0x3c0>
			}
			MCAL_GPIO_WritePin(GPIOA, 0, 1);
 8002222:	2201      	movs	r2, #1
 8002224:	2100      	movs	r1, #0
 8002226:	4838      	ldr	r0, [pc, #224]	; (8002308 <main+0x4c0>)
 8002228:	f7ff fa13 	bl	8001652 <MCAL_GPIO_WritePin>
			LCD_Welcome();
 800222c:	f000 f8ac 	bl	8002388 <LCD_Welcome>
			dms(50);
 8002230:	2032      	movs	r0, #50	; 0x32
 8002232:	f7ff fb51 	bl	80018d8 <dms>
			LCD_Display_Empty_Slots();
 8002236:	f000 f8c9 	bl	80023cc <LCD_Display_Empty_Slots>
			RFID_CARD_EXIT = 0;
 800223a:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <main+0x4a0>)
 800223c:	2200      	movs	r2, #0
 800223e:	801a      	strh	r2, [r3, #0]
			Search_Done_Exit =0;
 8002240:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <main+0x4a4>)
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]

		}

		/*==================Wrong Id====================*/

		if(( Search_Done_Entery == 0 ||Search_Done_Exit == 0  ) && (RFID_CARD_Enter > 0 || RFID_CARD_EXIT > 0))
 8002246:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <main+0x4ac>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d004      	beq.n	8002258 <main+0x410>
 800224e:	4b27      	ldr	r3, [pc, #156]	; (80022ec <main+0x4a4>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	f47f ae59 	bne.w	8001f0a <main+0xc2>
 8002258:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <main+0x4b0>)
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d104      	bne.n	800226a <main+0x422>
 8002260:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <main+0x4a0>)
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	f43f ae50 	beq.w	8001f0a <main+0xc2>
		{
			LCD_Send_Command(0x0c, 1);
 800226a:	2101      	movs	r1, #1
 800226c:	200c      	movs	r0, #12
 800226e:	f7fe fd7b 	bl	8000d68 <LCD_Send_Command>
			LCD_Send_Command(0x01, 1);
 8002272:	2101      	movs	r1, #1
 8002274:	2001      	movs	r0, #1
 8002276:	f7fe fd77 	bl	8000d68 <LCD_Send_Command>
			LCD_Goto_XY(1, 0, 1);
 800227a:	2201      	movs	r2, #1
 800227c:	2100      	movs	r1, #0
 800227e:	2001      	movs	r0, #1
 8002280:	f7fe ff03 	bl	800108a <LCD_Goto_XY>
			LCD_Send_A_String("Wrong ID", 1);
 8002284:	2101      	movs	r1, #1
 8002286:	4824      	ldr	r0, [pc, #144]	; (8002318 <main+0x4d0>)
 8002288:	f7fe ff36 	bl	80010f8 <LCD_Send_A_String>
			LCD_Goto_XY(2, 0, 1);
 800228c:	2201      	movs	r2, #1
 800228e:	2100      	movs	r1, #0
 8002290:	2002      	movs	r0, #2
 8002292:	f7fe fefa 	bl	800108a <LCD_Goto_XY>
			LCD_Send_A_String("Try Again", 1);
 8002296:	2101      	movs	r1, #1
 8002298:	4820      	ldr	r0, [pc, #128]	; (800231c <main+0x4d4>)
 800229a:	f7fe ff2d 	bl	80010f8 <LCD_Send_A_String>
			for(i = 0; i<3; i++)
 800229e:	2300      	movs	r3, #0
 80022a0:	637b      	str	r3, [r7, #52]	; 0x34
 80022a2:	e009      	b.n	80022b8 <main+0x470>
			{
				MCAL_GPIO_TogglePin(GPIOA, 0);
 80022a4:	2100      	movs	r1, #0
 80022a6:	4818      	ldr	r0, [pc, #96]	; (8002308 <main+0x4c0>)
 80022a8:	f7ff fa07 	bl	80016ba <MCAL_GPIO_TogglePin>
				dms(50);
 80022ac:	2032      	movs	r0, #50	; 0x32
 80022ae:	f7ff fb13 	bl	80018d8 <dms>
			for(i = 0; i<3; i++)
 80022b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b4:	3301      	adds	r3, #1
 80022b6:	637b      	str	r3, [r7, #52]	; 0x34
 80022b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	ddf2      	ble.n	80022a4 <main+0x45c>
			}
			MCAL_GPIO_WritePin(GPIOA, 0, 1);
 80022be:	2201      	movs	r2, #1
 80022c0:	2100      	movs	r1, #0
 80022c2:	4811      	ldr	r0, [pc, #68]	; (8002308 <main+0x4c0>)
 80022c4:	f7ff f9c5 	bl	8001652 <MCAL_GPIO_WritePin>
			LCD_Welcome();
 80022c8:	f000 f85e 	bl	8002388 <LCD_Welcome>
			dms(50);
 80022cc:	2032      	movs	r0, #50	; 0x32
 80022ce:	f7ff fb03 	bl	80018d8 <dms>
			LCD_Display_Empty_Slots();
 80022d2:	f000 f87b 	bl	80023cc <LCD_Display_Empty_Slots>
			RFID_CARD_EXIT = 0;
 80022d6:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <main+0x4a0>)
 80022d8:	2200      	movs	r2, #0
 80022da:	801a      	strh	r2, [r3, #0]
			RFID_CARD_Enter = 0 ;
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <main+0x4b0>)
 80022de:	2200      	movs	r2, #0
 80022e0:	801a      	strh	r2, [r3, #0]
		if(Available_Slots>'0')
 80022e2:	e612      	b.n	8001f0a <main+0xc2>
 80022e4:	2000002c 	.word	0x2000002c
 80022e8:	20000280 	.word	0x20000280
 80022ec:	20000229 	.word	0x20000229
 80022f0:	20000028 	.word	0x20000028
 80022f4:	20000228 	.word	0x20000228
 80022f8:	2000027e 	.word	0x2000027e
 80022fc:	2000002f 	.word	0x2000002f
 8002300:	0800480c 	.word	0x0800480c
 8002304:	08004818 	.word	0x08004818
 8002308:	40010800 	.word	0x40010800
 800230c:	0800482c 	.word	0x0800482c
 8002310:	0800483c 	.word	0x0800483c
 8002314:	08004848 	.word	0x08004848
 8002318:	08004850 	.word	0x08004850
 800231c:	0800485c 	.word	0x0800485c

08002320 <RFID_CARD_Enter_CallBack>:
}


/*Call Back For UART*/
void RFID_CARD_Enter_CallBack(interrupts_Bits * IRQ)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
	MCAL_USART_ReceiveChar(USART1, &buff);
 8002328:	4907      	ldr	r1, [pc, #28]	; (8002348 <RFID_CARD_Enter_CallBack+0x28>)
 800232a:	4808      	ldr	r0, [pc, #32]	; (800234c <RFID_CARD_Enter_CallBack+0x2c>)
 800232c:	f7ff fc60 	bl	8001bf0 <MCAL_USART_ReceiveChar>
	RFID_CARD_Enter = buff;
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <RFID_CARD_Enter_CallBack+0x28>)
 8002332:	881a      	ldrh	r2, [r3, #0]
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <RFID_CARD_Enter_CallBack+0x30>)
 8002336:	801a      	strh	r2, [r3, #0]
	MCAL_USART_SendChar(USART1, &buff);
 8002338:	4903      	ldr	r1, [pc, #12]	; (8002348 <RFID_CARD_Enter_CallBack+0x28>)
 800233a:	4804      	ldr	r0, [pc, #16]	; (800234c <RFID_CARD_Enter_CallBack+0x2c>)
 800233c:	f7ff fc12 	bl	8001b64 <MCAL_USART_SendChar>
}
 8002340:	bf00      	nop
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	2000027c 	.word	0x2000027c
 800234c:	40013800 	.word	0x40013800
 8002350:	2000027e 	.word	0x2000027e

08002354 <RFID_CARD_EXIT_CallBack>:

void RFID_CARD_EXIT_CallBack(interrupts_Bits * IRQ)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	MCAL_USART_ReceiveChar(USART2, &buff);
 800235c:	4907      	ldr	r1, [pc, #28]	; (800237c <RFID_CARD_EXIT_CallBack+0x28>)
 800235e:	4808      	ldr	r0, [pc, #32]	; (8002380 <RFID_CARD_EXIT_CallBack+0x2c>)
 8002360:	f7ff fc46 	bl	8001bf0 <MCAL_USART_ReceiveChar>
	RFID_CARD_EXIT = buff;
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <RFID_CARD_EXIT_CallBack+0x28>)
 8002366:	881a      	ldrh	r2, [r3, #0]
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <RFID_CARD_EXIT_CallBack+0x30>)
 800236a:	801a      	strh	r2, [r3, #0]
	MCAL_USART_SendChar(USART2, &buff);
 800236c:	4903      	ldr	r1, [pc, #12]	; (800237c <RFID_CARD_EXIT_CallBack+0x28>)
 800236e:	4804      	ldr	r0, [pc, #16]	; (8002380 <RFID_CARD_EXIT_CallBack+0x2c>)
 8002370:	f7ff fbf8 	bl	8001b64 <MCAL_USART_SendChar>
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	2000027c 	.word	0x2000027c
 8002380:	40004400 	.word	0x40004400
 8002384:	20000280 	.word	0x20000280

08002388 <LCD_Welcome>:



void LCD_Welcome(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
	/*Dash Bord LCD*/

	LCD_Send_Command(0x0c, 1);
 800238c:	2101      	movs	r1, #1
 800238e:	200c      	movs	r0, #12
 8002390:	f7fe fcea 	bl	8000d68 <LCD_Send_Command>
	LCD_Send_Command(0x01, 1);
 8002394:	2101      	movs	r1, #1
 8002396:	2001      	movs	r0, #1
 8002398:	f7fe fce6 	bl	8000d68 <LCD_Send_Command>
	LCD_Goto_XY(1, 0, 1);
 800239c:	2201      	movs	r2, #1
 800239e:	2100      	movs	r1, #0
 80023a0:	2001      	movs	r0, #1
 80023a2:	f7fe fe72 	bl	800108a <LCD_Goto_XY>
	LCD_Send_A_String("Welcome in", 1);
 80023a6:	2101      	movs	r1, #1
 80023a8:	4806      	ldr	r0, [pc, #24]	; (80023c4 <LCD_Welcome+0x3c>)
 80023aa:	f7fe fea5 	bl	80010f8 <LCD_Send_A_String>
	LCD_Goto_XY(2, 0, 1);
 80023ae:	2201      	movs	r2, #1
 80023b0:	2100      	movs	r1, #0
 80023b2:	2002      	movs	r0, #2
 80023b4:	f7fe fe69 	bl	800108a <LCD_Goto_XY>
	LCD_Send_A_String("TERA Parking", 1);
 80023b8:	2101      	movs	r1, #1
 80023ba:	4803      	ldr	r0, [pc, #12]	; (80023c8 <LCD_Welcome+0x40>)
 80023bc:	f7fe fe9c 	bl	80010f8 <LCD_Send_A_String>

}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	08004868 	.word	0x08004868
 80023c8:	08004874 	.word	0x08004874

080023cc <LCD_Display_Empty_Slots>:

void LCD_Display_Empty_Slots(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
	LCD_Send_Command(0x0c, 1);
 80023d0:	2101      	movs	r1, #1
 80023d2:	200c      	movs	r0, #12
 80023d4:	f7fe fcc8 	bl	8000d68 <LCD_Send_Command>
	LCD_Send_Command(0x01, 1);
 80023d8:	2101      	movs	r1, #1
 80023da:	2001      	movs	r0, #1
 80023dc:	f7fe fcc4 	bl	8000d68 <LCD_Send_Command>
	LCD_Goto_XY(1, 0, 1);
 80023e0:	2201      	movs	r2, #1
 80023e2:	2100      	movs	r1, #0
 80023e4:	2001      	movs	r0, #1
 80023e6:	f7fe fe50 	bl	800108a <LCD_Goto_XY>
	LCD_Send_A_String("Empty Slots=", 1);
 80023ea:	2101      	movs	r1, #1
 80023ec:	4807      	ldr	r0, [pc, #28]	; (800240c <LCD_Display_Empty_Slots+0x40>)
 80023ee:	f7fe fe83 	bl	80010f8 <LCD_Send_A_String>
	LCD_Goto_XY(1, 13, 1);
 80023f2:	2201      	movs	r2, #1
 80023f4:	210d      	movs	r1, #13
 80023f6:	2001      	movs	r0, #1
 80023f8:	f7fe fe47 	bl	800108a <LCD_Goto_XY>
	LCD_Send_A_Character(Available_Slots, 1);
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <LCD_Display_Empty_Slots+0x44>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2101      	movs	r1, #1
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fdb4 	bl	8000f70 <LCD_Send_A_Character>
}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}
 800240c:	08004884 	.word	0x08004884
 8002410:	2000002f 	.word	0x2000002f

08002414 <LEDs_Init>:

void LEDs_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
	//RED LED A0

	Pin_Config_t pinCFG;

	pinCFG.Pin_Num = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	607b      	str	r3, [r7, #4]
	pinCFG.mode = Output_Open_drain;
 800241e:	2305      	movs	r3, #5
 8002420:	60bb      	str	r3, [r7, #8]
	pinCFG.Speed_Output = speed_10;
 8002422:	2301      	movs	r3, #1
 8002424:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOA, &pinCFG);
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	4619      	mov	r1, r3
 800242a:	4814      	ldr	r0, [pc, #80]	; (800247c <LEDs_Init+0x68>)
 800242c:	f7ff f892 	bl	8001554 <MCAL_GPIO_Init>

	//GREEN LED A11
	pinCFG.Pin_Num = 11;
 8002430:	230b      	movs	r3, #11
 8002432:	607b      	str	r3, [r7, #4]
	pinCFG.mode = Output_Open_drain;
 8002434:	2305      	movs	r3, #5
 8002436:	60bb      	str	r3, [r7, #8]
	pinCFG.Speed_Output = speed_10;
 8002438:	2301      	movs	r3, #1
 800243a:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_Init(GPIOA, &pinCFG);
 800243c:	1d3b      	adds	r3, r7, #4
 800243e:	4619      	mov	r1, r3
 8002440:	480e      	ldr	r0, [pc, #56]	; (800247c <LEDs_Init+0x68>)
 8002442:	f7ff f887 	bl	8001554 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(GPIOA, 0, 0); //make A0 ground
 8002446:	2200      	movs	r2, #0
 8002448:	2100      	movs	r1, #0
 800244a:	480c      	ldr	r0, [pc, #48]	; (800247c <LEDs_Init+0x68>)
 800244c:	f7ff f901 	bl	8001652 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, 11, 0); //make A11 ground
 8002450:	2200      	movs	r2, #0
 8002452:	210b      	movs	r1, #11
 8002454:	4809      	ldr	r0, [pc, #36]	; (800247c <LEDs_Init+0x68>)
 8002456:	f7ff f8fc 	bl	8001652 <MCAL_GPIO_WritePin>
	dms(100);
 800245a:	2064      	movs	r0, #100	; 0x64
 800245c:	f7ff fa3c 	bl	80018d8 <dms>
	MCAL_GPIO_WritePin(GPIOA, 0, 1); //make A0 ground
 8002460:	2201      	movs	r2, #1
 8002462:	2100      	movs	r1, #0
 8002464:	4805      	ldr	r0, [pc, #20]	; (800247c <LEDs_Init+0x68>)
 8002466:	f7ff f8f4 	bl	8001652 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, 11, 1); //make A11 ground
 800246a:	2201      	movs	r2, #1
 800246c:	210b      	movs	r1, #11
 800246e:	4803      	ldr	r0, [pc, #12]	; (800247c <LEDs_Init+0x68>)
 8002470:	f7ff f8ef 	bl	8001652 <MCAL_GPIO_WritePin>
}
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40010800 	.word	0x40010800

08002480 <PIRs_Iint>:

void PIRs_Iint(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
	//PIR1 A7
	Pin_Config_t PinCinfg;
	PinCinfg.Pin_Num=7;
 8002486:	2307      	movs	r3, #7
 8002488:	607b      	str	r3, [r7, #4]
	PinCinfg.mode = Input_PullUp;
 800248a:	2302      	movs	r3, #2
 800248c:	60bb      	str	r3, [r7, #8]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	4619      	mov	r1, r3
 8002492:	4808      	ldr	r0, [pc, #32]	; (80024b4 <PIRs_Iint+0x34>)
 8002494:	f7ff f85e 	bl	8001554 <MCAL_GPIO_Init>

	//PIR2 A1
	PinCinfg.Pin_Num=1;
 8002498:	2301      	movs	r3, #1
 800249a:	607b      	str	r3, [r7, #4]
	PinCinfg.mode = Input_PullUp;
 800249c:	2302      	movs	r3, #2
 800249e:	60bb      	str	r3, [r7, #8]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 80024a0:	1d3b      	adds	r3, r7, #4
 80024a2:	4619      	mov	r1, r3
 80024a4:	4803      	ldr	r0, [pc, #12]	; (80024b4 <PIRs_Iint+0x34>)
 80024a6:	f7ff f855 	bl	8001554 <MCAL_GPIO_Init>

	//	MCAL_GPIO_WritePin(GPIOA, 0, 1); //make A0 ground
	//	MCAL_GPIO_WritePin(GPIOA, 11, 1); //make A11 ground

}
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40010800 	.word	0x40010800

080024b8 <Store_IDs_From_Admin>:

void Store_IDs_From_Admin(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
	LCD_Send_Command(0x01, 0);
 80024be:	2100      	movs	r1, #0
 80024c0:	2001      	movs	r0, #1
 80024c2:	f7fe fc51 	bl	8000d68 <LCD_Send_Command>
	LCD_Goto_XY(1, 0, 0);
 80024c6:	2200      	movs	r2, #0
 80024c8:	2100      	movs	r1, #0
 80024ca:	2001      	movs	r0, #1
 80024cc:	f7fe fddd 	bl	800108a <LCD_Goto_XY>
	LCD_Send_A_String("Enter IDs", 0);
 80024d0:	2100      	movs	r1, #0
 80024d2:	483a      	ldr	r0, [pc, #232]	; (80025bc <Store_IDs_From_Admin+0x104>)
 80024d4:	f7fe fe10 	bl	80010f8 <LCD_Send_A_String>
	uint8_t keypad_val,i;
	for(i = 0; i<3; i++ )
 80024d8:	2300      	movs	r3, #0
 80024da:	71bb      	strb	r3, [r7, #6]
 80024dc:	e03a      	b.n	8002554 <Store_IDs_From_Admin+0x9c>
	{
		if(i == 0)
 80024de:	79bb      	ldrb	r3, [r7, #6]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d109      	bne.n	80024f8 <Store_IDs_From_Admin+0x40>
		{
			LCD_Goto_XY(2, 0, 0);
 80024e4:	2200      	movs	r2, #0
 80024e6:	2100      	movs	r1, #0
 80024e8:	2002      	movs	r0, #2
 80024ea:	f7fe fdce 	bl	800108a <LCD_Goto_XY>
			LCD_Send_A_String("First ID:", 0);
 80024ee:	2100      	movs	r1, #0
 80024f0:	4833      	ldr	r0, [pc, #204]	; (80025c0 <Store_IDs_From_Admin+0x108>)
 80024f2:	f7fe fe01 	bl	80010f8 <LCD_Send_A_String>
 80024f6:	e015      	b.n	8002524 <Store_IDs_From_Admin+0x6c>

		}
		else if(i == 1)
 80024f8:	79bb      	ldrb	r3, [r7, #6]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d109      	bne.n	8002512 <Store_IDs_From_Admin+0x5a>
		{
			LCD_Goto_XY(3, 0, 0);
 80024fe:	2200      	movs	r2, #0
 8002500:	2100      	movs	r1, #0
 8002502:	2003      	movs	r0, #3
 8002504:	f7fe fdc1 	bl	800108a <LCD_Goto_XY>
			LCD_Send_A_String("Second ID:", 0);
 8002508:	2100      	movs	r1, #0
 800250a:	482e      	ldr	r0, [pc, #184]	; (80025c4 <Store_IDs_From_Admin+0x10c>)
 800250c:	f7fe fdf4 	bl	80010f8 <LCD_Send_A_String>
 8002510:	e008      	b.n	8002524 <Store_IDs_From_Admin+0x6c>
		}
		else {
			LCD_Goto_XY(4, 0, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	2100      	movs	r1, #0
 8002516:	2004      	movs	r0, #4
 8002518:	f7fe fdb7 	bl	800108a <LCD_Goto_XY>
			LCD_Send_A_String("Third ID:", 0);
 800251c:	2100      	movs	r1, #0
 800251e:	482a      	ldr	r0, [pc, #168]	; (80025c8 <Store_IDs_From_Admin+0x110>)
 8002520:	f7fe fdea 	bl	80010f8 <LCD_Send_A_String>
		}
		keypad_val = keypad_GETKEY();
 8002524:	f7fe fb30 	bl	8000b88 <keypad_GETKEY>
 8002528:	4603      	mov	r3, r0
 800252a:	71fb      	strb	r3, [r7, #7]
		//Wait for Admin to enter each number in Keypad
		while(keypad_val == 'A')
 800252c:	e003      	b.n	8002536 <Store_IDs_From_Admin+0x7e>
		{
			keypad_val = keypad_GETKEY();
 800252e:	f7fe fb2b 	bl	8000b88 <keypad_GETKEY>
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
		while(keypad_val == 'A')
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	2b41      	cmp	r3, #65	; 0x41
 800253a:	d0f8      	beq.n	800252e <Store_IDs_From_Admin+0x76>
		}
		pass_entery[i] = keypad_val;
 800253c:	79bb      	ldrb	r3, [r7, #6]
 800253e:	4923      	ldr	r1, [pc, #140]	; (80025cc <Store_IDs_From_Admin+0x114>)
 8002540:	79fa      	ldrb	r2, [r7, #7]
 8002542:	54ca      	strb	r2, [r1, r3]
		LCD_Send_A_Character(keypad_val, 0);
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe fd11 	bl	8000f70 <LCD_Send_A_Character>
	for(i = 0; i<3; i++ )
 800254e:	79bb      	ldrb	r3, [r7, #6]
 8002550:	3301      	adds	r3, #1
 8002552:	71bb      	strb	r3, [r7, #6]
 8002554:	79bb      	ldrb	r3, [r7, #6]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d9c1      	bls.n	80024de <Store_IDs_From_Admin+0x26>

	}
	LCD_Send_Command(0x01, 0);
 800255a:	2100      	movs	r1, #0
 800255c:	2001      	movs	r0, #1
 800255e:	f7fe fc03 	bl	8000d68 <LCD_Send_Command>
	LCD_Send_A_String("IDs Are Saved ", 0);
 8002562:	2100      	movs	r1, #0
 8002564:	481a      	ldr	r0, [pc, #104]	; (80025d0 <Store_IDs_From_Admin+0x118>)
 8002566:	f7fe fdc7 	bl	80010f8 <LCD_Send_A_String>
	LCD_Goto_XY(2, 0, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2100      	movs	r1, #0
 800256e:	2002      	movs	r0, #2
 8002570:	f7fe fd8b 	bl	800108a <LCD_Goto_XY>
	LCD_Send_A_Character(pass_entery[0], 0);
 8002574:	4b15      	ldr	r3, [pc, #84]	; (80025cc <Store_IDs_From_Admin+0x114>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe fcf8 	bl	8000f70 <LCD_Send_A_Character>
	LCD_Goto_XY(2, 2, 0);
 8002580:	2200      	movs	r2, #0
 8002582:	2102      	movs	r1, #2
 8002584:	2002      	movs	r0, #2
 8002586:	f7fe fd80 	bl	800108a <LCD_Goto_XY>
	LCD_Send_A_Character(pass_entery[1], 0);
 800258a:	4b10      	ldr	r3, [pc, #64]	; (80025cc <Store_IDs_From_Admin+0x114>)
 800258c:	785b      	ldrb	r3, [r3, #1]
 800258e:	2100      	movs	r1, #0
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe fced 	bl	8000f70 <LCD_Send_A_Character>
	LCD_Goto_XY(2, 4, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2104      	movs	r1, #4
 800259a:	2002      	movs	r0, #2
 800259c:	f7fe fd75 	bl	800108a <LCD_Goto_XY>
	LCD_Send_A_Character(pass_entery[2], 0);
 80025a0:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <Store_IDs_From_Admin+0x114>)
 80025a2:	789b      	ldrb	r3, [r3, #2]
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe fce2 	bl	8000f70 <LCD_Send_A_Character>
	dms(100);
 80025ac:	2064      	movs	r0, #100	; 0x64
 80025ae:	f7ff f993 	bl	80018d8 <dms>



}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	08004894 	.word	0x08004894
 80025c0:	080048a0 	.word	0x080048a0
 80025c4:	080048ac 	.word	0x080048ac
 80025c8:	080048b8 	.word	0x080048b8
 80025cc:	20000028 	.word	0x20000028
 80025d0:	080048c4 	.word	0x080048c4

080025d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025dc:	4a14      	ldr	r2, [pc, #80]	; (8002630 <_sbrk+0x5c>)
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <_sbrk+0x60>)
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025e8:	4b13      	ldr	r3, [pc, #76]	; (8002638 <_sbrk+0x64>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d102      	bne.n	80025f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <_sbrk+0x64>)
 80025f2:	4a12      	ldr	r2, [pc, #72]	; (800263c <_sbrk+0x68>)
 80025f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <_sbrk+0x64>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4413      	add	r3, r2
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	429a      	cmp	r2, r3
 8002602:	d207      	bcs.n	8002614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002604:	f000 fb78 	bl	8002cf8 <__errno>
 8002608:	4602      	mov	r2, r0
 800260a:	230c      	movs	r3, #12
 800260c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800260e:	f04f 33ff 	mov.w	r3, #4294967295
 8002612:	e009      	b.n	8002628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <_sbrk+0x64>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800261a:	4b07      	ldr	r3, [pc, #28]	; (8002638 <_sbrk+0x64>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	4a05      	ldr	r2, [pc, #20]	; (8002638 <_sbrk+0x64>)
 8002624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002626:	68fb      	ldr	r3, [r7, #12]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20002800 	.word	0x20002800
 8002634:	00000400 	.word	0x00000400
 8002638:	2000022c 	.word	0x2000022c
 800263c:	20000620 	.word	0x20000620

08002640 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002640:	480d      	ldr	r0, [pc, #52]	; (8002678 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002642:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002644:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002648:	480c      	ldr	r0, [pc, #48]	; (800267c <LoopForever+0x6>)
  ldr r1, =_edata
 800264a:	490d      	ldr	r1, [pc, #52]	; (8002680 <LoopForever+0xa>)
  ldr r2, =_sidata
 800264c:	4a0d      	ldr	r2, [pc, #52]	; (8002684 <LoopForever+0xe>)
  movs r3, #0
 800264e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002650:	e002      	b.n	8002658 <LoopCopyDataInit>

08002652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002656:	3304      	adds	r3, #4

08002658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800265a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800265c:	d3f9      	bcc.n	8002652 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800265e:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002660:	4c0a      	ldr	r4, [pc, #40]	; (800268c <LoopForever+0x16>)
  movs r3, #0
 8002662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002664:	e001      	b.n	800266a <LoopFillZerobss>

08002666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002668:	3204      	adds	r2, #4

0800266a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800266a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800266c:	d3fb      	bcc.n	8002666 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800266e:	f000 fb49 	bl	8002d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002672:	f7ff fbe9 	bl	8001e48 <main>

08002676 <LoopForever>:

LoopForever:
    b LoopForever
 8002676:	e7fe      	b.n	8002676 <LoopForever>
  ldr   r0, =_estack
 8002678:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800267c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002680:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8002684:	08004b10 	.word	0x08004b10
  ldr r2, =_sbss
 8002688:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 800268c:	20000620 	.word	0x20000620

08002690 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002690:	e7fe      	b.n	8002690 <ADC1_2_IRQHandler>

08002692 <HardFault_Handler>:
extern void Decide_WhatNext(void);


uint8_t SysTickLED =0;

void HardFault_Handler(void) {
 8002692:	b480      	push	{r7}
 8002694:	af00      	add	r7, sp, #0

	while(1);
 8002696:	e7fe      	b.n	8002696 <HardFault_Handler+0x4>

08002698 <MemManage_Handler>:

}
void MemManage_Handler(void){
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0

	while(1);
 800269c:	e7fe      	b.n	800269c <MemManage_Handler+0x4>

0800269e <BusFault_Handler>:

}
void BusFault_Handler(void){
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0

	while(1);
 80026a2:	e7fe      	b.n	80026a2 <BusFault_Handler+0x4>

080026a4 <UsageFault_Handler>:

}
void UsageFault_Handler(void){
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0

	while(1);
 80026a8:	e7fe      	b.n	80026a8 <UsageFault_Handler+0x4>

080026aa <SVC_Handler>:
}


__attribute ((naked)) void SVC_Handler(void)
{
	__asm("TST LR,0x4");
 80026aa:	f01e 0f04 	tst.w	lr, #4
	__asm("ITE EQ");
 80026ae:	bf0c      	ite	eq
	__asm("MRSEQ R0,MSP");
 80026b0:	f3ef 8008 	mrseq	r0, MSP
	__asm("MRSNE R0,PSP");
 80026b4:	f3ef 8009 	mrsne	r0, PSP
	__asm("B OS_SVC_services");
 80026b8:	f000 b92a 	b.w	8002910 <OS_SVC_services>



}
 80026bc:	bf00      	nop
	...

080026c0 <trigger_OS_PendSV>:
	__NVIC_SetPriority(PendSV_IRQn, 15);



}
void trigger_OS_PendSV(void){
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0

	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80026c4:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <trigger_OS_PendSV+0x18>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4a03      	ldr	r2, [pc, #12]	; (80026d8 <trigger_OS_PendSV+0x18>)
 80026ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ce:	6053      	str	r3, [r2, #4]
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <SysTick_Handler>:
	SysTick_Config(8000);

}

void SysTick_Handler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0

	SysTickLED ^= 1;
 80026e0:	4b07      	ldr	r3, [pc, #28]	; (8002700 <SysTick_Handler+0x24>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	f083 0301 	eor.w	r3, r3, #1
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	4b05      	ldr	r3, [pc, #20]	; (8002700 <SysTick_Handler+0x24>)
 80026ec:	701a      	strb	r2, [r3, #0]
	teraRTOS_Update_TaskWaitingTime();
 80026ee:	f000 fa3d 	bl	8002b6c <teraRTOS_Update_TaskWaitingTime>
	//Determine Pcurrent&Pnext
	Decide_WhatNext();
 80026f2:	f000 f8bb 	bl	800286c <Decide_WhatNext>
	//Context Switch/Restore
	trigger_OS_PendSV();
 80026f6:	f7ff ffe3 	bl	80026c0 <trigger_OS_PendSV>

}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000230 	.word	0x20000230

08002704 <BubbleSort>:
	SVC_WaitingTask
}SVC_ID;


//Handler Mode
void BubbleSort(){
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0

	uint8_t i=0;
 800270a:	2300      	movs	r3, #0
 800270c:	71fb      	strb	r3, [r7, #7]
	uint8_t j=0;
 800270e:	2300      	movs	r3, #0
 8002710:	71bb      	strb	r3, [r7, #6]
	uint8_t n;


	Task_Creation * temp;
	n = OS_Control.ActiveTasks_number;
 8002712:	4b21      	ldr	r3, [pc, #132]	; (8002798 <BubbleSort+0x94>)
 8002714:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8002718:	717b      	strb	r3, [r7, #5]

	for(i=0; i<n-1; i++)
 800271a:	2300      	movs	r3, #0
 800271c:	71fb      	strb	r3, [r7, #7]
 800271e:	e030      	b.n	8002782 <BubbleSort+0x7e>
	{
		for(j=0; j<n-i-1; j++)
 8002720:	2300      	movs	r3, #0
 8002722:	71bb      	strb	r3, [r7, #6]
 8002724:	e023      	b.n	800276e <BubbleSort+0x6a>
		{
			if (OS_Control.OS_Tasks[j]->Priority > OS_Control.OS_Tasks[j+1]->Priority)
 8002726:	79bb      	ldrb	r3, [r7, #6]
 8002728:	4a1b      	ldr	r2, [pc, #108]	; (8002798 <BubbleSort+0x94>)
 800272a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272e:	791a      	ldrb	r2, [r3, #4]
 8002730:	79bb      	ldrb	r3, [r7, #6]
 8002732:	3301      	adds	r3, #1
 8002734:	4918      	ldr	r1, [pc, #96]	; (8002798 <BubbleSort+0x94>)
 8002736:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800273a:	791b      	ldrb	r3, [r3, #4]
 800273c:	429a      	cmp	r2, r3
 800273e:	d913      	bls.n	8002768 <BubbleSort+0x64>
			{
				temp = OS_Control.OS_Tasks[j];
 8002740:	79bb      	ldrb	r3, [r7, #6]
 8002742:	4a15      	ldr	r2, [pc, #84]	; (8002798 <BubbleSort+0x94>)
 8002744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002748:	603b      	str	r3, [r7, #0]
				OS_Control.OS_Tasks[j] = OS_Control.OS_Tasks[j+1];
 800274a:	79bb      	ldrb	r3, [r7, #6]
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	79bb      	ldrb	r3, [r7, #6]
 8002750:	4911      	ldr	r1, [pc, #68]	; (8002798 <BubbleSort+0x94>)
 8002752:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002756:	4910      	ldr	r1, [pc, #64]	; (8002798 <BubbleSort+0x94>)
 8002758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OS_Tasks[j+1] = temp;
 800275c:	79bb      	ldrb	r3, [r7, #6]
 800275e:	3301      	adds	r3, #1
 8002760:	490d      	ldr	r1, [pc, #52]	; (8002798 <BubbleSort+0x94>)
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(j=0; j<n-i-1; j++)
 8002768:	79bb      	ldrb	r3, [r7, #6]
 800276a:	3301      	adds	r3, #1
 800276c:	71bb      	strb	r3, [r7, #6]
 800276e:	79ba      	ldrb	r2, [r7, #6]
 8002770:	7979      	ldrb	r1, [r7, #5]
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	1acb      	subs	r3, r1, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	429a      	cmp	r2, r3
 800277a:	dbd4      	blt.n	8002726 <BubbleSort+0x22>
	for(i=0; i<n-1; i++)
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	3301      	adds	r3, #1
 8002780:	71fb      	strb	r3, [r7, #7]
 8002782:	79fa      	ldrb	r2, [r7, #7]
 8002784:	797b      	ldrb	r3, [r7, #5]
 8002786:	3b01      	subs	r3, #1
 8002788:	429a      	cmp	r2, r3
 800278a:	dbc9      	blt.n	8002720 <BubbleSort+0x1c>

		}
	}


}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20000470 	.word	0x20000470

0800279c <teraRTOS_Update_SchedulerTable>:

//Handler MODE
void teraRTOS_Update_SchedulerTable(){
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0

	Task_Creation * Ptask;
	Task_Creation * PnextTask;

	int i = 0 ;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]



	Task_Creation * temp = NULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	603b      	str	r3, [r7, #0]

	//1- Bubble sort the scheduler table -> OS_Control.OS_Tasks[100] (FROM HIGH PRIORITY TO LOW)
	BubbleSort();
 80027aa:	f7ff ffab 	bl	8002704 <BubbleSort>
	//2- Free ready queue
	while(FIFO_dequeue(&Ready_Queue, &temp) != FIFO_EMPTY);
 80027ae:	bf00      	nop
 80027b0:	463b      	mov	r3, r7
 80027b2:	4619      	mov	r1, r3
 80027b4:	482b      	ldr	r0, [pc, #172]	; (8002864 <teraRTOS_Update_SchedulerTable+0xc8>)
 80027b6:	f000 fa61 	bl	8002c7c <FIFO_dequeue>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d1f7      	bne.n	80027b0 <teraRTOS_Update_SchedulerTable+0x14>

	//3- Update ready queue
	while(i< OS_Control.ActiveTasks_number)
 80027c0:	e044      	b.n	800284c <teraRTOS_Update_SchedulerTable+0xb0>
	{
		Ptask =	OS_Control.OS_Tasks[i];
 80027c2:	4a29      	ldr	r2, [pc, #164]	; (8002868 <teraRTOS_Update_SchedulerTable+0xcc>)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ca:	60bb      	str	r3, [r7, #8]
		PnextTask =	OS_Control.OS_Tasks[i+1];
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	3301      	adds	r3, #1
 80027d0:	4a25      	ldr	r2, [pc, #148]	; (8002868 <teraRTOS_Update_SchedulerTable+0xcc>)
 80027d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d6:	607b      	str	r3, [r7, #4]
		if(Ptask->TaskState != Suspended)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d031      	beq.n	8002846 <teraRTOS_Update_SchedulerTable+0xaa>
		{
			if(PnextTask->TaskState == Suspended)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d108      	bne.n	80027fe <teraRTOS_Update_SchedulerTable+0x62>
			{
				FIFO_enqueue(&Ready_Queue, Ptask);
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	481d      	ldr	r0, [pc, #116]	; (8002864 <teraRTOS_Update_SchedulerTable+0xc8>)
 80027f0:	f000 fa02 	bl	8002bf8 <FIFO_enqueue>
				Ptask->TaskState = Ready;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2203      	movs	r2, #3
 80027f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 80027fc:	e02e      	b.n	800285c <teraRTOS_Update_SchedulerTable+0xc0>
			}
			if(Ptask->Priority < PnextTask->Priority)
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	791a      	ldrb	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	791b      	ldrb	r3, [r3, #4]
 8002806:	429a      	cmp	r2, r3
 8002808:	d208      	bcs.n	800281c <teraRTOS_Update_SchedulerTable+0x80>
			{
				FIFO_enqueue(&Ready_Queue, Ptask);
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	4815      	ldr	r0, [pc, #84]	; (8002864 <teraRTOS_Update_SchedulerTable+0xc8>)
 800280e:	f000 f9f3 	bl	8002bf8 <FIFO_enqueue>
				Ptask->TaskState = Ready;
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2203      	movs	r2, #3
 8002816:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 800281a:	e01f      	b.n	800285c <teraRTOS_Update_SchedulerTable+0xc0>
			}
			else if( (Ptask->Priority) == (PnextTask->Priority) )
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	791a      	ldrb	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	791b      	ldrb	r3, [r3, #4]
 8002824:	429a      	cmp	r2, r3
 8002826:	d108      	bne.n	800283a <teraRTOS_Update_SchedulerTable+0x9e>
			{
				FIFO_enqueue(&Ready_Queue, Ptask);
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	480e      	ldr	r0, [pc, #56]	; (8002864 <teraRTOS_Update_SchedulerTable+0xc8>)
 800282c:	f000 f9e4 	bl	8002bf8 <FIFO_enqueue>
				Ptask->TaskState = Ready;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2203      	movs	r2, #3
 8002834:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002838:	e005      	b.n	8002846 <teraRTOS_Update_SchedulerTable+0xaa>
			}
			else if(Ptask->Priority > PnextTask->Priority) // This condition not allowed to happen because of Bubble sorting
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	791a      	ldrb	r2, [r3, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	791b      	ldrb	r3, [r3, #4]
 8002842:	429a      	cmp	r2, r3
 8002844:	d809      	bhi.n	800285a <teraRTOS_Update_SchedulerTable+0xbe>
			}
		}



		i++;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	3301      	adds	r3, #1
 800284a:	60fb      	str	r3, [r7, #12]
	while(i< OS_Control.ActiveTasks_number)
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <teraRTOS_Update_SchedulerTable+0xcc>)
 800284e:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	429a      	cmp	r2, r3
 8002856:	d8b4      	bhi.n	80027c2 <teraRTOS_Update_SchedulerTable+0x26>
	}

}
 8002858:	e000      	b.n	800285c <teraRTOS_Update_SchedulerTable+0xc0>
				break;
 800285a:	bf00      	nop
}
 800285c:	bf00      	nop
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	200002c8 	.word	0x200002c8
 8002868:	20000470 	.word	0x20000470

0800286c <Decide_WhatNext>:

//Handler Mode
void Decide_WhatNext(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0

	//if ready queue is empty && OS_Control.CurrentTask->TaskState != Suspended
	if(Ready_Queue.counter == 0 && OS_Control.CurrentTask->TaskState != Suspended)
 8002870:	4b24      	ldr	r3, [pc, #144]	; (8002904 <Decide_WhatNext+0x98>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d11a      	bne.n	80028ae <Decide_WhatNext+0x42>
 8002878:	4b23      	ldr	r3, [pc, #140]	; (8002908 <Decide_WhatNext+0x9c>)
 800287a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800287e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002882:	2b00      	cmp	r3, #0
 8002884:	d013      	beq.n	80028ae <Decide_WhatNext+0x42>
	{
		OS_Control.CurrentTask->TaskState = Running;
 8002886:	4b20      	ldr	r3, [pc, #128]	; (8002908 <Decide_WhatNext+0x9c>)
 8002888:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800288c:	2201      	movs	r2, #1
 800288e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		FIFO_enqueue(&Ready_Queue, OS_Control.CurrentTask);
 8002892:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <Decide_WhatNext+0x9c>)
 8002894:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002898:	4619      	mov	r1, r3
 800289a:	481a      	ldr	r0, [pc, #104]	; (8002904 <Decide_WhatNext+0x98>)
 800289c:	f000 f9ac 	bl	8002bf8 <FIFO_enqueue>
		OS_Control.NextTask =  OS_Control.CurrentTask;
 80028a0:	4b19      	ldr	r3, [pc, #100]	; (8002908 <Decide_WhatNext+0x9c>)
 80028a2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80028a6:	4a18      	ldr	r2, [pc, #96]	; (8002908 <Decide_WhatNext+0x9c>)
 80028a8:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
			FIFO_enqueue(&Ready_Queue, OS_Control.CurrentTask);
			OS_Control.CurrentTask->TaskState = Ready;
		}
	}

}
 80028ac:	e027      	b.n	80028fe <Decide_WhatNext+0x92>
		FIFO_dequeue(&Ready_Queue, &OS_Control.NextTask);
 80028ae:	4917      	ldr	r1, [pc, #92]	; (800290c <Decide_WhatNext+0xa0>)
 80028b0:	4814      	ldr	r0, [pc, #80]	; (8002904 <Decide_WhatNext+0x98>)
 80028b2:	f000 f9e3 	bl	8002c7c <FIFO_dequeue>
		OS_Control.NextTask->TaskState = Running;
 80028b6:	4b14      	ldr	r3, [pc, #80]	; (8002908 <Decide_WhatNext+0x9c>)
 80028b8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if( (OS_Control.CurrentTask->Priority == OS_Control.NextTask->Priority ) && (OS_Control.CurrentTask->TaskState != Suspended) )
 80028c2:	4b11      	ldr	r3, [pc, #68]	; (8002908 <Decide_WhatNext+0x9c>)
 80028c4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80028c8:	791a      	ldrb	r2, [r3, #4]
 80028ca:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <Decide_WhatNext+0x9c>)
 80028cc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80028d0:	791b      	ldrb	r3, [r3, #4]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d113      	bne.n	80028fe <Decide_WhatNext+0x92>
 80028d6:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <Decide_WhatNext+0x9c>)
 80028d8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80028dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00c      	beq.n	80028fe <Decide_WhatNext+0x92>
			FIFO_enqueue(&Ready_Queue, OS_Control.CurrentTask);
 80028e4:	4b08      	ldr	r3, [pc, #32]	; (8002908 <Decide_WhatNext+0x9c>)
 80028e6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80028ea:	4619      	mov	r1, r3
 80028ec:	4805      	ldr	r0, [pc, #20]	; (8002904 <Decide_WhatNext+0x98>)
 80028ee:	f000 f983 	bl	8002bf8 <FIFO_enqueue>
			OS_Control.CurrentTask->TaskState = Ready;
 80028f2:	4b05      	ldr	r3, [pc, #20]	; (8002908 <Decide_WhatNext+0x9c>)
 80028f4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80028f8:	2203      	movs	r2, #3
 80028fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	200002c8 	.word	0x200002c8
 8002908:	20000470 	.word	0x20000470
 800290c:	20000614 	.word	0x20000614

08002910 <OS_SVC_services>:

//To execute specific OS service
// Handler Mode
void OS_SVC_services(int * StackFramePointer)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	//OS_SVC_Set Stack -> R0 -> argument 0 = StackFramePointer
	//OS_SVC_Set Stack : R0,R1,R2,R3,R12,LR,PC,xPSR
	unsigned char SVC_Number;
	SVC_Number =  *((unsigned char*)( ( (unsigned char*)StackFramePointer[6] ) - 2 )) ;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3318      	adds	r3, #24
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	3b02      	subs	r3, #2
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	73fb      	strb	r3, [r7, #15]

	switch(SVC_Number)
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	2b00      	cmp	r3, #0
 8002928:	db20      	blt.n	800296c <OS_SVC_services+0x5c>
 800292a:	2b01      	cmp	r3, #1
 800292c:	dd02      	ble.n	8002934 <OS_SVC_services+0x24>
 800292e:	2b02      	cmp	r3, #2
 8002930:	d017      	beq.n	8002962 <OS_SVC_services+0x52>
		teraRTOS_Update_SchedulerTable();

		break;
	}

	return;
 8002932:	e01b      	b.n	800296c <OS_SVC_services+0x5c>
		teraRTOS_Update_SchedulerTable();
 8002934:	f7ff ff32 	bl	800279c <teraRTOS_Update_SchedulerTable>
		if(OS_Control.OS_Modes == OSrunning)
 8002938:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <OS_SVC_services+0x64>)
 800293a:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 800293e:	2b01      	cmp	r3, #1
 8002940:	d112      	bne.n	8002968 <OS_SVC_services+0x58>
			if(strcmp(OS_Control.CurrentTask->TaskName, "idleTask") != 0)
 8002942:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <OS_SVC_services+0x64>)
 8002944:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002948:	331c      	adds	r3, #28
 800294a:	490b      	ldr	r1, [pc, #44]	; (8002978 <OS_SVC_services+0x68>)
 800294c:	4618      	mov	r0, r3
 800294e:	f7fd fc0f 	bl	8000170 <strcmp>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d007      	beq.n	8002968 <OS_SVC_services+0x58>
				Decide_WhatNext();
 8002958:	f7ff ff88 	bl	800286c <Decide_WhatNext>
				trigger_OS_PendSV();
 800295c:	f7ff feb0 	bl	80026c0 <trigger_OS_PendSV>
		break;
 8002960:	e002      	b.n	8002968 <OS_SVC_services+0x58>
		teraRTOS_Update_SchedulerTable();
 8002962:	f7ff ff1b 	bl	800279c <teraRTOS_Update_SchedulerTable>
		break;
 8002966:	e000      	b.n	800296a <OS_SVC_services+0x5a>
		break;
 8002968:	bf00      	nop
	return;
 800296a:	bf00      	nop
 800296c:	bf00      	nop
}
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20000470 	.word	0x20000470
 8002978:	080048d4 	.word	0x080048d4

0800297c <PendSV_Handler>:
	//=====================================
	//Save the Context of the Current Task
	//=====================================
	//Get the Current Task PSP from CPU register as CPU pushes xPSR,.....,R0

	OS_GET_PSP(OS_Control.CurrentTask->CurrentPSP);
 800297c:	4b6e      	ldr	r3, [pc, #440]	; (8002b38 <PendSV_Handler+0x1bc>)
 800297e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002982:	f3ef 8209 	mrs	r2, PSP
 8002986:	619a      	str	r2, [r3, #24]

	//Using this CurrentPSP ( Pointer ) to store (R4 to R11)
	OS_Control.CurrentTask->CurrentPSP--;
 8002988:	4b6b      	ldr	r3, [pc, #428]	; (8002b38 <PendSV_Handler+0x1bc>)
 800298a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800298e:	699a      	ldr	r2, [r3, #24]
 8002990:	3a04      	subs	r2, #4
 8002992:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r4" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 8002994:	4b68      	ldr	r3, [pc, #416]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002996:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	4622      	mov	r2, r4
 800299e:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->CurrentPSP--;
 80029a0:	4b65      	ldr	r3, [pc, #404]	; (8002b38 <PendSV_Handler+0x1bc>)
 80029a2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80029a6:	699a      	ldr	r2, [r3, #24]
 80029a8:	3a04      	subs	r2, #4
 80029aa:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r5" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 80029ac:	4b62      	ldr	r3, [pc, #392]	; (8002b38 <PendSV_Handler+0x1bc>)
 80029ae:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	462a      	mov	r2, r5
 80029b6:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->CurrentPSP--;
 80029b8:	4b5f      	ldr	r3, [pc, #380]	; (8002b38 <PendSV_Handler+0x1bc>)
 80029ba:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80029be:	699a      	ldr	r2, [r3, #24]
 80029c0:	3a04      	subs	r2, #4
 80029c2:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r6" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 80029c4:	4b5c      	ldr	r3, [pc, #368]	; (8002b38 <PendSV_Handler+0x1bc>)
 80029c6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	4632      	mov	r2, r6
 80029ce:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->CurrentPSP--;
 80029d0:	4b59      	ldr	r3, [pc, #356]	; (8002b38 <PendSV_Handler+0x1bc>)
 80029d2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80029d6:	699a      	ldr	r2, [r3, #24]
 80029d8:	3a04      	subs	r2, #4
 80029da:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r7" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 80029dc:	4b56      	ldr	r3, [pc, #344]	; (8002b38 <PendSV_Handler+0x1bc>)
 80029de:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	463a      	mov	r2, r7
 80029e6:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->CurrentPSP--;
 80029e8:	4b53      	ldr	r3, [pc, #332]	; (8002b38 <PendSV_Handler+0x1bc>)
 80029ea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80029ee:	699a      	ldr	r2, [r3, #24]
 80029f0:	3a04      	subs	r2, #4
 80029f2:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r8" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 80029f4:	4b50      	ldr	r3, [pc, #320]	; (8002b38 <PendSV_Handler+0x1bc>)
 80029f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	4642      	mov	r2, r8
 80029fe:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->CurrentPSP--;
 8002a00:	4b4d      	ldr	r3, [pc, #308]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002a02:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a06:	699a      	ldr	r2, [r3, #24]
 8002a08:	3a04      	subs	r2, #4
 8002a0a:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r9" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 8002a0c:	4b4a      	ldr	r3, [pc, #296]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002a0e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	464a      	mov	r2, r9
 8002a16:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->CurrentPSP--;
 8002a18:	4b47      	ldr	r3, [pc, #284]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002a1a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a1e:	699a      	ldr	r2, [r3, #24]
 8002a20:	3a04      	subs	r2, #4
 8002a22:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r10" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 8002a24:	4b44      	ldr	r3, [pc, #272]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002a26:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	4652      	mov	r2, sl
 8002a2e:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->CurrentPSP--;
 8002a30:	4b41      	ldr	r3, [pc, #260]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002a32:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a36:	699a      	ldr	r2, [r3, #24]
 8002a38:	3a04      	subs	r2, #4
 8002a3a:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r11" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 8002a3c:	4b3e      	ldr	r3, [pc, #248]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002a3e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	465a      	mov	r2, fp
 8002a46:	601a      	str	r2, [r3, #0]
	//Already saved in CurrentPSP

	//=====================================
	//Restore the Context of the Next task
	//=====================================
	if(OS_Control.NextTask != NULL){
 8002a48:	4b3b      	ldr	r3, [pc, #236]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002a4a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <PendSV_Handler+0xea>
		OS_Control.CurrentTask = OS_Control.NextTask;
 8002a52:	4b39      	ldr	r3, [pc, #228]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002a54:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002a58:	4a37      	ldr	r2, [pc, #220]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002a5a:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		OS_Control.NextTask = NULL;
 8002a5e:	4b36      	ldr	r3, [pc, #216]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	}

	__asm volatile("mov R11,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 8002a66:	4b34      	ldr	r3, [pc, #208]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002a68:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	469b      	mov	fp, r3
	OS_Control.CurrentTask->CurrentPSP++;
 8002a72:	4b31      	ldr	r3, [pc, #196]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002a74:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a78:	699a      	ldr	r2, [r3, #24]
 8002a7a:	3204      	adds	r2, #4
 8002a7c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov R10,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 8002a7e:	4b2e      	ldr	r3, [pc, #184]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002a80:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	469a      	mov	sl, r3
	OS_Control.CurrentTask->CurrentPSP++;
 8002a8a:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002a8c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a90:	699a      	ldr	r2, [r3, #24]
 8002a92:	3204      	adds	r2, #4
 8002a94:	619a      	str	r2, [r3, #24]
	__asm volatile("mov R9,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 8002a96:	4b28      	ldr	r3, [pc, #160]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002a98:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4699      	mov	r9, r3
	OS_Control.CurrentTask->CurrentPSP++;
 8002aa2:	4b25      	ldr	r3, [pc, #148]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002aa4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	3204      	adds	r2, #4
 8002aac:	619a      	str	r2, [r3, #24]
	__asm volatile("mov R8,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 8002aae:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002ab0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4698      	mov	r8, r3
	OS_Control.CurrentTask->CurrentPSP++;
 8002aba:	4b1f      	ldr	r3, [pc, #124]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002abc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	3204      	adds	r2, #4
 8002ac4:	619a      	str	r2, [r3, #24]
	__asm volatile("mov R7,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 8002ac6:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002ac8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	461f      	mov	r7, r3
	OS_Control.CurrentTask->CurrentPSP++;
 8002ad2:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002ad4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	3204      	adds	r2, #4
 8002adc:	619a      	str	r2, [r3, #24]
	__asm volatile("mov R6,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 8002ade:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002ae0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	461e      	mov	r6, r3
	OS_Control.CurrentTask->CurrentPSP++;
 8002aea:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002aec:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	3204      	adds	r2, #4
 8002af4:	619a      	str	r2, [r3, #24]
	__asm volatile("mov R5,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 8002af6:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002af8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	461d      	mov	r5, r3
	OS_Control.CurrentTask->CurrentPSP++;
 8002b02:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002b04:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	3204      	adds	r2, #4
 8002b0c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov R4,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002b10:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	461c      	mov	r4, r3
	OS_Control.CurrentTask->CurrentPSP++;
 8002b1a:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002b1c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002b20:	699a      	ldr	r2, [r3, #24]
 8002b22:	3204      	adds	r2, #4
 8002b24:	619a      	str	r2, [r3, #24]

	//Update PSP and Exit
	OS_SET_PSP(OS_Control.CurrentTask->CurrentPSP);
 8002b26:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <PendSV_Handler+0x1bc>)
 8002b28:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	f383 8809 	msr	PSP, r3
	__asm volatile ("BX LR");
 8002b32:	4770      	bx	lr



}
 8002b34:	bf00      	nop
 8002b36:	bf00      	nop
 8002b38:	20000470 	.word	0x20000470

08002b3c <teraRTOS_OS_SVC_Set>:


	return RTOS_Error;
}
//Thread Mode
void teraRTOS_OS_SVC_Set(SVC_ID id){
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	71fb      	strb	r3, [r7, #7]

	switch(id)
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d006      	beq.n	8002b5a <teraRTOS_OS_SVC_Set+0x1e>
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d006      	beq.n	8002b5e <teraRTOS_OS_SVC_Set+0x22>
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d000      	beq.n	8002b56 <teraRTOS_OS_SVC_Set+0x1a>

		break;

	}

}
 8002b54:	e005      	b.n	8002b62 <teraRTOS_OS_SVC_Set+0x26>
		__asm("SVC #0x0");
 8002b56:	df00      	svc	0
		break;
 8002b58:	e003      	b.n	8002b62 <teraRTOS_OS_SVC_Set+0x26>
		__asm("SVC #0x1");
 8002b5a:	df01      	svc	1
		break;
 8002b5c:	e001      	b.n	8002b62 <teraRTOS_OS_SVC_Set+0x26>
		__asm("SVC #0x2");
 8002b5e:	df02      	svc	2
		break;
 8002b60:	bf00      	nop
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <teraRTOS_Update_TaskWaitingTime>:


}

void teraRTOS_Update_TaskWaitingTime()
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
	int i=0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	607b      	str	r3, [r7, #4]
	for(i=0; i<OS_Control.ActiveTasks_number; i++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	607b      	str	r3, [r7, #4]
 8002b7a:	e031      	b.n	8002be0 <teraRTOS_Update_TaskWaitingTime+0x74>
	{

		if(OS_Control.OS_Tasks[i]->TaskState == Suspended)
 8002b7c:	4a1d      	ldr	r2, [pc, #116]	; (8002bf4 <teraRTOS_Update_TaskWaitingTime+0x88>)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b84:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d126      	bne.n	8002bda <teraRTOS_Update_TaskWaitingTime+0x6e>
		{
			if(OS_Control.OS_Tasks[i]->Task_WaitingTime.Blocking == Block_Enable)
 8002b8c:	4a19      	ldr	r2, [pc, #100]	; (8002bf4 <teraRTOS_Update_TaskWaitingTime+0x88>)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d11e      	bne.n	8002bda <teraRTOS_Update_TaskWaitingTime+0x6e>
			{
				OS_Control.OS_Tasks[i]->Task_WaitingTime.Ticks_Number--;
 8002b9c:	4a15      	ldr	r2, [pc, #84]	; (8002bf4 <teraRTOS_Update_TaskWaitingTime+0x88>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba6:	3a01      	subs	r2, #1
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40
				if(OS_Control.OS_Tasks[i]->Task_WaitingTime.Ticks_Number == 0)
 8002baa:	4a12      	ldr	r2, [pc, #72]	; (8002bf4 <teraRTOS_Update_TaskWaitingTime+0x88>)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d110      	bne.n	8002bda <teraRTOS_Update_TaskWaitingTime+0x6e>
				{
					OS_Control.OS_Tasks[i]->Task_WaitingTime.Blocking = Block_Disable;
 8002bb8:	4a0e      	ldr	r2, [pc, #56]	; (8002bf4 <teraRTOS_Update_TaskWaitingTime+0x88>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					OS_Control.OS_Tasks[i]->TaskState = Waiting;
 8002bc6:	4a0b      	ldr	r2, [pc, #44]	; (8002bf4 <teraRTOS_Update_TaskWaitingTime+0x88>)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
					teraRTOS_OS_SVC_Set(SVC_WaitingTask);
 8002bd4:	2002      	movs	r0, #2
 8002bd6:	f7ff ffb1 	bl	8002b3c <teraRTOS_OS_SVC_Set>
	for(i=0; i<OS_Control.ActiveTasks_number; i++)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	607b      	str	r3, [r7, #4]
 8002be0:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <teraRTOS_Update_TaskWaitingTime+0x88>)
 8002be2:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d8c7      	bhi.n	8002b7c <teraRTOS_Update_TaskWaitingTime+0x10>
			}

		}
	}

}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20000470 	.word	0x20000470

08002bf8 <FIFO_enqueue>:

}

/* *********************************** */

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo,element_type item){
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <FIFO_enqueue+0x1a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e02d      	b.n	8002c72 <FIFO_enqueue+0x7a>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d107      	bne.n	8002c32 <FIFO_enqueue+0x3a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d101      	bne.n	8002c32 <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e01f      	b.n	8002c72 <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	601a      	str	r2, [r3, #0]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	68d2      	ldr	r2, [r2, #12]
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6912      	ldr	r2, [r2, #16]
 8002c52:	0092      	lsls	r2, r2, #2
 8002c54:	440a      	add	r2, r1
 8002c56:	3a04      	subs	r2, #4
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d104      	bne.n	8002c66 <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	e004      	b.n	8002c70 <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	1d1a      	adds	r2, r3, #4
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 8002c70:	2300      	movs	r3, #0


}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <FIFO_dequeue>:

/* *********************************** */

Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type * item){
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->length)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <FIFO_dequeue+0x1a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e028      	b.n	8002cec <FIFO_dequeue+0x70>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d101      	bne.n	8002caa <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e020      	b.n	8002cec <FIFO_dequeue+0x70>



	*item = *(fifo->head);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	1e5a      	subs	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	601a      	str	r2, [r3, #0]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68d2      	ldr	r2, [r2, #12]
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6912      	ldr	r2, [r2, #16]
 8002ccc:	0092      	lsls	r2, r2, #2
 8002cce:	440a      	add	r2, r1
 8002cd0:	3a04      	subs	r2, #4
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d104      	bne.n	8002ce0 <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	e004      	b.n	8002cea <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	1d1a      	adds	r2, r3, #4
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr
	...

08002cf8 <__errno>:
 8002cf8:	4b01      	ldr	r3, [pc, #4]	; (8002d00 <__errno+0x8>)
 8002cfa:	6818      	ldr	r0, [r3, #0]
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	20000030 	.word	0x20000030

08002d04 <__libc_init_array>:
 8002d04:	b570      	push	{r4, r5, r6, lr}
 8002d06:	2500      	movs	r5, #0
 8002d08:	4e0c      	ldr	r6, [pc, #48]	; (8002d3c <__libc_init_array+0x38>)
 8002d0a:	4c0d      	ldr	r4, [pc, #52]	; (8002d40 <__libc_init_array+0x3c>)
 8002d0c:	1ba4      	subs	r4, r4, r6
 8002d0e:	10a4      	asrs	r4, r4, #2
 8002d10:	42a5      	cmp	r5, r4
 8002d12:	d109      	bne.n	8002d28 <__libc_init_array+0x24>
 8002d14:	f001 fd3c 	bl	8004790 <_init>
 8002d18:	2500      	movs	r5, #0
 8002d1a:	4e0a      	ldr	r6, [pc, #40]	; (8002d44 <__libc_init_array+0x40>)
 8002d1c:	4c0a      	ldr	r4, [pc, #40]	; (8002d48 <__libc_init_array+0x44>)
 8002d1e:	1ba4      	subs	r4, r4, r6
 8002d20:	10a4      	asrs	r4, r4, #2
 8002d22:	42a5      	cmp	r5, r4
 8002d24:	d105      	bne.n	8002d32 <__libc_init_array+0x2e>
 8002d26:	bd70      	pop	{r4, r5, r6, pc}
 8002d28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d2c:	4798      	blx	r3
 8002d2e:	3501      	adds	r5, #1
 8002d30:	e7ee      	b.n	8002d10 <__libc_init_array+0xc>
 8002d32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d36:	4798      	blx	r3
 8002d38:	3501      	adds	r5, #1
 8002d3a:	e7f2      	b.n	8002d22 <__libc_init_array+0x1e>
 8002d3c:	08004b08 	.word	0x08004b08
 8002d40:	08004b08 	.word	0x08004b08
 8002d44:	08004b08 	.word	0x08004b08
 8002d48:	08004b0c 	.word	0x08004b0c

08002d4c <memset>:
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	4402      	add	r2, r0
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d100      	bne.n	8002d56 <memset+0xa>
 8002d54:	4770      	bx	lr
 8002d56:	f803 1b01 	strb.w	r1, [r3], #1
 8002d5a:	e7f9      	b.n	8002d50 <memset+0x4>

08002d5c <__cvt>:
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d62:	461e      	mov	r6, r3
 8002d64:	bfbb      	ittet	lt
 8002d66:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002d6a:	461e      	movlt	r6, r3
 8002d6c:	2300      	movge	r3, #0
 8002d6e:	232d      	movlt	r3, #45	; 0x2d
 8002d70:	b088      	sub	sp, #32
 8002d72:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002d74:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8002d78:	f027 0720 	bic.w	r7, r7, #32
 8002d7c:	2f46      	cmp	r7, #70	; 0x46
 8002d7e:	4614      	mov	r4, r2
 8002d80:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002d82:	700b      	strb	r3, [r1, #0]
 8002d84:	d004      	beq.n	8002d90 <__cvt+0x34>
 8002d86:	2f45      	cmp	r7, #69	; 0x45
 8002d88:	d100      	bne.n	8002d8c <__cvt+0x30>
 8002d8a:	3501      	adds	r5, #1
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e000      	b.n	8002d92 <__cvt+0x36>
 8002d90:	2303      	movs	r3, #3
 8002d92:	aa07      	add	r2, sp, #28
 8002d94:	9204      	str	r2, [sp, #16]
 8002d96:	aa06      	add	r2, sp, #24
 8002d98:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002d9c:	e9cd 3500 	strd	r3, r5, [sp]
 8002da0:	4622      	mov	r2, r4
 8002da2:	4633      	mov	r3, r6
 8002da4:	f000 fba8 	bl	80034f8 <_dtoa_r>
 8002da8:	2f47      	cmp	r7, #71	; 0x47
 8002daa:	4680      	mov	r8, r0
 8002dac:	d102      	bne.n	8002db4 <__cvt+0x58>
 8002dae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002db0:	07db      	lsls	r3, r3, #31
 8002db2:	d526      	bpl.n	8002e02 <__cvt+0xa6>
 8002db4:	2f46      	cmp	r7, #70	; 0x46
 8002db6:	eb08 0905 	add.w	r9, r8, r5
 8002dba:	d111      	bne.n	8002de0 <__cvt+0x84>
 8002dbc:	f898 3000 	ldrb.w	r3, [r8]
 8002dc0:	2b30      	cmp	r3, #48	; 0x30
 8002dc2:	d10a      	bne.n	8002dda <__cvt+0x7e>
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	4620      	mov	r0, r4
 8002dca:	4631      	mov	r1, r6
 8002dcc:	f7fd fe06 	bl	80009dc <__aeabi_dcmpeq>
 8002dd0:	b918      	cbnz	r0, 8002dda <__cvt+0x7e>
 8002dd2:	f1c5 0501 	rsb	r5, r5, #1
 8002dd6:	f8ca 5000 	str.w	r5, [sl]
 8002dda:	f8da 3000 	ldr.w	r3, [sl]
 8002dde:	4499      	add	r9, r3
 8002de0:	2200      	movs	r2, #0
 8002de2:	2300      	movs	r3, #0
 8002de4:	4620      	mov	r0, r4
 8002de6:	4631      	mov	r1, r6
 8002de8:	f7fd fdf8 	bl	80009dc <__aeabi_dcmpeq>
 8002dec:	b938      	cbnz	r0, 8002dfe <__cvt+0xa2>
 8002dee:	2230      	movs	r2, #48	; 0x30
 8002df0:	9b07      	ldr	r3, [sp, #28]
 8002df2:	454b      	cmp	r3, r9
 8002df4:	d205      	bcs.n	8002e02 <__cvt+0xa6>
 8002df6:	1c59      	adds	r1, r3, #1
 8002df8:	9107      	str	r1, [sp, #28]
 8002dfa:	701a      	strb	r2, [r3, #0]
 8002dfc:	e7f8      	b.n	8002df0 <__cvt+0x94>
 8002dfe:	f8cd 901c 	str.w	r9, [sp, #28]
 8002e02:	4640      	mov	r0, r8
 8002e04:	9b07      	ldr	r3, [sp, #28]
 8002e06:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002e08:	eba3 0308 	sub.w	r3, r3, r8
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	b008      	add	sp, #32
 8002e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002e14 <__exponent>:
 8002e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e16:	2900      	cmp	r1, #0
 8002e18:	bfb4      	ite	lt
 8002e1a:	232d      	movlt	r3, #45	; 0x2d
 8002e1c:	232b      	movge	r3, #43	; 0x2b
 8002e1e:	4604      	mov	r4, r0
 8002e20:	bfb8      	it	lt
 8002e22:	4249      	neglt	r1, r1
 8002e24:	2909      	cmp	r1, #9
 8002e26:	f804 2b02 	strb.w	r2, [r4], #2
 8002e2a:	7043      	strb	r3, [r0, #1]
 8002e2c:	dd21      	ble.n	8002e72 <__exponent+0x5e>
 8002e2e:	f10d 0307 	add.w	r3, sp, #7
 8002e32:	461f      	mov	r7, r3
 8002e34:	260a      	movs	r6, #10
 8002e36:	fb91 f5f6 	sdiv	r5, r1, r6
 8002e3a:	fb06 1115 	mls	r1, r6, r5, r1
 8002e3e:	2d09      	cmp	r5, #9
 8002e40:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002e44:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002e48:	f103 32ff 	add.w	r2, r3, #4294967295
 8002e4c:	4629      	mov	r1, r5
 8002e4e:	dc09      	bgt.n	8002e64 <__exponent+0x50>
 8002e50:	3130      	adds	r1, #48	; 0x30
 8002e52:	3b02      	subs	r3, #2
 8002e54:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002e58:	42bb      	cmp	r3, r7
 8002e5a:	4622      	mov	r2, r4
 8002e5c:	d304      	bcc.n	8002e68 <__exponent+0x54>
 8002e5e:	1a10      	subs	r0, r2, r0
 8002e60:	b003      	add	sp, #12
 8002e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e64:	4613      	mov	r3, r2
 8002e66:	e7e6      	b.n	8002e36 <__exponent+0x22>
 8002e68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e6c:	f804 2b01 	strb.w	r2, [r4], #1
 8002e70:	e7f2      	b.n	8002e58 <__exponent+0x44>
 8002e72:	2330      	movs	r3, #48	; 0x30
 8002e74:	4419      	add	r1, r3
 8002e76:	7083      	strb	r3, [r0, #2]
 8002e78:	1d02      	adds	r2, r0, #4
 8002e7a:	70c1      	strb	r1, [r0, #3]
 8002e7c:	e7ef      	b.n	8002e5e <__exponent+0x4a>
	...

08002e80 <_printf_float>:
 8002e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e84:	b091      	sub	sp, #68	; 0x44
 8002e86:	460c      	mov	r4, r1
 8002e88:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002e8a:	4693      	mov	fp, r2
 8002e8c:	461e      	mov	r6, r3
 8002e8e:	4605      	mov	r5, r0
 8002e90:	f001 f8e6 	bl	8004060 <_localeconv_r>
 8002e94:	6803      	ldr	r3, [r0, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	9309      	str	r3, [sp, #36]	; 0x24
 8002e9a:	f7fd f973 	bl	8000184 <strlen>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	930e      	str	r3, [sp, #56]	; 0x38
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	900a      	str	r0, [sp, #40]	; 0x28
 8002ea6:	3307      	adds	r3, #7
 8002ea8:	f023 0307 	bic.w	r3, r3, #7
 8002eac:	f103 0208 	add.w	r2, r3, #8
 8002eb0:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002eb4:	f8d4 a000 	ldr.w	sl, [r4]
 8002eb8:	603a      	str	r2, [r7, #0]
 8002eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002ec2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8002ec6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002eca:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed0:	4ba6      	ldr	r3, [pc, #664]	; (800316c <_printf_float+0x2ec>)
 8002ed2:	4638      	mov	r0, r7
 8002ed4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002ed6:	f7fd fdb3 	bl	8000a40 <__aeabi_dcmpun>
 8002eda:	bb68      	cbnz	r0, 8002f38 <_printf_float+0xb8>
 8002edc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee0:	4ba2      	ldr	r3, [pc, #648]	; (800316c <_printf_float+0x2ec>)
 8002ee2:	4638      	mov	r0, r7
 8002ee4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002ee6:	f7fd fd8d 	bl	8000a04 <__aeabi_dcmple>
 8002eea:	bb28      	cbnz	r0, 8002f38 <_printf_float+0xb8>
 8002eec:	2200      	movs	r2, #0
 8002eee:	2300      	movs	r3, #0
 8002ef0:	4638      	mov	r0, r7
 8002ef2:	4649      	mov	r1, r9
 8002ef4:	f7fd fd7c 	bl	80009f0 <__aeabi_dcmplt>
 8002ef8:	b110      	cbz	r0, 8002f00 <_printf_float+0x80>
 8002efa:	232d      	movs	r3, #45	; 0x2d
 8002efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f00:	4f9b      	ldr	r7, [pc, #620]	; (8003170 <_printf_float+0x2f0>)
 8002f02:	4b9c      	ldr	r3, [pc, #624]	; (8003174 <_printf_float+0x2f4>)
 8002f04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002f08:	bf98      	it	ls
 8002f0a:	461f      	movls	r7, r3
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	f04f 0900 	mov.w	r9, #0
 8002f12:	6123      	str	r3, [r4, #16]
 8002f14:	f02a 0304 	bic.w	r3, sl, #4
 8002f18:	6023      	str	r3, [r4, #0]
 8002f1a:	9600      	str	r6, [sp, #0]
 8002f1c:	465b      	mov	r3, fp
 8002f1e:	aa0f      	add	r2, sp, #60	; 0x3c
 8002f20:	4621      	mov	r1, r4
 8002f22:	4628      	mov	r0, r5
 8002f24:	f000 f9e2 	bl	80032ec <_printf_common>
 8002f28:	3001      	adds	r0, #1
 8002f2a:	f040 8090 	bne.w	800304e <_printf_float+0x1ce>
 8002f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f32:	b011      	add	sp, #68	; 0x44
 8002f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f38:	463a      	mov	r2, r7
 8002f3a:	464b      	mov	r3, r9
 8002f3c:	4638      	mov	r0, r7
 8002f3e:	4649      	mov	r1, r9
 8002f40:	f7fd fd7e 	bl	8000a40 <__aeabi_dcmpun>
 8002f44:	b110      	cbz	r0, 8002f4c <_printf_float+0xcc>
 8002f46:	4f8c      	ldr	r7, [pc, #560]	; (8003178 <_printf_float+0x2f8>)
 8002f48:	4b8c      	ldr	r3, [pc, #560]	; (800317c <_printf_float+0x2fc>)
 8002f4a:	e7db      	b.n	8002f04 <_printf_float+0x84>
 8002f4c:	6863      	ldr	r3, [r4, #4]
 8002f4e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8002f52:	1c59      	adds	r1, r3, #1
 8002f54:	a80d      	add	r0, sp, #52	; 0x34
 8002f56:	a90e      	add	r1, sp, #56	; 0x38
 8002f58:	d140      	bne.n	8002fdc <_printf_float+0x15c>
 8002f5a:	2306      	movs	r3, #6
 8002f5c:	6063      	str	r3, [r4, #4]
 8002f5e:	f04f 0c00 	mov.w	ip, #0
 8002f62:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8002f66:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002f6a:	6863      	ldr	r3, [r4, #4]
 8002f6c:	6022      	str	r2, [r4, #0]
 8002f6e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	463a      	mov	r2, r7
 8002f76:	464b      	mov	r3, r9
 8002f78:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002f7c:	4628      	mov	r0, r5
 8002f7e:	f7ff feed 	bl	8002d5c <__cvt>
 8002f82:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002f86:	2b47      	cmp	r3, #71	; 0x47
 8002f88:	4607      	mov	r7, r0
 8002f8a:	d109      	bne.n	8002fa0 <_printf_float+0x120>
 8002f8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f8e:	1cd8      	adds	r0, r3, #3
 8002f90:	db02      	blt.n	8002f98 <_printf_float+0x118>
 8002f92:	6862      	ldr	r2, [r4, #4]
 8002f94:	4293      	cmp	r3, r2
 8002f96:	dd47      	ble.n	8003028 <_printf_float+0x1a8>
 8002f98:	f1a8 0802 	sub.w	r8, r8, #2
 8002f9c:	fa5f f888 	uxtb.w	r8, r8
 8002fa0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002fa4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002fa6:	d824      	bhi.n	8002ff2 <_printf_float+0x172>
 8002fa8:	3901      	subs	r1, #1
 8002faa:	4642      	mov	r2, r8
 8002fac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002fb0:	910d      	str	r1, [sp, #52]	; 0x34
 8002fb2:	f7ff ff2f 	bl	8002e14 <__exponent>
 8002fb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002fb8:	4681      	mov	r9, r0
 8002fba:	1813      	adds	r3, r2, r0
 8002fbc:	2a01      	cmp	r2, #1
 8002fbe:	6123      	str	r3, [r4, #16]
 8002fc0:	dc02      	bgt.n	8002fc8 <_printf_float+0x148>
 8002fc2:	6822      	ldr	r2, [r4, #0]
 8002fc4:	07d1      	lsls	r1, r2, #31
 8002fc6:	d501      	bpl.n	8002fcc <_printf_float+0x14c>
 8002fc8:	3301      	adds	r3, #1
 8002fca:	6123      	str	r3, [r4, #16]
 8002fcc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0a2      	beq.n	8002f1a <_printf_float+0x9a>
 8002fd4:	232d      	movs	r3, #45	; 0x2d
 8002fd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fda:	e79e      	b.n	8002f1a <_printf_float+0x9a>
 8002fdc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8002fe0:	f000 816e 	beq.w	80032c0 <_printf_float+0x440>
 8002fe4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002fe8:	d1b9      	bne.n	8002f5e <_printf_float+0xde>
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1b7      	bne.n	8002f5e <_printf_float+0xde>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e7b4      	b.n	8002f5c <_printf_float+0xdc>
 8002ff2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002ff6:	d119      	bne.n	800302c <_printf_float+0x1ac>
 8002ff8:	2900      	cmp	r1, #0
 8002ffa:	6863      	ldr	r3, [r4, #4]
 8002ffc:	dd0c      	ble.n	8003018 <_printf_float+0x198>
 8002ffe:	6121      	str	r1, [r4, #16]
 8003000:	b913      	cbnz	r3, 8003008 <_printf_float+0x188>
 8003002:	6822      	ldr	r2, [r4, #0]
 8003004:	07d2      	lsls	r2, r2, #31
 8003006:	d502      	bpl.n	800300e <_printf_float+0x18e>
 8003008:	3301      	adds	r3, #1
 800300a:	440b      	add	r3, r1
 800300c:	6123      	str	r3, [r4, #16]
 800300e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003010:	f04f 0900 	mov.w	r9, #0
 8003014:	65a3      	str	r3, [r4, #88]	; 0x58
 8003016:	e7d9      	b.n	8002fcc <_printf_float+0x14c>
 8003018:	b913      	cbnz	r3, 8003020 <_printf_float+0x1a0>
 800301a:	6822      	ldr	r2, [r4, #0]
 800301c:	07d0      	lsls	r0, r2, #31
 800301e:	d501      	bpl.n	8003024 <_printf_float+0x1a4>
 8003020:	3302      	adds	r3, #2
 8003022:	e7f3      	b.n	800300c <_printf_float+0x18c>
 8003024:	2301      	movs	r3, #1
 8003026:	e7f1      	b.n	800300c <_printf_float+0x18c>
 8003028:	f04f 0867 	mov.w	r8, #103	; 0x67
 800302c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003030:	4293      	cmp	r3, r2
 8003032:	db05      	blt.n	8003040 <_printf_float+0x1c0>
 8003034:	6822      	ldr	r2, [r4, #0]
 8003036:	6123      	str	r3, [r4, #16]
 8003038:	07d1      	lsls	r1, r2, #31
 800303a:	d5e8      	bpl.n	800300e <_printf_float+0x18e>
 800303c:	3301      	adds	r3, #1
 800303e:	e7e5      	b.n	800300c <_printf_float+0x18c>
 8003040:	2b00      	cmp	r3, #0
 8003042:	bfcc      	ite	gt
 8003044:	2301      	movgt	r3, #1
 8003046:	f1c3 0302 	rsble	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	e7de      	b.n	800300c <_printf_float+0x18c>
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	055a      	lsls	r2, r3, #21
 8003052:	d407      	bmi.n	8003064 <_printf_float+0x1e4>
 8003054:	6923      	ldr	r3, [r4, #16]
 8003056:	463a      	mov	r2, r7
 8003058:	4659      	mov	r1, fp
 800305a:	4628      	mov	r0, r5
 800305c:	47b0      	blx	r6
 800305e:	3001      	adds	r0, #1
 8003060:	d129      	bne.n	80030b6 <_printf_float+0x236>
 8003062:	e764      	b.n	8002f2e <_printf_float+0xae>
 8003064:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003068:	f240 80d7 	bls.w	800321a <_printf_float+0x39a>
 800306c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003070:	2200      	movs	r2, #0
 8003072:	2300      	movs	r3, #0
 8003074:	f7fd fcb2 	bl	80009dc <__aeabi_dcmpeq>
 8003078:	b388      	cbz	r0, 80030de <_printf_float+0x25e>
 800307a:	2301      	movs	r3, #1
 800307c:	4a40      	ldr	r2, [pc, #256]	; (8003180 <_printf_float+0x300>)
 800307e:	4659      	mov	r1, fp
 8003080:	4628      	mov	r0, r5
 8003082:	47b0      	blx	r6
 8003084:	3001      	adds	r0, #1
 8003086:	f43f af52 	beq.w	8002f2e <_printf_float+0xae>
 800308a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800308e:	429a      	cmp	r2, r3
 8003090:	db02      	blt.n	8003098 <_printf_float+0x218>
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	07d8      	lsls	r0, r3, #31
 8003096:	d50e      	bpl.n	80030b6 <_printf_float+0x236>
 8003098:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800309c:	4659      	mov	r1, fp
 800309e:	4628      	mov	r0, r5
 80030a0:	47b0      	blx	r6
 80030a2:	3001      	adds	r0, #1
 80030a4:	f43f af43 	beq.w	8002f2e <_printf_float+0xae>
 80030a8:	2700      	movs	r7, #0
 80030aa:	f104 081a 	add.w	r8, r4, #26
 80030ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030b0:	3b01      	subs	r3, #1
 80030b2:	42bb      	cmp	r3, r7
 80030b4:	dc09      	bgt.n	80030ca <_printf_float+0x24a>
 80030b6:	6823      	ldr	r3, [r4, #0]
 80030b8:	079f      	lsls	r7, r3, #30
 80030ba:	f100 80fd 	bmi.w	80032b8 <_printf_float+0x438>
 80030be:	68e0      	ldr	r0, [r4, #12]
 80030c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80030c2:	4298      	cmp	r0, r3
 80030c4:	bfb8      	it	lt
 80030c6:	4618      	movlt	r0, r3
 80030c8:	e733      	b.n	8002f32 <_printf_float+0xb2>
 80030ca:	2301      	movs	r3, #1
 80030cc:	4642      	mov	r2, r8
 80030ce:	4659      	mov	r1, fp
 80030d0:	4628      	mov	r0, r5
 80030d2:	47b0      	blx	r6
 80030d4:	3001      	adds	r0, #1
 80030d6:	f43f af2a 	beq.w	8002f2e <_printf_float+0xae>
 80030da:	3701      	adds	r7, #1
 80030dc:	e7e7      	b.n	80030ae <_printf_float+0x22e>
 80030de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	dc2b      	bgt.n	800313c <_printf_float+0x2bc>
 80030e4:	2301      	movs	r3, #1
 80030e6:	4a26      	ldr	r2, [pc, #152]	; (8003180 <_printf_float+0x300>)
 80030e8:	4659      	mov	r1, fp
 80030ea:	4628      	mov	r0, r5
 80030ec:	47b0      	blx	r6
 80030ee:	3001      	adds	r0, #1
 80030f0:	f43f af1d 	beq.w	8002f2e <_printf_float+0xae>
 80030f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030f6:	b923      	cbnz	r3, 8003102 <_printf_float+0x282>
 80030f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030fa:	b913      	cbnz	r3, 8003102 <_printf_float+0x282>
 80030fc:	6823      	ldr	r3, [r4, #0]
 80030fe:	07d9      	lsls	r1, r3, #31
 8003100:	d5d9      	bpl.n	80030b6 <_printf_float+0x236>
 8003102:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003106:	4659      	mov	r1, fp
 8003108:	4628      	mov	r0, r5
 800310a:	47b0      	blx	r6
 800310c:	3001      	adds	r0, #1
 800310e:	f43f af0e 	beq.w	8002f2e <_printf_float+0xae>
 8003112:	f04f 0800 	mov.w	r8, #0
 8003116:	f104 091a 	add.w	r9, r4, #26
 800311a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800311c:	425b      	negs	r3, r3
 800311e:	4543      	cmp	r3, r8
 8003120:	dc01      	bgt.n	8003126 <_printf_float+0x2a6>
 8003122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003124:	e797      	b.n	8003056 <_printf_float+0x1d6>
 8003126:	2301      	movs	r3, #1
 8003128:	464a      	mov	r2, r9
 800312a:	4659      	mov	r1, fp
 800312c:	4628      	mov	r0, r5
 800312e:	47b0      	blx	r6
 8003130:	3001      	adds	r0, #1
 8003132:	f43f aefc 	beq.w	8002f2e <_printf_float+0xae>
 8003136:	f108 0801 	add.w	r8, r8, #1
 800313a:	e7ee      	b.n	800311a <_printf_float+0x29a>
 800313c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800313e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003140:	429a      	cmp	r2, r3
 8003142:	bfa8      	it	ge
 8003144:	461a      	movge	r2, r3
 8003146:	2a00      	cmp	r2, #0
 8003148:	4690      	mov	r8, r2
 800314a:	dd07      	ble.n	800315c <_printf_float+0x2dc>
 800314c:	4613      	mov	r3, r2
 800314e:	4659      	mov	r1, fp
 8003150:	463a      	mov	r2, r7
 8003152:	4628      	mov	r0, r5
 8003154:	47b0      	blx	r6
 8003156:	3001      	adds	r0, #1
 8003158:	f43f aee9 	beq.w	8002f2e <_printf_float+0xae>
 800315c:	f104 031a 	add.w	r3, r4, #26
 8003160:	f04f 0a00 	mov.w	sl, #0
 8003164:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003168:	930b      	str	r3, [sp, #44]	; 0x2c
 800316a:	e015      	b.n	8003198 <_printf_float+0x318>
 800316c:	7fefffff 	.word	0x7fefffff
 8003170:	080048e1 	.word	0x080048e1
 8003174:	080048dd 	.word	0x080048dd
 8003178:	080048e9 	.word	0x080048e9
 800317c:	080048e5 	.word	0x080048e5
 8003180:	080048ed 	.word	0x080048ed
 8003184:	2301      	movs	r3, #1
 8003186:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003188:	4659      	mov	r1, fp
 800318a:	4628      	mov	r0, r5
 800318c:	47b0      	blx	r6
 800318e:	3001      	adds	r0, #1
 8003190:	f43f aecd 	beq.w	8002f2e <_printf_float+0xae>
 8003194:	f10a 0a01 	add.w	sl, sl, #1
 8003198:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800319c:	eba9 0308 	sub.w	r3, r9, r8
 80031a0:	4553      	cmp	r3, sl
 80031a2:	dcef      	bgt.n	8003184 <_printf_float+0x304>
 80031a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80031a8:	429a      	cmp	r2, r3
 80031aa:	444f      	add	r7, r9
 80031ac:	db14      	blt.n	80031d8 <_printf_float+0x358>
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	07da      	lsls	r2, r3, #31
 80031b2:	d411      	bmi.n	80031d8 <_printf_float+0x358>
 80031b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80031b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80031b8:	eba3 0209 	sub.w	r2, r3, r9
 80031bc:	eba3 0901 	sub.w	r9, r3, r1
 80031c0:	4591      	cmp	r9, r2
 80031c2:	bfa8      	it	ge
 80031c4:	4691      	movge	r9, r2
 80031c6:	f1b9 0f00 	cmp.w	r9, #0
 80031ca:	dc0d      	bgt.n	80031e8 <_printf_float+0x368>
 80031cc:	2700      	movs	r7, #0
 80031ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80031d2:	f104 081a 	add.w	r8, r4, #26
 80031d6:	e018      	b.n	800320a <_printf_float+0x38a>
 80031d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80031dc:	4659      	mov	r1, fp
 80031de:	4628      	mov	r0, r5
 80031e0:	47b0      	blx	r6
 80031e2:	3001      	adds	r0, #1
 80031e4:	d1e6      	bne.n	80031b4 <_printf_float+0x334>
 80031e6:	e6a2      	b.n	8002f2e <_printf_float+0xae>
 80031e8:	464b      	mov	r3, r9
 80031ea:	463a      	mov	r2, r7
 80031ec:	4659      	mov	r1, fp
 80031ee:	4628      	mov	r0, r5
 80031f0:	47b0      	blx	r6
 80031f2:	3001      	adds	r0, #1
 80031f4:	d1ea      	bne.n	80031cc <_printf_float+0x34c>
 80031f6:	e69a      	b.n	8002f2e <_printf_float+0xae>
 80031f8:	2301      	movs	r3, #1
 80031fa:	4642      	mov	r2, r8
 80031fc:	4659      	mov	r1, fp
 80031fe:	4628      	mov	r0, r5
 8003200:	47b0      	blx	r6
 8003202:	3001      	adds	r0, #1
 8003204:	f43f ae93 	beq.w	8002f2e <_printf_float+0xae>
 8003208:	3701      	adds	r7, #1
 800320a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	eba3 0309 	sub.w	r3, r3, r9
 8003214:	42bb      	cmp	r3, r7
 8003216:	dcef      	bgt.n	80031f8 <_printf_float+0x378>
 8003218:	e74d      	b.n	80030b6 <_printf_float+0x236>
 800321a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800321c:	2a01      	cmp	r2, #1
 800321e:	dc01      	bgt.n	8003224 <_printf_float+0x3a4>
 8003220:	07db      	lsls	r3, r3, #31
 8003222:	d538      	bpl.n	8003296 <_printf_float+0x416>
 8003224:	2301      	movs	r3, #1
 8003226:	463a      	mov	r2, r7
 8003228:	4659      	mov	r1, fp
 800322a:	4628      	mov	r0, r5
 800322c:	47b0      	blx	r6
 800322e:	3001      	adds	r0, #1
 8003230:	f43f ae7d 	beq.w	8002f2e <_printf_float+0xae>
 8003234:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003238:	4659      	mov	r1, fp
 800323a:	4628      	mov	r0, r5
 800323c:	47b0      	blx	r6
 800323e:	3001      	adds	r0, #1
 8003240:	f107 0701 	add.w	r7, r7, #1
 8003244:	f43f ae73 	beq.w	8002f2e <_printf_float+0xae>
 8003248:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800324c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800324e:	2200      	movs	r2, #0
 8003250:	f103 38ff 	add.w	r8, r3, #4294967295
 8003254:	2300      	movs	r3, #0
 8003256:	f7fd fbc1 	bl	80009dc <__aeabi_dcmpeq>
 800325a:	b9c0      	cbnz	r0, 800328e <_printf_float+0x40e>
 800325c:	4643      	mov	r3, r8
 800325e:	463a      	mov	r2, r7
 8003260:	4659      	mov	r1, fp
 8003262:	4628      	mov	r0, r5
 8003264:	47b0      	blx	r6
 8003266:	3001      	adds	r0, #1
 8003268:	d10d      	bne.n	8003286 <_printf_float+0x406>
 800326a:	e660      	b.n	8002f2e <_printf_float+0xae>
 800326c:	2301      	movs	r3, #1
 800326e:	4642      	mov	r2, r8
 8003270:	4659      	mov	r1, fp
 8003272:	4628      	mov	r0, r5
 8003274:	47b0      	blx	r6
 8003276:	3001      	adds	r0, #1
 8003278:	f43f ae59 	beq.w	8002f2e <_printf_float+0xae>
 800327c:	3701      	adds	r7, #1
 800327e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003280:	3b01      	subs	r3, #1
 8003282:	42bb      	cmp	r3, r7
 8003284:	dcf2      	bgt.n	800326c <_printf_float+0x3ec>
 8003286:	464b      	mov	r3, r9
 8003288:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800328c:	e6e4      	b.n	8003058 <_printf_float+0x1d8>
 800328e:	2700      	movs	r7, #0
 8003290:	f104 081a 	add.w	r8, r4, #26
 8003294:	e7f3      	b.n	800327e <_printf_float+0x3fe>
 8003296:	2301      	movs	r3, #1
 8003298:	e7e1      	b.n	800325e <_printf_float+0x3de>
 800329a:	2301      	movs	r3, #1
 800329c:	4642      	mov	r2, r8
 800329e:	4659      	mov	r1, fp
 80032a0:	4628      	mov	r0, r5
 80032a2:	47b0      	blx	r6
 80032a4:	3001      	adds	r0, #1
 80032a6:	f43f ae42 	beq.w	8002f2e <_printf_float+0xae>
 80032aa:	3701      	adds	r7, #1
 80032ac:	68e3      	ldr	r3, [r4, #12]
 80032ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80032b0:	1a9b      	subs	r3, r3, r2
 80032b2:	42bb      	cmp	r3, r7
 80032b4:	dcf1      	bgt.n	800329a <_printf_float+0x41a>
 80032b6:	e702      	b.n	80030be <_printf_float+0x23e>
 80032b8:	2700      	movs	r7, #0
 80032ba:	f104 0819 	add.w	r8, r4, #25
 80032be:	e7f5      	b.n	80032ac <_printf_float+0x42c>
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f43f ae94 	beq.w	8002fee <_printf_float+0x16e>
 80032c6:	f04f 0c00 	mov.w	ip, #0
 80032ca:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80032ce:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80032d2:	6022      	str	r2, [r4, #0]
 80032d4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80032d8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	463a      	mov	r2, r7
 80032e0:	464b      	mov	r3, r9
 80032e2:	4628      	mov	r0, r5
 80032e4:	f7ff fd3a 	bl	8002d5c <__cvt>
 80032e8:	4607      	mov	r7, r0
 80032ea:	e64f      	b.n	8002f8c <_printf_float+0x10c>

080032ec <_printf_common>:
 80032ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032f0:	4691      	mov	r9, r2
 80032f2:	461f      	mov	r7, r3
 80032f4:	688a      	ldr	r2, [r1, #8]
 80032f6:	690b      	ldr	r3, [r1, #16]
 80032f8:	4606      	mov	r6, r0
 80032fa:	4293      	cmp	r3, r2
 80032fc:	bfb8      	it	lt
 80032fe:	4613      	movlt	r3, r2
 8003300:	f8c9 3000 	str.w	r3, [r9]
 8003304:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003308:	460c      	mov	r4, r1
 800330a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800330e:	b112      	cbz	r2, 8003316 <_printf_common+0x2a>
 8003310:	3301      	adds	r3, #1
 8003312:	f8c9 3000 	str.w	r3, [r9]
 8003316:	6823      	ldr	r3, [r4, #0]
 8003318:	0699      	lsls	r1, r3, #26
 800331a:	bf42      	ittt	mi
 800331c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003320:	3302      	addmi	r3, #2
 8003322:	f8c9 3000 	strmi.w	r3, [r9]
 8003326:	6825      	ldr	r5, [r4, #0]
 8003328:	f015 0506 	ands.w	r5, r5, #6
 800332c:	d107      	bne.n	800333e <_printf_common+0x52>
 800332e:	f104 0a19 	add.w	sl, r4, #25
 8003332:	68e3      	ldr	r3, [r4, #12]
 8003334:	f8d9 2000 	ldr.w	r2, [r9]
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	42ab      	cmp	r3, r5
 800333c:	dc29      	bgt.n	8003392 <_printf_common+0xa6>
 800333e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003342:	6822      	ldr	r2, [r4, #0]
 8003344:	3300      	adds	r3, #0
 8003346:	bf18      	it	ne
 8003348:	2301      	movne	r3, #1
 800334a:	0692      	lsls	r2, r2, #26
 800334c:	d42e      	bmi.n	80033ac <_printf_common+0xc0>
 800334e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003352:	4639      	mov	r1, r7
 8003354:	4630      	mov	r0, r6
 8003356:	47c0      	blx	r8
 8003358:	3001      	adds	r0, #1
 800335a:	d021      	beq.n	80033a0 <_printf_common+0xb4>
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	68e5      	ldr	r5, [r4, #12]
 8003360:	f003 0306 	and.w	r3, r3, #6
 8003364:	2b04      	cmp	r3, #4
 8003366:	bf18      	it	ne
 8003368:	2500      	movne	r5, #0
 800336a:	f8d9 2000 	ldr.w	r2, [r9]
 800336e:	f04f 0900 	mov.w	r9, #0
 8003372:	bf08      	it	eq
 8003374:	1aad      	subeq	r5, r5, r2
 8003376:	68a3      	ldr	r3, [r4, #8]
 8003378:	6922      	ldr	r2, [r4, #16]
 800337a:	bf08      	it	eq
 800337c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003380:	4293      	cmp	r3, r2
 8003382:	bfc4      	itt	gt
 8003384:	1a9b      	subgt	r3, r3, r2
 8003386:	18ed      	addgt	r5, r5, r3
 8003388:	341a      	adds	r4, #26
 800338a:	454d      	cmp	r5, r9
 800338c:	d11a      	bne.n	80033c4 <_printf_common+0xd8>
 800338e:	2000      	movs	r0, #0
 8003390:	e008      	b.n	80033a4 <_printf_common+0xb8>
 8003392:	2301      	movs	r3, #1
 8003394:	4652      	mov	r2, sl
 8003396:	4639      	mov	r1, r7
 8003398:	4630      	mov	r0, r6
 800339a:	47c0      	blx	r8
 800339c:	3001      	adds	r0, #1
 800339e:	d103      	bne.n	80033a8 <_printf_common+0xbc>
 80033a0:	f04f 30ff 	mov.w	r0, #4294967295
 80033a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033a8:	3501      	adds	r5, #1
 80033aa:	e7c2      	b.n	8003332 <_printf_common+0x46>
 80033ac:	2030      	movs	r0, #48	; 0x30
 80033ae:	18e1      	adds	r1, r4, r3
 80033b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033b4:	1c5a      	adds	r2, r3, #1
 80033b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033ba:	4422      	add	r2, r4
 80033bc:	3302      	adds	r3, #2
 80033be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033c2:	e7c4      	b.n	800334e <_printf_common+0x62>
 80033c4:	2301      	movs	r3, #1
 80033c6:	4622      	mov	r2, r4
 80033c8:	4639      	mov	r1, r7
 80033ca:	4630      	mov	r0, r6
 80033cc:	47c0      	blx	r8
 80033ce:	3001      	adds	r0, #1
 80033d0:	d0e6      	beq.n	80033a0 <_printf_common+0xb4>
 80033d2:	f109 0901 	add.w	r9, r9, #1
 80033d6:	e7d8      	b.n	800338a <_printf_common+0x9e>

080033d8 <quorem>:
 80033d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033dc:	6903      	ldr	r3, [r0, #16]
 80033de:	690c      	ldr	r4, [r1, #16]
 80033e0:	4680      	mov	r8, r0
 80033e2:	42a3      	cmp	r3, r4
 80033e4:	f2c0 8084 	blt.w	80034f0 <quorem+0x118>
 80033e8:	3c01      	subs	r4, #1
 80033ea:	f101 0714 	add.w	r7, r1, #20
 80033ee:	f100 0614 	add.w	r6, r0, #20
 80033f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80033f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80033fa:	3501      	adds	r5, #1
 80033fc:	fbb0 f5f5 	udiv	r5, r0, r5
 8003400:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003404:	eb06 030c 	add.w	r3, r6, ip
 8003408:	eb07 090c 	add.w	r9, r7, ip
 800340c:	9301      	str	r3, [sp, #4]
 800340e:	b39d      	cbz	r5, 8003478 <quorem+0xa0>
 8003410:	f04f 0a00 	mov.w	sl, #0
 8003414:	4638      	mov	r0, r7
 8003416:	46b6      	mov	lr, r6
 8003418:	46d3      	mov	fp, sl
 800341a:	f850 2b04 	ldr.w	r2, [r0], #4
 800341e:	b293      	uxth	r3, r2
 8003420:	fb05 a303 	mla	r3, r5, r3, sl
 8003424:	0c12      	lsrs	r2, r2, #16
 8003426:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800342a:	fb05 a202 	mla	r2, r5, r2, sl
 800342e:	b29b      	uxth	r3, r3
 8003430:	ebab 0303 	sub.w	r3, fp, r3
 8003434:	f8de b000 	ldr.w	fp, [lr]
 8003438:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800343c:	fa1f fb8b 	uxth.w	fp, fp
 8003440:	445b      	add	r3, fp
 8003442:	fa1f fb82 	uxth.w	fp, r2
 8003446:	f8de 2000 	ldr.w	r2, [lr]
 800344a:	4581      	cmp	r9, r0
 800344c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003450:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003454:	b29b      	uxth	r3, r3
 8003456:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800345a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800345e:	f84e 3b04 	str.w	r3, [lr], #4
 8003462:	d2da      	bcs.n	800341a <quorem+0x42>
 8003464:	f856 300c 	ldr.w	r3, [r6, ip]
 8003468:	b933      	cbnz	r3, 8003478 <quorem+0xa0>
 800346a:	9b01      	ldr	r3, [sp, #4]
 800346c:	3b04      	subs	r3, #4
 800346e:	429e      	cmp	r6, r3
 8003470:	461a      	mov	r2, r3
 8003472:	d331      	bcc.n	80034d8 <quorem+0x100>
 8003474:	f8c8 4010 	str.w	r4, [r8, #16]
 8003478:	4640      	mov	r0, r8
 800347a:	f001 f827 	bl	80044cc <__mcmp>
 800347e:	2800      	cmp	r0, #0
 8003480:	db26      	blt.n	80034d0 <quorem+0xf8>
 8003482:	4630      	mov	r0, r6
 8003484:	f04f 0c00 	mov.w	ip, #0
 8003488:	3501      	adds	r5, #1
 800348a:	f857 1b04 	ldr.w	r1, [r7], #4
 800348e:	f8d0 e000 	ldr.w	lr, [r0]
 8003492:	b28b      	uxth	r3, r1
 8003494:	ebac 0303 	sub.w	r3, ip, r3
 8003498:	fa1f f28e 	uxth.w	r2, lr
 800349c:	4413      	add	r3, r2
 800349e:	0c0a      	lsrs	r2, r1, #16
 80034a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80034a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80034ae:	45b9      	cmp	r9, r7
 80034b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80034b4:	f840 3b04 	str.w	r3, [r0], #4
 80034b8:	d2e7      	bcs.n	800348a <quorem+0xb2>
 80034ba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80034be:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80034c2:	b92a      	cbnz	r2, 80034d0 <quorem+0xf8>
 80034c4:	3b04      	subs	r3, #4
 80034c6:	429e      	cmp	r6, r3
 80034c8:	461a      	mov	r2, r3
 80034ca:	d30b      	bcc.n	80034e4 <quorem+0x10c>
 80034cc:	f8c8 4010 	str.w	r4, [r8, #16]
 80034d0:	4628      	mov	r0, r5
 80034d2:	b003      	add	sp, #12
 80034d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	3b04      	subs	r3, #4
 80034dc:	2a00      	cmp	r2, #0
 80034de:	d1c9      	bne.n	8003474 <quorem+0x9c>
 80034e0:	3c01      	subs	r4, #1
 80034e2:	e7c4      	b.n	800346e <quorem+0x96>
 80034e4:	6812      	ldr	r2, [r2, #0]
 80034e6:	3b04      	subs	r3, #4
 80034e8:	2a00      	cmp	r2, #0
 80034ea:	d1ef      	bne.n	80034cc <quorem+0xf4>
 80034ec:	3c01      	subs	r4, #1
 80034ee:	e7ea      	b.n	80034c6 <quorem+0xee>
 80034f0:	2000      	movs	r0, #0
 80034f2:	e7ee      	b.n	80034d2 <quorem+0xfa>
 80034f4:	0000      	movs	r0, r0
	...

080034f8 <_dtoa_r>:
 80034f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034fc:	4616      	mov	r6, r2
 80034fe:	461f      	mov	r7, r3
 8003500:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003502:	b095      	sub	sp, #84	; 0x54
 8003504:	4604      	mov	r4, r0
 8003506:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800350a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800350e:	b93d      	cbnz	r5, 8003520 <_dtoa_r+0x28>
 8003510:	2010      	movs	r0, #16
 8003512:	f000 fdb3 	bl	800407c <malloc>
 8003516:	6260      	str	r0, [r4, #36]	; 0x24
 8003518:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800351c:	6005      	str	r5, [r0, #0]
 800351e:	60c5      	str	r5, [r0, #12]
 8003520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003522:	6819      	ldr	r1, [r3, #0]
 8003524:	b151      	cbz	r1, 800353c <_dtoa_r+0x44>
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	2301      	movs	r3, #1
 800352a:	4093      	lsls	r3, r2
 800352c:	604a      	str	r2, [r1, #4]
 800352e:	608b      	str	r3, [r1, #8]
 8003530:	4620      	mov	r0, r4
 8003532:	f000 fdea 	bl	800410a <_Bfree>
 8003536:	2200      	movs	r2, #0
 8003538:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	1e3b      	subs	r3, r7, #0
 800353e:	bfaf      	iteee	ge
 8003540:	2300      	movge	r3, #0
 8003542:	2201      	movlt	r2, #1
 8003544:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003548:	9303      	strlt	r3, [sp, #12]
 800354a:	bfac      	ite	ge
 800354c:	f8c8 3000 	strge.w	r3, [r8]
 8003550:	f8c8 2000 	strlt.w	r2, [r8]
 8003554:	4bae      	ldr	r3, [pc, #696]	; (8003810 <_dtoa_r+0x318>)
 8003556:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800355a:	ea33 0308 	bics.w	r3, r3, r8
 800355e:	d11b      	bne.n	8003598 <_dtoa_r+0xa0>
 8003560:	f242 730f 	movw	r3, #9999	; 0x270f
 8003564:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	9b02      	ldr	r3, [sp, #8]
 800356a:	b923      	cbnz	r3, 8003576 <_dtoa_r+0x7e>
 800356c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003570:	2800      	cmp	r0, #0
 8003572:	f000 8545 	beq.w	8004000 <_dtoa_r+0xb08>
 8003576:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003578:	b953      	cbnz	r3, 8003590 <_dtoa_r+0x98>
 800357a:	4ba6      	ldr	r3, [pc, #664]	; (8003814 <_dtoa_r+0x31c>)
 800357c:	e021      	b.n	80035c2 <_dtoa_r+0xca>
 800357e:	4ba6      	ldr	r3, [pc, #664]	; (8003818 <_dtoa_r+0x320>)
 8003580:	9306      	str	r3, [sp, #24]
 8003582:	3308      	adds	r3, #8
 8003584:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	9806      	ldr	r0, [sp, #24]
 800358a:	b015      	add	sp, #84	; 0x54
 800358c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003590:	4ba0      	ldr	r3, [pc, #640]	; (8003814 <_dtoa_r+0x31c>)
 8003592:	9306      	str	r3, [sp, #24]
 8003594:	3303      	adds	r3, #3
 8003596:	e7f5      	b.n	8003584 <_dtoa_r+0x8c>
 8003598:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800359c:	2200      	movs	r2, #0
 800359e:	2300      	movs	r3, #0
 80035a0:	4630      	mov	r0, r6
 80035a2:	4639      	mov	r1, r7
 80035a4:	f7fd fa1a 	bl	80009dc <__aeabi_dcmpeq>
 80035a8:	4682      	mov	sl, r0
 80035aa:	b160      	cbz	r0, 80035c6 <_dtoa_r+0xce>
 80035ac:	2301      	movs	r3, #1
 80035ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 8520 	beq.w	8003ffa <_dtoa_r+0xb02>
 80035ba:	4b98      	ldr	r3, [pc, #608]	; (800381c <_dtoa_r+0x324>)
 80035bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80035be:	6013      	str	r3, [r2, #0]
 80035c0:	3b01      	subs	r3, #1
 80035c2:	9306      	str	r3, [sp, #24]
 80035c4:	e7e0      	b.n	8003588 <_dtoa_r+0x90>
 80035c6:	ab12      	add	r3, sp, #72	; 0x48
 80035c8:	9301      	str	r3, [sp, #4]
 80035ca:	ab13      	add	r3, sp, #76	; 0x4c
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	4632      	mov	r2, r6
 80035d0:	463b      	mov	r3, r7
 80035d2:	4620      	mov	r0, r4
 80035d4:	f000 fff2 	bl	80045bc <__d2b>
 80035d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80035dc:	4683      	mov	fp, r0
 80035de:	2d00      	cmp	r5, #0
 80035e0:	d07d      	beq.n	80036de <_dtoa_r+0x1e6>
 80035e2:	46b0      	mov	r8, r6
 80035e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80035e8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80035ec:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80035f0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80035f4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80035f8:	2200      	movs	r2, #0
 80035fa:	4b89      	ldr	r3, [pc, #548]	; (8003820 <_dtoa_r+0x328>)
 80035fc:	4640      	mov	r0, r8
 80035fe:	4649      	mov	r1, r9
 8003600:	f7fc fdcc 	bl	800019c <__aeabi_dsub>
 8003604:	a37c      	add	r3, pc, #496	; (adr r3, 80037f8 <_dtoa_r+0x300>)
 8003606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360a:	f7fc ff7f 	bl	800050c <__aeabi_dmul>
 800360e:	a37c      	add	r3, pc, #496	; (adr r3, 8003800 <_dtoa_r+0x308>)
 8003610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003614:	f7fc fdc4 	bl	80001a0 <__adddf3>
 8003618:	4606      	mov	r6, r0
 800361a:	4628      	mov	r0, r5
 800361c:	460f      	mov	r7, r1
 800361e:	f7fc ff0b 	bl	8000438 <__aeabi_i2d>
 8003622:	a379      	add	r3, pc, #484	; (adr r3, 8003808 <_dtoa_r+0x310>)
 8003624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003628:	f7fc ff70 	bl	800050c <__aeabi_dmul>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4630      	mov	r0, r6
 8003632:	4639      	mov	r1, r7
 8003634:	f7fc fdb4 	bl	80001a0 <__adddf3>
 8003638:	4606      	mov	r6, r0
 800363a:	460f      	mov	r7, r1
 800363c:	f7fd fa16 	bl	8000a6c <__aeabi_d2iz>
 8003640:	2200      	movs	r2, #0
 8003642:	4682      	mov	sl, r0
 8003644:	2300      	movs	r3, #0
 8003646:	4630      	mov	r0, r6
 8003648:	4639      	mov	r1, r7
 800364a:	f7fd f9d1 	bl	80009f0 <__aeabi_dcmplt>
 800364e:	b148      	cbz	r0, 8003664 <_dtoa_r+0x16c>
 8003650:	4650      	mov	r0, sl
 8003652:	f7fc fef1 	bl	8000438 <__aeabi_i2d>
 8003656:	4632      	mov	r2, r6
 8003658:	463b      	mov	r3, r7
 800365a:	f7fd f9bf 	bl	80009dc <__aeabi_dcmpeq>
 800365e:	b908      	cbnz	r0, 8003664 <_dtoa_r+0x16c>
 8003660:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003664:	f1ba 0f16 	cmp.w	sl, #22
 8003668:	d85a      	bhi.n	8003720 <_dtoa_r+0x228>
 800366a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800366e:	496d      	ldr	r1, [pc, #436]	; (8003824 <_dtoa_r+0x32c>)
 8003670:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003674:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003678:	f7fd f9d8 	bl	8000a2c <__aeabi_dcmpgt>
 800367c:	2800      	cmp	r0, #0
 800367e:	d051      	beq.n	8003724 <_dtoa_r+0x22c>
 8003680:	2300      	movs	r3, #0
 8003682:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003686:	930d      	str	r3, [sp, #52]	; 0x34
 8003688:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800368a:	1b5d      	subs	r5, r3, r5
 800368c:	1e6b      	subs	r3, r5, #1
 800368e:	9307      	str	r3, [sp, #28]
 8003690:	bf43      	ittte	mi
 8003692:	2300      	movmi	r3, #0
 8003694:	f1c5 0901 	rsbmi	r9, r5, #1
 8003698:	9307      	strmi	r3, [sp, #28]
 800369a:	f04f 0900 	movpl.w	r9, #0
 800369e:	f1ba 0f00 	cmp.w	sl, #0
 80036a2:	db41      	blt.n	8003728 <_dtoa_r+0x230>
 80036a4:	9b07      	ldr	r3, [sp, #28]
 80036a6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80036aa:	4453      	add	r3, sl
 80036ac:	9307      	str	r3, [sp, #28]
 80036ae:	2300      	movs	r3, #0
 80036b0:	9308      	str	r3, [sp, #32]
 80036b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80036b4:	2b09      	cmp	r3, #9
 80036b6:	f200 808f 	bhi.w	80037d8 <_dtoa_r+0x2e0>
 80036ba:	2b05      	cmp	r3, #5
 80036bc:	bfc4      	itt	gt
 80036be:	3b04      	subgt	r3, #4
 80036c0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80036c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80036c4:	bfc8      	it	gt
 80036c6:	2500      	movgt	r5, #0
 80036c8:	f1a3 0302 	sub.w	r3, r3, #2
 80036cc:	bfd8      	it	le
 80036ce:	2501      	movle	r5, #1
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	f200 808d 	bhi.w	80037f0 <_dtoa_r+0x2f8>
 80036d6:	e8df f003 	tbb	[pc, r3]
 80036da:	7d7b      	.short	0x7d7b
 80036dc:	6f2f      	.short	0x6f2f
 80036de:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80036e2:	441d      	add	r5, r3
 80036e4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80036e8:	2820      	cmp	r0, #32
 80036ea:	dd13      	ble.n	8003714 <_dtoa_r+0x21c>
 80036ec:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80036f0:	9b02      	ldr	r3, [sp, #8]
 80036f2:	fa08 f800 	lsl.w	r8, r8, r0
 80036f6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80036fa:	fa23 f000 	lsr.w	r0, r3, r0
 80036fe:	ea48 0000 	orr.w	r0, r8, r0
 8003702:	f7fc fe89 	bl	8000418 <__aeabi_ui2d>
 8003706:	2301      	movs	r3, #1
 8003708:	4680      	mov	r8, r0
 800370a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800370e:	3d01      	subs	r5, #1
 8003710:	9310      	str	r3, [sp, #64]	; 0x40
 8003712:	e771      	b.n	80035f8 <_dtoa_r+0x100>
 8003714:	9b02      	ldr	r3, [sp, #8]
 8003716:	f1c0 0020 	rsb	r0, r0, #32
 800371a:	fa03 f000 	lsl.w	r0, r3, r0
 800371e:	e7f0      	b.n	8003702 <_dtoa_r+0x20a>
 8003720:	2301      	movs	r3, #1
 8003722:	e7b0      	b.n	8003686 <_dtoa_r+0x18e>
 8003724:	900d      	str	r0, [sp, #52]	; 0x34
 8003726:	e7af      	b.n	8003688 <_dtoa_r+0x190>
 8003728:	f1ca 0300 	rsb	r3, sl, #0
 800372c:	9308      	str	r3, [sp, #32]
 800372e:	2300      	movs	r3, #0
 8003730:	eba9 090a 	sub.w	r9, r9, sl
 8003734:	930c      	str	r3, [sp, #48]	; 0x30
 8003736:	e7bc      	b.n	80036b2 <_dtoa_r+0x1ba>
 8003738:	2301      	movs	r3, #1
 800373a:	9309      	str	r3, [sp, #36]	; 0x24
 800373c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800373e:	2b00      	cmp	r3, #0
 8003740:	dd74      	ble.n	800382c <_dtoa_r+0x334>
 8003742:	4698      	mov	r8, r3
 8003744:	9304      	str	r3, [sp, #16]
 8003746:	2200      	movs	r2, #0
 8003748:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800374a:	6072      	str	r2, [r6, #4]
 800374c:	2204      	movs	r2, #4
 800374e:	f102 0014 	add.w	r0, r2, #20
 8003752:	4298      	cmp	r0, r3
 8003754:	6871      	ldr	r1, [r6, #4]
 8003756:	d96e      	bls.n	8003836 <_dtoa_r+0x33e>
 8003758:	4620      	mov	r0, r4
 800375a:	f000 fca2 	bl	80040a2 <_Balloc>
 800375e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003760:	6030      	str	r0, [r6, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f1b8 0f0e 	cmp.w	r8, #14
 8003768:	9306      	str	r3, [sp, #24]
 800376a:	f200 80ed 	bhi.w	8003948 <_dtoa_r+0x450>
 800376e:	2d00      	cmp	r5, #0
 8003770:	f000 80ea 	beq.w	8003948 <_dtoa_r+0x450>
 8003774:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003778:	f1ba 0f00 	cmp.w	sl, #0
 800377c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003780:	dd77      	ble.n	8003872 <_dtoa_r+0x37a>
 8003782:	4a28      	ldr	r2, [pc, #160]	; (8003824 <_dtoa_r+0x32c>)
 8003784:	f00a 030f 	and.w	r3, sl, #15
 8003788:	ea4f 162a 	mov.w	r6, sl, asr #4
 800378c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003790:	06f0      	lsls	r0, r6, #27
 8003792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003796:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800379a:	d568      	bpl.n	800386e <_dtoa_r+0x376>
 800379c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80037a0:	4b21      	ldr	r3, [pc, #132]	; (8003828 <_dtoa_r+0x330>)
 80037a2:	2503      	movs	r5, #3
 80037a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80037a8:	f7fc ffda 	bl	8000760 <__aeabi_ddiv>
 80037ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80037b0:	f006 060f 	and.w	r6, r6, #15
 80037b4:	4f1c      	ldr	r7, [pc, #112]	; (8003828 <_dtoa_r+0x330>)
 80037b6:	e04f      	b.n	8003858 <_dtoa_r+0x360>
 80037b8:	2301      	movs	r3, #1
 80037ba:	9309      	str	r3, [sp, #36]	; 0x24
 80037bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80037be:	4453      	add	r3, sl
 80037c0:	f103 0801 	add.w	r8, r3, #1
 80037c4:	9304      	str	r3, [sp, #16]
 80037c6:	4643      	mov	r3, r8
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	bfb8      	it	lt
 80037cc:	2301      	movlt	r3, #1
 80037ce:	e7ba      	b.n	8003746 <_dtoa_r+0x24e>
 80037d0:	2300      	movs	r3, #0
 80037d2:	e7b2      	b.n	800373a <_dtoa_r+0x242>
 80037d4:	2300      	movs	r3, #0
 80037d6:	e7f0      	b.n	80037ba <_dtoa_r+0x2c2>
 80037d8:	2501      	movs	r5, #1
 80037da:	2300      	movs	r3, #0
 80037dc:	9509      	str	r5, [sp, #36]	; 0x24
 80037de:	931e      	str	r3, [sp, #120]	; 0x78
 80037e0:	f04f 33ff 	mov.w	r3, #4294967295
 80037e4:	2200      	movs	r2, #0
 80037e6:	9304      	str	r3, [sp, #16]
 80037e8:	4698      	mov	r8, r3
 80037ea:	2312      	movs	r3, #18
 80037ec:	921f      	str	r2, [sp, #124]	; 0x7c
 80037ee:	e7aa      	b.n	8003746 <_dtoa_r+0x24e>
 80037f0:	2301      	movs	r3, #1
 80037f2:	9309      	str	r3, [sp, #36]	; 0x24
 80037f4:	e7f4      	b.n	80037e0 <_dtoa_r+0x2e8>
 80037f6:	bf00      	nop
 80037f8:	636f4361 	.word	0x636f4361
 80037fc:	3fd287a7 	.word	0x3fd287a7
 8003800:	8b60c8b3 	.word	0x8b60c8b3
 8003804:	3fc68a28 	.word	0x3fc68a28
 8003808:	509f79fb 	.word	0x509f79fb
 800380c:	3fd34413 	.word	0x3fd34413
 8003810:	7ff00000 	.word	0x7ff00000
 8003814:	080048f8 	.word	0x080048f8
 8003818:	080048ef 	.word	0x080048ef
 800381c:	080048ee 	.word	0x080048ee
 8003820:	3ff80000 	.word	0x3ff80000
 8003824:	08004928 	.word	0x08004928
 8003828:	08004900 	.word	0x08004900
 800382c:	2301      	movs	r3, #1
 800382e:	9304      	str	r3, [sp, #16]
 8003830:	4698      	mov	r8, r3
 8003832:	461a      	mov	r2, r3
 8003834:	e7da      	b.n	80037ec <_dtoa_r+0x2f4>
 8003836:	3101      	adds	r1, #1
 8003838:	6071      	str	r1, [r6, #4]
 800383a:	0052      	lsls	r2, r2, #1
 800383c:	e787      	b.n	800374e <_dtoa_r+0x256>
 800383e:	07f1      	lsls	r1, r6, #31
 8003840:	d508      	bpl.n	8003854 <_dtoa_r+0x35c>
 8003842:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003846:	e9d7 2300 	ldrd	r2, r3, [r7]
 800384a:	f7fc fe5f 	bl	800050c <__aeabi_dmul>
 800384e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003852:	3501      	adds	r5, #1
 8003854:	1076      	asrs	r6, r6, #1
 8003856:	3708      	adds	r7, #8
 8003858:	2e00      	cmp	r6, #0
 800385a:	d1f0      	bne.n	800383e <_dtoa_r+0x346>
 800385c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003860:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003864:	f7fc ff7c 	bl	8000760 <__aeabi_ddiv>
 8003868:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800386c:	e01b      	b.n	80038a6 <_dtoa_r+0x3ae>
 800386e:	2502      	movs	r5, #2
 8003870:	e7a0      	b.n	80037b4 <_dtoa_r+0x2bc>
 8003872:	f000 80a4 	beq.w	80039be <_dtoa_r+0x4c6>
 8003876:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800387a:	f1ca 0600 	rsb	r6, sl, #0
 800387e:	4ba0      	ldr	r3, [pc, #640]	; (8003b00 <_dtoa_r+0x608>)
 8003880:	f006 020f 	and.w	r2, r6, #15
 8003884:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388c:	f7fc fe3e 	bl	800050c <__aeabi_dmul>
 8003890:	2502      	movs	r5, #2
 8003892:	2300      	movs	r3, #0
 8003894:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003898:	4f9a      	ldr	r7, [pc, #616]	; (8003b04 <_dtoa_r+0x60c>)
 800389a:	1136      	asrs	r6, r6, #4
 800389c:	2e00      	cmp	r6, #0
 800389e:	f040 8083 	bne.w	80039a8 <_dtoa_r+0x4b0>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1e0      	bne.n	8003868 <_dtoa_r+0x370>
 80038a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 808a 	beq.w	80039c2 <_dtoa_r+0x4ca>
 80038ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80038b2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80038b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80038ba:	2200      	movs	r2, #0
 80038bc:	4b92      	ldr	r3, [pc, #584]	; (8003b08 <_dtoa_r+0x610>)
 80038be:	f7fd f897 	bl	80009f0 <__aeabi_dcmplt>
 80038c2:	2800      	cmp	r0, #0
 80038c4:	d07d      	beq.n	80039c2 <_dtoa_r+0x4ca>
 80038c6:	f1b8 0f00 	cmp.w	r8, #0
 80038ca:	d07a      	beq.n	80039c2 <_dtoa_r+0x4ca>
 80038cc:	9b04      	ldr	r3, [sp, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	dd36      	ble.n	8003940 <_dtoa_r+0x448>
 80038d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80038d6:	2200      	movs	r2, #0
 80038d8:	4b8c      	ldr	r3, [pc, #560]	; (8003b0c <_dtoa_r+0x614>)
 80038da:	f7fc fe17 	bl	800050c <__aeabi_dmul>
 80038de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80038e2:	9e04      	ldr	r6, [sp, #16]
 80038e4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80038e8:	3501      	adds	r5, #1
 80038ea:	4628      	mov	r0, r5
 80038ec:	f7fc fda4 	bl	8000438 <__aeabi_i2d>
 80038f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80038f4:	f7fc fe0a 	bl	800050c <__aeabi_dmul>
 80038f8:	2200      	movs	r2, #0
 80038fa:	4b85      	ldr	r3, [pc, #532]	; (8003b10 <_dtoa_r+0x618>)
 80038fc:	f7fc fc50 	bl	80001a0 <__adddf3>
 8003900:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003904:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003908:	950b      	str	r5, [sp, #44]	; 0x2c
 800390a:	2e00      	cmp	r6, #0
 800390c:	d15c      	bne.n	80039c8 <_dtoa_r+0x4d0>
 800390e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003912:	2200      	movs	r2, #0
 8003914:	4b7f      	ldr	r3, [pc, #508]	; (8003b14 <_dtoa_r+0x61c>)
 8003916:	f7fc fc41 	bl	800019c <__aeabi_dsub>
 800391a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800391c:	462b      	mov	r3, r5
 800391e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003922:	f7fd f883 	bl	8000a2c <__aeabi_dcmpgt>
 8003926:	2800      	cmp	r0, #0
 8003928:	f040 8281 	bne.w	8003e2e <_dtoa_r+0x936>
 800392c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003932:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003936:	f7fd f85b 	bl	80009f0 <__aeabi_dcmplt>
 800393a:	2800      	cmp	r0, #0
 800393c:	f040 8275 	bne.w	8003e2a <_dtoa_r+0x932>
 8003940:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003944:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003948:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800394a:	2b00      	cmp	r3, #0
 800394c:	f2c0 814b 	blt.w	8003be6 <_dtoa_r+0x6ee>
 8003950:	f1ba 0f0e 	cmp.w	sl, #14
 8003954:	f300 8147 	bgt.w	8003be6 <_dtoa_r+0x6ee>
 8003958:	4b69      	ldr	r3, [pc, #420]	; (8003b00 <_dtoa_r+0x608>)
 800395a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800395e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003962:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003966:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003968:	2b00      	cmp	r3, #0
 800396a:	f280 80d7 	bge.w	8003b1c <_dtoa_r+0x624>
 800396e:	f1b8 0f00 	cmp.w	r8, #0
 8003972:	f300 80d3 	bgt.w	8003b1c <_dtoa_r+0x624>
 8003976:	f040 8257 	bne.w	8003e28 <_dtoa_r+0x930>
 800397a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800397e:	2200      	movs	r2, #0
 8003980:	4b64      	ldr	r3, [pc, #400]	; (8003b14 <_dtoa_r+0x61c>)
 8003982:	f7fc fdc3 	bl	800050c <__aeabi_dmul>
 8003986:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800398a:	f7fd f845 	bl	8000a18 <__aeabi_dcmpge>
 800398e:	4646      	mov	r6, r8
 8003990:	4647      	mov	r7, r8
 8003992:	2800      	cmp	r0, #0
 8003994:	f040 822d 	bne.w	8003df2 <_dtoa_r+0x8fa>
 8003998:	9b06      	ldr	r3, [sp, #24]
 800399a:	9a06      	ldr	r2, [sp, #24]
 800399c:	1c5d      	adds	r5, r3, #1
 800399e:	2331      	movs	r3, #49	; 0x31
 80039a0:	f10a 0a01 	add.w	sl, sl, #1
 80039a4:	7013      	strb	r3, [r2, #0]
 80039a6:	e228      	b.n	8003dfa <_dtoa_r+0x902>
 80039a8:	07f2      	lsls	r2, r6, #31
 80039aa:	d505      	bpl.n	80039b8 <_dtoa_r+0x4c0>
 80039ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039b0:	f7fc fdac 	bl	800050c <__aeabi_dmul>
 80039b4:	2301      	movs	r3, #1
 80039b6:	3501      	adds	r5, #1
 80039b8:	1076      	asrs	r6, r6, #1
 80039ba:	3708      	adds	r7, #8
 80039bc:	e76e      	b.n	800389c <_dtoa_r+0x3a4>
 80039be:	2502      	movs	r5, #2
 80039c0:	e771      	b.n	80038a6 <_dtoa_r+0x3ae>
 80039c2:	4657      	mov	r7, sl
 80039c4:	4646      	mov	r6, r8
 80039c6:	e790      	b.n	80038ea <_dtoa_r+0x3f2>
 80039c8:	4b4d      	ldr	r3, [pc, #308]	; (8003b00 <_dtoa_r+0x608>)
 80039ca:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80039ce:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80039d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d048      	beq.n	8003a6a <_dtoa_r+0x572>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	2000      	movs	r0, #0
 80039de:	494e      	ldr	r1, [pc, #312]	; (8003b18 <_dtoa_r+0x620>)
 80039e0:	f7fc febe 	bl	8000760 <__aeabi_ddiv>
 80039e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80039e8:	f7fc fbd8 	bl	800019c <__aeabi_dsub>
 80039ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80039f0:	9d06      	ldr	r5, [sp, #24]
 80039f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039f6:	f7fd f839 	bl	8000a6c <__aeabi_d2iz>
 80039fa:	9011      	str	r0, [sp, #68]	; 0x44
 80039fc:	f7fc fd1c 	bl	8000438 <__aeabi_i2d>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a08:	f7fc fbc8 	bl	800019c <__aeabi_dsub>
 8003a0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003a0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a12:	3330      	adds	r3, #48	; 0x30
 8003a14:	f805 3b01 	strb.w	r3, [r5], #1
 8003a18:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003a1c:	f7fc ffe8 	bl	80009f0 <__aeabi_dcmplt>
 8003a20:	2800      	cmp	r0, #0
 8003a22:	d163      	bne.n	8003aec <_dtoa_r+0x5f4>
 8003a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a28:	2000      	movs	r0, #0
 8003a2a:	4937      	ldr	r1, [pc, #220]	; (8003b08 <_dtoa_r+0x610>)
 8003a2c:	f7fc fbb6 	bl	800019c <__aeabi_dsub>
 8003a30:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003a34:	f7fc ffdc 	bl	80009f0 <__aeabi_dcmplt>
 8003a38:	2800      	cmp	r0, #0
 8003a3a:	f040 80b5 	bne.w	8003ba8 <_dtoa_r+0x6b0>
 8003a3e:	9b06      	ldr	r3, [sp, #24]
 8003a40:	1aeb      	subs	r3, r5, r3
 8003a42:	429e      	cmp	r6, r3
 8003a44:	f77f af7c 	ble.w	8003940 <_dtoa_r+0x448>
 8003a48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	4b2f      	ldr	r3, [pc, #188]	; (8003b0c <_dtoa_r+0x614>)
 8003a50:	f7fc fd5c 	bl	800050c <__aeabi_dmul>
 8003a54:	2200      	movs	r2, #0
 8003a56:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003a5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a5e:	4b2b      	ldr	r3, [pc, #172]	; (8003b0c <_dtoa_r+0x614>)
 8003a60:	f7fc fd54 	bl	800050c <__aeabi_dmul>
 8003a64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a68:	e7c3      	b.n	80039f2 <_dtoa_r+0x4fa>
 8003a6a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003a6e:	f7fc fd4d 	bl	800050c <__aeabi_dmul>
 8003a72:	9b06      	ldr	r3, [sp, #24]
 8003a74:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003a78:	199d      	adds	r5, r3, r6
 8003a7a:	461e      	mov	r6, r3
 8003a7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a80:	f7fc fff4 	bl	8000a6c <__aeabi_d2iz>
 8003a84:	9011      	str	r0, [sp, #68]	; 0x44
 8003a86:	f7fc fcd7 	bl	8000438 <__aeabi_i2d>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a92:	f7fc fb83 	bl	800019c <__aeabi_dsub>
 8003a96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003a98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a9c:	3330      	adds	r3, #48	; 0x30
 8003a9e:	f806 3b01 	strb.w	r3, [r6], #1
 8003aa2:	42ae      	cmp	r6, r5
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	d124      	bne.n	8003af4 <_dtoa_r+0x5fc>
 8003aaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003aae:	4b1a      	ldr	r3, [pc, #104]	; (8003b18 <_dtoa_r+0x620>)
 8003ab0:	f7fc fb76 	bl	80001a0 <__adddf3>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003abc:	f7fc ffb6 	bl	8000a2c <__aeabi_dcmpgt>
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	d171      	bne.n	8003ba8 <_dtoa_r+0x6b0>
 8003ac4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ac8:	2000      	movs	r0, #0
 8003aca:	4913      	ldr	r1, [pc, #76]	; (8003b18 <_dtoa_r+0x620>)
 8003acc:	f7fc fb66 	bl	800019c <__aeabi_dsub>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ad8:	f7fc ff8a 	bl	80009f0 <__aeabi_dcmplt>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	f43f af2f 	beq.w	8003940 <_dtoa_r+0x448>
 8003ae2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003ae6:	1e6a      	subs	r2, r5, #1
 8003ae8:	2b30      	cmp	r3, #48	; 0x30
 8003aea:	d001      	beq.n	8003af0 <_dtoa_r+0x5f8>
 8003aec:	46ba      	mov	sl, r7
 8003aee:	e04a      	b.n	8003b86 <_dtoa_r+0x68e>
 8003af0:	4615      	mov	r5, r2
 8003af2:	e7f6      	b.n	8003ae2 <_dtoa_r+0x5ea>
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <_dtoa_r+0x614>)
 8003af6:	f7fc fd09 	bl	800050c <__aeabi_dmul>
 8003afa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003afe:	e7bd      	b.n	8003a7c <_dtoa_r+0x584>
 8003b00:	08004928 	.word	0x08004928
 8003b04:	08004900 	.word	0x08004900
 8003b08:	3ff00000 	.word	0x3ff00000
 8003b0c:	40240000 	.word	0x40240000
 8003b10:	401c0000 	.word	0x401c0000
 8003b14:	40140000 	.word	0x40140000
 8003b18:	3fe00000 	.word	0x3fe00000
 8003b1c:	9d06      	ldr	r5, [sp, #24]
 8003b1e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003b22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b26:	4630      	mov	r0, r6
 8003b28:	4639      	mov	r1, r7
 8003b2a:	f7fc fe19 	bl	8000760 <__aeabi_ddiv>
 8003b2e:	f7fc ff9d 	bl	8000a6c <__aeabi_d2iz>
 8003b32:	4681      	mov	r9, r0
 8003b34:	f7fc fc80 	bl	8000438 <__aeabi_i2d>
 8003b38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b3c:	f7fc fce6 	bl	800050c <__aeabi_dmul>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4630      	mov	r0, r6
 8003b46:	4639      	mov	r1, r7
 8003b48:	f7fc fb28 	bl	800019c <__aeabi_dsub>
 8003b4c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8003b50:	f805 6b01 	strb.w	r6, [r5], #1
 8003b54:	9e06      	ldr	r6, [sp, #24]
 8003b56:	4602      	mov	r2, r0
 8003b58:	1bae      	subs	r6, r5, r6
 8003b5a:	45b0      	cmp	r8, r6
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	d135      	bne.n	8003bcc <_dtoa_r+0x6d4>
 8003b60:	f7fc fb1e 	bl	80001a0 <__adddf3>
 8003b64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b68:	4606      	mov	r6, r0
 8003b6a:	460f      	mov	r7, r1
 8003b6c:	f7fc ff5e 	bl	8000a2c <__aeabi_dcmpgt>
 8003b70:	b9c8      	cbnz	r0, 8003ba6 <_dtoa_r+0x6ae>
 8003b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b76:	4630      	mov	r0, r6
 8003b78:	4639      	mov	r1, r7
 8003b7a:	f7fc ff2f 	bl	80009dc <__aeabi_dcmpeq>
 8003b7e:	b110      	cbz	r0, 8003b86 <_dtoa_r+0x68e>
 8003b80:	f019 0f01 	tst.w	r9, #1
 8003b84:	d10f      	bne.n	8003ba6 <_dtoa_r+0x6ae>
 8003b86:	4659      	mov	r1, fp
 8003b88:	4620      	mov	r0, r4
 8003b8a:	f000 fabe 	bl	800410a <_Bfree>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003b92:	702b      	strb	r3, [r5, #0]
 8003b94:	f10a 0301 	add.w	r3, sl, #1
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f43f acf3 	beq.w	8003588 <_dtoa_r+0x90>
 8003ba2:	601d      	str	r5, [r3, #0]
 8003ba4:	e4f0      	b.n	8003588 <_dtoa_r+0x90>
 8003ba6:	4657      	mov	r7, sl
 8003ba8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003bac:	1e6b      	subs	r3, r5, #1
 8003bae:	2a39      	cmp	r2, #57	; 0x39
 8003bb0:	d106      	bne.n	8003bc0 <_dtoa_r+0x6c8>
 8003bb2:	9a06      	ldr	r2, [sp, #24]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d107      	bne.n	8003bc8 <_dtoa_r+0x6d0>
 8003bb8:	2330      	movs	r3, #48	; 0x30
 8003bba:	7013      	strb	r3, [r2, #0]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	3701      	adds	r7, #1
 8003bc0:	781a      	ldrb	r2, [r3, #0]
 8003bc2:	3201      	adds	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]
 8003bc6:	e791      	b.n	8003aec <_dtoa_r+0x5f4>
 8003bc8:	461d      	mov	r5, r3
 8003bca:	e7ed      	b.n	8003ba8 <_dtoa_r+0x6b0>
 8003bcc:	2200      	movs	r2, #0
 8003bce:	4b99      	ldr	r3, [pc, #612]	; (8003e34 <_dtoa_r+0x93c>)
 8003bd0:	f7fc fc9c 	bl	800050c <__aeabi_dmul>
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	4606      	mov	r6, r0
 8003bda:	460f      	mov	r7, r1
 8003bdc:	f7fc fefe 	bl	80009dc <__aeabi_dcmpeq>
 8003be0:	2800      	cmp	r0, #0
 8003be2:	d09e      	beq.n	8003b22 <_dtoa_r+0x62a>
 8003be4:	e7cf      	b.n	8003b86 <_dtoa_r+0x68e>
 8003be6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003be8:	2a00      	cmp	r2, #0
 8003bea:	f000 8088 	beq.w	8003cfe <_dtoa_r+0x806>
 8003bee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003bf0:	2a01      	cmp	r2, #1
 8003bf2:	dc6d      	bgt.n	8003cd0 <_dtoa_r+0x7d8>
 8003bf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003bf6:	2a00      	cmp	r2, #0
 8003bf8:	d066      	beq.n	8003cc8 <_dtoa_r+0x7d0>
 8003bfa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003bfe:	464d      	mov	r5, r9
 8003c00:	9e08      	ldr	r6, [sp, #32]
 8003c02:	9a07      	ldr	r2, [sp, #28]
 8003c04:	2101      	movs	r1, #1
 8003c06:	441a      	add	r2, r3
 8003c08:	4620      	mov	r0, r4
 8003c0a:	4499      	add	r9, r3
 8003c0c:	9207      	str	r2, [sp, #28]
 8003c0e:	f000 fb1c 	bl	800424a <__i2b>
 8003c12:	4607      	mov	r7, r0
 8003c14:	2d00      	cmp	r5, #0
 8003c16:	dd0b      	ble.n	8003c30 <_dtoa_r+0x738>
 8003c18:	9b07      	ldr	r3, [sp, #28]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	dd08      	ble.n	8003c30 <_dtoa_r+0x738>
 8003c1e:	42ab      	cmp	r3, r5
 8003c20:	bfa8      	it	ge
 8003c22:	462b      	movge	r3, r5
 8003c24:	9a07      	ldr	r2, [sp, #28]
 8003c26:	eba9 0903 	sub.w	r9, r9, r3
 8003c2a:	1aed      	subs	r5, r5, r3
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	9307      	str	r3, [sp, #28]
 8003c30:	9b08      	ldr	r3, [sp, #32]
 8003c32:	b1eb      	cbz	r3, 8003c70 <_dtoa_r+0x778>
 8003c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d065      	beq.n	8003d06 <_dtoa_r+0x80e>
 8003c3a:	b18e      	cbz	r6, 8003c60 <_dtoa_r+0x768>
 8003c3c:	4639      	mov	r1, r7
 8003c3e:	4632      	mov	r2, r6
 8003c40:	4620      	mov	r0, r4
 8003c42:	f000 fba1 	bl	8004388 <__pow5mult>
 8003c46:	465a      	mov	r2, fp
 8003c48:	4601      	mov	r1, r0
 8003c4a:	4607      	mov	r7, r0
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	f000 fb05 	bl	800425c <__multiply>
 8003c52:	4659      	mov	r1, fp
 8003c54:	900a      	str	r0, [sp, #40]	; 0x28
 8003c56:	4620      	mov	r0, r4
 8003c58:	f000 fa57 	bl	800410a <_Bfree>
 8003c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c5e:	469b      	mov	fp, r3
 8003c60:	9b08      	ldr	r3, [sp, #32]
 8003c62:	1b9a      	subs	r2, r3, r6
 8003c64:	d004      	beq.n	8003c70 <_dtoa_r+0x778>
 8003c66:	4659      	mov	r1, fp
 8003c68:	4620      	mov	r0, r4
 8003c6a:	f000 fb8d 	bl	8004388 <__pow5mult>
 8003c6e:	4683      	mov	fp, r0
 8003c70:	2101      	movs	r1, #1
 8003c72:	4620      	mov	r0, r4
 8003c74:	f000 fae9 	bl	800424a <__i2b>
 8003c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c7a:	4606      	mov	r6, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 81c6 	beq.w	800400e <_dtoa_r+0xb16>
 8003c82:	461a      	mov	r2, r3
 8003c84:	4601      	mov	r1, r0
 8003c86:	4620      	mov	r0, r4
 8003c88:	f000 fb7e 	bl	8004388 <__pow5mult>
 8003c8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003c8e:	4606      	mov	r6, r0
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	dc3e      	bgt.n	8003d12 <_dtoa_r+0x81a>
 8003c94:	9b02      	ldr	r3, [sp, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d137      	bne.n	8003d0a <_dtoa_r+0x812>
 8003c9a:	9b03      	ldr	r3, [sp, #12]
 8003c9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d134      	bne.n	8003d0e <_dtoa_r+0x816>
 8003ca4:	9b03      	ldr	r3, [sp, #12]
 8003ca6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003caa:	0d1b      	lsrs	r3, r3, #20
 8003cac:	051b      	lsls	r3, r3, #20
 8003cae:	b12b      	cbz	r3, 8003cbc <_dtoa_r+0x7c4>
 8003cb0:	9b07      	ldr	r3, [sp, #28]
 8003cb2:	f109 0901 	add.w	r9, r9, #1
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	9307      	str	r3, [sp, #28]
 8003cba:	2301      	movs	r3, #1
 8003cbc:	9308      	str	r3, [sp, #32]
 8003cbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d128      	bne.n	8003d16 <_dtoa_r+0x81e>
 8003cc4:	2001      	movs	r0, #1
 8003cc6:	e02e      	b.n	8003d26 <_dtoa_r+0x82e>
 8003cc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003cca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003cce:	e796      	b.n	8003bfe <_dtoa_r+0x706>
 8003cd0:	9b08      	ldr	r3, [sp, #32]
 8003cd2:	f108 36ff 	add.w	r6, r8, #4294967295
 8003cd6:	42b3      	cmp	r3, r6
 8003cd8:	bfb7      	itett	lt
 8003cda:	9b08      	ldrlt	r3, [sp, #32]
 8003cdc:	1b9e      	subge	r6, r3, r6
 8003cde:	1af2      	sublt	r2, r6, r3
 8003ce0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8003ce2:	bfbf      	itttt	lt
 8003ce4:	9608      	strlt	r6, [sp, #32]
 8003ce6:	189b      	addlt	r3, r3, r2
 8003ce8:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003cea:	2600      	movlt	r6, #0
 8003cec:	f1b8 0f00 	cmp.w	r8, #0
 8003cf0:	bfb9      	ittee	lt
 8003cf2:	eba9 0508 	sublt.w	r5, r9, r8
 8003cf6:	2300      	movlt	r3, #0
 8003cf8:	464d      	movge	r5, r9
 8003cfa:	4643      	movge	r3, r8
 8003cfc:	e781      	b.n	8003c02 <_dtoa_r+0x70a>
 8003cfe:	9e08      	ldr	r6, [sp, #32]
 8003d00:	464d      	mov	r5, r9
 8003d02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003d04:	e786      	b.n	8003c14 <_dtoa_r+0x71c>
 8003d06:	9a08      	ldr	r2, [sp, #32]
 8003d08:	e7ad      	b.n	8003c66 <_dtoa_r+0x76e>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	e7d6      	b.n	8003cbc <_dtoa_r+0x7c4>
 8003d0e:	9b02      	ldr	r3, [sp, #8]
 8003d10:	e7d4      	b.n	8003cbc <_dtoa_r+0x7c4>
 8003d12:	2300      	movs	r3, #0
 8003d14:	9308      	str	r3, [sp, #32]
 8003d16:	6933      	ldr	r3, [r6, #16]
 8003d18:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003d1c:	6918      	ldr	r0, [r3, #16]
 8003d1e:	f000 fa46 	bl	80041ae <__hi0bits>
 8003d22:	f1c0 0020 	rsb	r0, r0, #32
 8003d26:	9b07      	ldr	r3, [sp, #28]
 8003d28:	4418      	add	r0, r3
 8003d2a:	f010 001f 	ands.w	r0, r0, #31
 8003d2e:	d047      	beq.n	8003dc0 <_dtoa_r+0x8c8>
 8003d30:	f1c0 0320 	rsb	r3, r0, #32
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	dd3b      	ble.n	8003db0 <_dtoa_r+0x8b8>
 8003d38:	9b07      	ldr	r3, [sp, #28]
 8003d3a:	f1c0 001c 	rsb	r0, r0, #28
 8003d3e:	4481      	add	r9, r0
 8003d40:	4405      	add	r5, r0
 8003d42:	4403      	add	r3, r0
 8003d44:	9307      	str	r3, [sp, #28]
 8003d46:	f1b9 0f00 	cmp.w	r9, #0
 8003d4a:	dd05      	ble.n	8003d58 <_dtoa_r+0x860>
 8003d4c:	4659      	mov	r1, fp
 8003d4e:	464a      	mov	r2, r9
 8003d50:	4620      	mov	r0, r4
 8003d52:	f000 fb67 	bl	8004424 <__lshift>
 8003d56:	4683      	mov	fp, r0
 8003d58:	9b07      	ldr	r3, [sp, #28]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	dd05      	ble.n	8003d6a <_dtoa_r+0x872>
 8003d5e:	4631      	mov	r1, r6
 8003d60:	461a      	mov	r2, r3
 8003d62:	4620      	mov	r0, r4
 8003d64:	f000 fb5e 	bl	8004424 <__lshift>
 8003d68:	4606      	mov	r6, r0
 8003d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d6c:	b353      	cbz	r3, 8003dc4 <_dtoa_r+0x8cc>
 8003d6e:	4631      	mov	r1, r6
 8003d70:	4658      	mov	r0, fp
 8003d72:	f000 fbab 	bl	80044cc <__mcmp>
 8003d76:	2800      	cmp	r0, #0
 8003d78:	da24      	bge.n	8003dc4 <_dtoa_r+0x8cc>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	4659      	mov	r1, fp
 8003d7e:	220a      	movs	r2, #10
 8003d80:	4620      	mov	r0, r4
 8003d82:	f000 f9d9 	bl	8004138 <__multadd>
 8003d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003d8c:	4683      	mov	fp, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 8144 	beq.w	800401c <_dtoa_r+0xb24>
 8003d94:	2300      	movs	r3, #0
 8003d96:	4639      	mov	r1, r7
 8003d98:	220a      	movs	r2, #10
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	f000 f9cc 	bl	8004138 <__multadd>
 8003da0:	9b04      	ldr	r3, [sp, #16]
 8003da2:	4607      	mov	r7, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	dc4d      	bgt.n	8003e44 <_dtoa_r+0x94c>
 8003da8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	dd4a      	ble.n	8003e44 <_dtoa_r+0x94c>
 8003dae:	e011      	b.n	8003dd4 <_dtoa_r+0x8dc>
 8003db0:	d0c9      	beq.n	8003d46 <_dtoa_r+0x84e>
 8003db2:	9a07      	ldr	r2, [sp, #28]
 8003db4:	331c      	adds	r3, #28
 8003db6:	441a      	add	r2, r3
 8003db8:	4499      	add	r9, r3
 8003dba:	441d      	add	r5, r3
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	e7c1      	b.n	8003d44 <_dtoa_r+0x84c>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	e7f6      	b.n	8003db2 <_dtoa_r+0x8ba>
 8003dc4:	f1b8 0f00 	cmp.w	r8, #0
 8003dc8:	dc36      	bgt.n	8003e38 <_dtoa_r+0x940>
 8003dca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	dd33      	ble.n	8003e38 <_dtoa_r+0x940>
 8003dd0:	f8cd 8010 	str.w	r8, [sp, #16]
 8003dd4:	9b04      	ldr	r3, [sp, #16]
 8003dd6:	b963      	cbnz	r3, 8003df2 <_dtoa_r+0x8fa>
 8003dd8:	4631      	mov	r1, r6
 8003dda:	2205      	movs	r2, #5
 8003ddc:	4620      	mov	r0, r4
 8003dde:	f000 f9ab 	bl	8004138 <__multadd>
 8003de2:	4601      	mov	r1, r0
 8003de4:	4606      	mov	r6, r0
 8003de6:	4658      	mov	r0, fp
 8003de8:	f000 fb70 	bl	80044cc <__mcmp>
 8003dec:	2800      	cmp	r0, #0
 8003dee:	f73f add3 	bgt.w	8003998 <_dtoa_r+0x4a0>
 8003df2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003df4:	9d06      	ldr	r5, [sp, #24]
 8003df6:	ea6f 0a03 	mvn.w	sl, r3
 8003dfa:	f04f 0900 	mov.w	r9, #0
 8003dfe:	4631      	mov	r1, r6
 8003e00:	4620      	mov	r0, r4
 8003e02:	f000 f982 	bl	800410a <_Bfree>
 8003e06:	2f00      	cmp	r7, #0
 8003e08:	f43f aebd 	beq.w	8003b86 <_dtoa_r+0x68e>
 8003e0c:	f1b9 0f00 	cmp.w	r9, #0
 8003e10:	d005      	beq.n	8003e1e <_dtoa_r+0x926>
 8003e12:	45b9      	cmp	r9, r7
 8003e14:	d003      	beq.n	8003e1e <_dtoa_r+0x926>
 8003e16:	4649      	mov	r1, r9
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f000 f976 	bl	800410a <_Bfree>
 8003e1e:	4639      	mov	r1, r7
 8003e20:	4620      	mov	r0, r4
 8003e22:	f000 f972 	bl	800410a <_Bfree>
 8003e26:	e6ae      	b.n	8003b86 <_dtoa_r+0x68e>
 8003e28:	2600      	movs	r6, #0
 8003e2a:	4637      	mov	r7, r6
 8003e2c:	e7e1      	b.n	8003df2 <_dtoa_r+0x8fa>
 8003e2e:	46ba      	mov	sl, r7
 8003e30:	4637      	mov	r7, r6
 8003e32:	e5b1      	b.n	8003998 <_dtoa_r+0x4a0>
 8003e34:	40240000 	.word	0x40240000
 8003e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e3a:	f8cd 8010 	str.w	r8, [sp, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 80f3 	beq.w	800402a <_dtoa_r+0xb32>
 8003e44:	2d00      	cmp	r5, #0
 8003e46:	dd05      	ble.n	8003e54 <_dtoa_r+0x95c>
 8003e48:	4639      	mov	r1, r7
 8003e4a:	462a      	mov	r2, r5
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	f000 fae9 	bl	8004424 <__lshift>
 8003e52:	4607      	mov	r7, r0
 8003e54:	9b08      	ldr	r3, [sp, #32]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d04c      	beq.n	8003ef4 <_dtoa_r+0x9fc>
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f000 f920 	bl	80040a2 <_Balloc>
 8003e62:	4605      	mov	r5, r0
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	f107 010c 	add.w	r1, r7, #12
 8003e6a:	3202      	adds	r2, #2
 8003e6c:	0092      	lsls	r2, r2, #2
 8003e6e:	300c      	adds	r0, #12
 8003e70:	f000 f90c 	bl	800408c <memcpy>
 8003e74:	2201      	movs	r2, #1
 8003e76:	4629      	mov	r1, r5
 8003e78:	4620      	mov	r0, r4
 8003e7a:	f000 fad3 	bl	8004424 <__lshift>
 8003e7e:	46b9      	mov	r9, r7
 8003e80:	4607      	mov	r7, r0
 8003e82:	9b06      	ldr	r3, [sp, #24]
 8003e84:	9307      	str	r3, [sp, #28]
 8003e86:	9b02      	ldr	r3, [sp, #8]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	9308      	str	r3, [sp, #32]
 8003e8e:	4631      	mov	r1, r6
 8003e90:	4658      	mov	r0, fp
 8003e92:	f7ff faa1 	bl	80033d8 <quorem>
 8003e96:	4649      	mov	r1, r9
 8003e98:	4605      	mov	r5, r0
 8003e9a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003e9e:	4658      	mov	r0, fp
 8003ea0:	f000 fb14 	bl	80044cc <__mcmp>
 8003ea4:	463a      	mov	r2, r7
 8003ea6:	9002      	str	r0, [sp, #8]
 8003ea8:	4631      	mov	r1, r6
 8003eaa:	4620      	mov	r0, r4
 8003eac:	f000 fb28 	bl	8004500 <__mdiff>
 8003eb0:	68c3      	ldr	r3, [r0, #12]
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	bb03      	cbnz	r3, 8003ef8 <_dtoa_r+0xa00>
 8003eb6:	4601      	mov	r1, r0
 8003eb8:	9009      	str	r0, [sp, #36]	; 0x24
 8003eba:	4658      	mov	r0, fp
 8003ebc:	f000 fb06 	bl	80044cc <__mcmp>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8003eca:	f000 f91e 	bl	800410a <_Bfree>
 8003ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ed0:	b9a3      	cbnz	r3, 8003efc <_dtoa_r+0xa04>
 8003ed2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003ed4:	b992      	cbnz	r2, 8003efc <_dtoa_r+0xa04>
 8003ed6:	9a08      	ldr	r2, [sp, #32]
 8003ed8:	b982      	cbnz	r2, 8003efc <_dtoa_r+0xa04>
 8003eda:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003ede:	d029      	beq.n	8003f34 <_dtoa_r+0xa3c>
 8003ee0:	9b02      	ldr	r3, [sp, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	dd01      	ble.n	8003eea <_dtoa_r+0x9f2>
 8003ee6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8003eea:	9b07      	ldr	r3, [sp, #28]
 8003eec:	1c5d      	adds	r5, r3, #1
 8003eee:	f883 8000 	strb.w	r8, [r3]
 8003ef2:	e784      	b.n	8003dfe <_dtoa_r+0x906>
 8003ef4:	4638      	mov	r0, r7
 8003ef6:	e7c2      	b.n	8003e7e <_dtoa_r+0x986>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e7e3      	b.n	8003ec4 <_dtoa_r+0x9cc>
 8003efc:	9a02      	ldr	r2, [sp, #8]
 8003efe:	2a00      	cmp	r2, #0
 8003f00:	db04      	blt.n	8003f0c <_dtoa_r+0xa14>
 8003f02:	d123      	bne.n	8003f4c <_dtoa_r+0xa54>
 8003f04:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003f06:	bb0a      	cbnz	r2, 8003f4c <_dtoa_r+0xa54>
 8003f08:	9a08      	ldr	r2, [sp, #32]
 8003f0a:	b9fa      	cbnz	r2, 8003f4c <_dtoa_r+0xa54>
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	ddec      	ble.n	8003eea <_dtoa_r+0x9f2>
 8003f10:	4659      	mov	r1, fp
 8003f12:	2201      	movs	r2, #1
 8003f14:	4620      	mov	r0, r4
 8003f16:	f000 fa85 	bl	8004424 <__lshift>
 8003f1a:	4631      	mov	r1, r6
 8003f1c:	4683      	mov	fp, r0
 8003f1e:	f000 fad5 	bl	80044cc <__mcmp>
 8003f22:	2800      	cmp	r0, #0
 8003f24:	dc03      	bgt.n	8003f2e <_dtoa_r+0xa36>
 8003f26:	d1e0      	bne.n	8003eea <_dtoa_r+0x9f2>
 8003f28:	f018 0f01 	tst.w	r8, #1
 8003f2c:	d0dd      	beq.n	8003eea <_dtoa_r+0x9f2>
 8003f2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003f32:	d1d8      	bne.n	8003ee6 <_dtoa_r+0x9ee>
 8003f34:	9b07      	ldr	r3, [sp, #28]
 8003f36:	9a07      	ldr	r2, [sp, #28]
 8003f38:	1c5d      	adds	r5, r3, #1
 8003f3a:	2339      	movs	r3, #57	; 0x39
 8003f3c:	7013      	strb	r3, [r2, #0]
 8003f3e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003f42:	1e6a      	subs	r2, r5, #1
 8003f44:	2b39      	cmp	r3, #57	; 0x39
 8003f46:	d04d      	beq.n	8003fe4 <_dtoa_r+0xaec>
 8003f48:	3301      	adds	r3, #1
 8003f4a:	e052      	b.n	8003ff2 <_dtoa_r+0xafa>
 8003f4c:	9a07      	ldr	r2, [sp, #28]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f102 0501 	add.w	r5, r2, #1
 8003f54:	dd06      	ble.n	8003f64 <_dtoa_r+0xa6c>
 8003f56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003f5a:	d0eb      	beq.n	8003f34 <_dtoa_r+0xa3c>
 8003f5c:	f108 0801 	add.w	r8, r8, #1
 8003f60:	9b07      	ldr	r3, [sp, #28]
 8003f62:	e7c4      	b.n	8003eee <_dtoa_r+0x9f6>
 8003f64:	9b06      	ldr	r3, [sp, #24]
 8003f66:	9a04      	ldr	r2, [sp, #16]
 8003f68:	1aeb      	subs	r3, r5, r3
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8003f70:	d021      	beq.n	8003fb6 <_dtoa_r+0xabe>
 8003f72:	4659      	mov	r1, fp
 8003f74:	2300      	movs	r3, #0
 8003f76:	220a      	movs	r2, #10
 8003f78:	4620      	mov	r0, r4
 8003f7a:	f000 f8dd 	bl	8004138 <__multadd>
 8003f7e:	45b9      	cmp	r9, r7
 8003f80:	4683      	mov	fp, r0
 8003f82:	f04f 0300 	mov.w	r3, #0
 8003f86:	f04f 020a 	mov.w	r2, #10
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	d105      	bne.n	8003f9c <_dtoa_r+0xaa4>
 8003f90:	f000 f8d2 	bl	8004138 <__multadd>
 8003f94:	4681      	mov	r9, r0
 8003f96:	4607      	mov	r7, r0
 8003f98:	9507      	str	r5, [sp, #28]
 8003f9a:	e778      	b.n	8003e8e <_dtoa_r+0x996>
 8003f9c:	f000 f8cc 	bl	8004138 <__multadd>
 8003fa0:	4639      	mov	r1, r7
 8003fa2:	4681      	mov	r9, r0
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	220a      	movs	r2, #10
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f000 f8c5 	bl	8004138 <__multadd>
 8003fae:	4607      	mov	r7, r0
 8003fb0:	e7f2      	b.n	8003f98 <_dtoa_r+0xaa0>
 8003fb2:	f04f 0900 	mov.w	r9, #0
 8003fb6:	4659      	mov	r1, fp
 8003fb8:	2201      	movs	r2, #1
 8003fba:	4620      	mov	r0, r4
 8003fbc:	f000 fa32 	bl	8004424 <__lshift>
 8003fc0:	4631      	mov	r1, r6
 8003fc2:	4683      	mov	fp, r0
 8003fc4:	f000 fa82 	bl	80044cc <__mcmp>
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	dcb8      	bgt.n	8003f3e <_dtoa_r+0xa46>
 8003fcc:	d102      	bne.n	8003fd4 <_dtoa_r+0xadc>
 8003fce:	f018 0f01 	tst.w	r8, #1
 8003fd2:	d1b4      	bne.n	8003f3e <_dtoa_r+0xa46>
 8003fd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003fd8:	1e6a      	subs	r2, r5, #1
 8003fda:	2b30      	cmp	r3, #48	; 0x30
 8003fdc:	f47f af0f 	bne.w	8003dfe <_dtoa_r+0x906>
 8003fe0:	4615      	mov	r5, r2
 8003fe2:	e7f7      	b.n	8003fd4 <_dtoa_r+0xadc>
 8003fe4:	9b06      	ldr	r3, [sp, #24]
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d105      	bne.n	8003ff6 <_dtoa_r+0xafe>
 8003fea:	2331      	movs	r3, #49	; 0x31
 8003fec:	9a06      	ldr	r2, [sp, #24]
 8003fee:	f10a 0a01 	add.w	sl, sl, #1
 8003ff2:	7013      	strb	r3, [r2, #0]
 8003ff4:	e703      	b.n	8003dfe <_dtoa_r+0x906>
 8003ff6:	4615      	mov	r5, r2
 8003ff8:	e7a1      	b.n	8003f3e <_dtoa_r+0xa46>
 8003ffa:	4b17      	ldr	r3, [pc, #92]	; (8004058 <_dtoa_r+0xb60>)
 8003ffc:	f7ff bae1 	b.w	80035c2 <_dtoa_r+0xca>
 8004000:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004002:	2b00      	cmp	r3, #0
 8004004:	f47f aabb 	bne.w	800357e <_dtoa_r+0x86>
 8004008:	4b14      	ldr	r3, [pc, #80]	; (800405c <_dtoa_r+0xb64>)
 800400a:	f7ff bada 	b.w	80035c2 <_dtoa_r+0xca>
 800400e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004010:	2b01      	cmp	r3, #1
 8004012:	f77f ae3f 	ble.w	8003c94 <_dtoa_r+0x79c>
 8004016:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004018:	9308      	str	r3, [sp, #32]
 800401a:	e653      	b.n	8003cc4 <_dtoa_r+0x7cc>
 800401c:	9b04      	ldr	r3, [sp, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	dc03      	bgt.n	800402a <_dtoa_r+0xb32>
 8004022:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004024:	2b02      	cmp	r3, #2
 8004026:	f73f aed5 	bgt.w	8003dd4 <_dtoa_r+0x8dc>
 800402a:	9d06      	ldr	r5, [sp, #24]
 800402c:	4631      	mov	r1, r6
 800402e:	4658      	mov	r0, fp
 8004030:	f7ff f9d2 	bl	80033d8 <quorem>
 8004034:	9b06      	ldr	r3, [sp, #24]
 8004036:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800403a:	f805 8b01 	strb.w	r8, [r5], #1
 800403e:	9a04      	ldr	r2, [sp, #16]
 8004040:	1aeb      	subs	r3, r5, r3
 8004042:	429a      	cmp	r2, r3
 8004044:	ddb5      	ble.n	8003fb2 <_dtoa_r+0xaba>
 8004046:	4659      	mov	r1, fp
 8004048:	2300      	movs	r3, #0
 800404a:	220a      	movs	r2, #10
 800404c:	4620      	mov	r0, r4
 800404e:	f000 f873 	bl	8004138 <__multadd>
 8004052:	4683      	mov	fp, r0
 8004054:	e7ea      	b.n	800402c <_dtoa_r+0xb34>
 8004056:	bf00      	nop
 8004058:	080048ed 	.word	0x080048ed
 800405c:	080048ef 	.word	0x080048ef

08004060 <_localeconv_r>:
 8004060:	4b04      	ldr	r3, [pc, #16]	; (8004074 <_localeconv_r+0x14>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6a18      	ldr	r0, [r3, #32]
 8004066:	4b04      	ldr	r3, [pc, #16]	; (8004078 <_localeconv_r+0x18>)
 8004068:	2800      	cmp	r0, #0
 800406a:	bf08      	it	eq
 800406c:	4618      	moveq	r0, r3
 800406e:	30f0      	adds	r0, #240	; 0xf0
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	20000030 	.word	0x20000030
 8004078:	20000094 	.word	0x20000094

0800407c <malloc>:
 800407c:	4b02      	ldr	r3, [pc, #8]	; (8004088 <malloc+0xc>)
 800407e:	4601      	mov	r1, r0
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	f000 baf9 	b.w	8004678 <_malloc_r>
 8004086:	bf00      	nop
 8004088:	20000030 	.word	0x20000030

0800408c <memcpy>:
 800408c:	b510      	push	{r4, lr}
 800408e:	1e43      	subs	r3, r0, #1
 8004090:	440a      	add	r2, r1
 8004092:	4291      	cmp	r1, r2
 8004094:	d100      	bne.n	8004098 <memcpy+0xc>
 8004096:	bd10      	pop	{r4, pc}
 8004098:	f811 4b01 	ldrb.w	r4, [r1], #1
 800409c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040a0:	e7f7      	b.n	8004092 <memcpy+0x6>

080040a2 <_Balloc>:
 80040a2:	b570      	push	{r4, r5, r6, lr}
 80040a4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80040a6:	4604      	mov	r4, r0
 80040a8:	460e      	mov	r6, r1
 80040aa:	b93d      	cbnz	r5, 80040bc <_Balloc+0x1a>
 80040ac:	2010      	movs	r0, #16
 80040ae:	f7ff ffe5 	bl	800407c <malloc>
 80040b2:	6260      	str	r0, [r4, #36]	; 0x24
 80040b4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80040b8:	6005      	str	r5, [r0, #0]
 80040ba:	60c5      	str	r5, [r0, #12]
 80040bc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80040be:	68eb      	ldr	r3, [r5, #12]
 80040c0:	b183      	cbz	r3, 80040e4 <_Balloc+0x42>
 80040c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80040ca:	b9b8      	cbnz	r0, 80040fc <_Balloc+0x5a>
 80040cc:	2101      	movs	r1, #1
 80040ce:	fa01 f506 	lsl.w	r5, r1, r6
 80040d2:	1d6a      	adds	r2, r5, #5
 80040d4:	0092      	lsls	r2, r2, #2
 80040d6:	4620      	mov	r0, r4
 80040d8:	f000 fabf 	bl	800465a <_calloc_r>
 80040dc:	b160      	cbz	r0, 80040f8 <_Balloc+0x56>
 80040de:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80040e2:	e00e      	b.n	8004102 <_Balloc+0x60>
 80040e4:	2221      	movs	r2, #33	; 0x21
 80040e6:	2104      	movs	r1, #4
 80040e8:	4620      	mov	r0, r4
 80040ea:	f000 fab6 	bl	800465a <_calloc_r>
 80040ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040f0:	60e8      	str	r0, [r5, #12]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e4      	bne.n	80040c2 <_Balloc+0x20>
 80040f8:	2000      	movs	r0, #0
 80040fa:	bd70      	pop	{r4, r5, r6, pc}
 80040fc:	6802      	ldr	r2, [r0, #0]
 80040fe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004102:	2300      	movs	r3, #0
 8004104:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004108:	e7f7      	b.n	80040fa <_Balloc+0x58>

0800410a <_Bfree>:
 800410a:	b570      	push	{r4, r5, r6, lr}
 800410c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800410e:	4606      	mov	r6, r0
 8004110:	460d      	mov	r5, r1
 8004112:	b93c      	cbnz	r4, 8004124 <_Bfree+0x1a>
 8004114:	2010      	movs	r0, #16
 8004116:	f7ff ffb1 	bl	800407c <malloc>
 800411a:	6270      	str	r0, [r6, #36]	; 0x24
 800411c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004120:	6004      	str	r4, [r0, #0]
 8004122:	60c4      	str	r4, [r0, #12]
 8004124:	b13d      	cbz	r5, 8004136 <_Bfree+0x2c>
 8004126:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004128:	686a      	ldr	r2, [r5, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004130:	6029      	str	r1, [r5, #0]
 8004132:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004136:	bd70      	pop	{r4, r5, r6, pc}

08004138 <__multadd>:
 8004138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800413c:	461f      	mov	r7, r3
 800413e:	4606      	mov	r6, r0
 8004140:	460c      	mov	r4, r1
 8004142:	2300      	movs	r3, #0
 8004144:	690d      	ldr	r5, [r1, #16]
 8004146:	f101 0c14 	add.w	ip, r1, #20
 800414a:	f8dc 0000 	ldr.w	r0, [ip]
 800414e:	3301      	adds	r3, #1
 8004150:	b281      	uxth	r1, r0
 8004152:	fb02 7101 	mla	r1, r2, r1, r7
 8004156:	0c00      	lsrs	r0, r0, #16
 8004158:	0c0f      	lsrs	r7, r1, #16
 800415a:	fb02 7000 	mla	r0, r2, r0, r7
 800415e:	b289      	uxth	r1, r1
 8004160:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004164:	429d      	cmp	r5, r3
 8004166:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800416a:	f84c 1b04 	str.w	r1, [ip], #4
 800416e:	dcec      	bgt.n	800414a <__multadd+0x12>
 8004170:	b1d7      	cbz	r7, 80041a8 <__multadd+0x70>
 8004172:	68a3      	ldr	r3, [r4, #8]
 8004174:	42ab      	cmp	r3, r5
 8004176:	dc12      	bgt.n	800419e <__multadd+0x66>
 8004178:	6861      	ldr	r1, [r4, #4]
 800417a:	4630      	mov	r0, r6
 800417c:	3101      	adds	r1, #1
 800417e:	f7ff ff90 	bl	80040a2 <_Balloc>
 8004182:	4680      	mov	r8, r0
 8004184:	6922      	ldr	r2, [r4, #16]
 8004186:	f104 010c 	add.w	r1, r4, #12
 800418a:	3202      	adds	r2, #2
 800418c:	0092      	lsls	r2, r2, #2
 800418e:	300c      	adds	r0, #12
 8004190:	f7ff ff7c 	bl	800408c <memcpy>
 8004194:	4621      	mov	r1, r4
 8004196:	4630      	mov	r0, r6
 8004198:	f7ff ffb7 	bl	800410a <_Bfree>
 800419c:	4644      	mov	r4, r8
 800419e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80041a2:	3501      	adds	r5, #1
 80041a4:	615f      	str	r7, [r3, #20]
 80041a6:	6125      	str	r5, [r4, #16]
 80041a8:	4620      	mov	r0, r4
 80041aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080041ae <__hi0bits>:
 80041ae:	0c02      	lsrs	r2, r0, #16
 80041b0:	0412      	lsls	r2, r2, #16
 80041b2:	4603      	mov	r3, r0
 80041b4:	b9b2      	cbnz	r2, 80041e4 <__hi0bits+0x36>
 80041b6:	0403      	lsls	r3, r0, #16
 80041b8:	2010      	movs	r0, #16
 80041ba:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80041be:	bf04      	itt	eq
 80041c0:	021b      	lsleq	r3, r3, #8
 80041c2:	3008      	addeq	r0, #8
 80041c4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80041c8:	bf04      	itt	eq
 80041ca:	011b      	lsleq	r3, r3, #4
 80041cc:	3004      	addeq	r0, #4
 80041ce:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80041d2:	bf04      	itt	eq
 80041d4:	009b      	lsleq	r3, r3, #2
 80041d6:	3002      	addeq	r0, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	db06      	blt.n	80041ea <__hi0bits+0x3c>
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	d503      	bpl.n	80041e8 <__hi0bits+0x3a>
 80041e0:	3001      	adds	r0, #1
 80041e2:	4770      	bx	lr
 80041e4:	2000      	movs	r0, #0
 80041e6:	e7e8      	b.n	80041ba <__hi0bits+0xc>
 80041e8:	2020      	movs	r0, #32
 80041ea:	4770      	bx	lr

080041ec <__lo0bits>:
 80041ec:	6803      	ldr	r3, [r0, #0]
 80041ee:	4601      	mov	r1, r0
 80041f0:	f013 0207 	ands.w	r2, r3, #7
 80041f4:	d00b      	beq.n	800420e <__lo0bits+0x22>
 80041f6:	07da      	lsls	r2, r3, #31
 80041f8:	d423      	bmi.n	8004242 <__lo0bits+0x56>
 80041fa:	0798      	lsls	r0, r3, #30
 80041fc:	bf49      	itett	mi
 80041fe:	085b      	lsrmi	r3, r3, #1
 8004200:	089b      	lsrpl	r3, r3, #2
 8004202:	2001      	movmi	r0, #1
 8004204:	600b      	strmi	r3, [r1, #0]
 8004206:	bf5c      	itt	pl
 8004208:	600b      	strpl	r3, [r1, #0]
 800420a:	2002      	movpl	r0, #2
 800420c:	4770      	bx	lr
 800420e:	b298      	uxth	r0, r3
 8004210:	b9a8      	cbnz	r0, 800423e <__lo0bits+0x52>
 8004212:	2010      	movs	r0, #16
 8004214:	0c1b      	lsrs	r3, r3, #16
 8004216:	f013 0fff 	tst.w	r3, #255	; 0xff
 800421a:	bf04      	itt	eq
 800421c:	0a1b      	lsreq	r3, r3, #8
 800421e:	3008      	addeq	r0, #8
 8004220:	071a      	lsls	r2, r3, #28
 8004222:	bf04      	itt	eq
 8004224:	091b      	lsreq	r3, r3, #4
 8004226:	3004      	addeq	r0, #4
 8004228:	079a      	lsls	r2, r3, #30
 800422a:	bf04      	itt	eq
 800422c:	089b      	lsreq	r3, r3, #2
 800422e:	3002      	addeq	r0, #2
 8004230:	07da      	lsls	r2, r3, #31
 8004232:	d402      	bmi.n	800423a <__lo0bits+0x4e>
 8004234:	085b      	lsrs	r3, r3, #1
 8004236:	d006      	beq.n	8004246 <__lo0bits+0x5a>
 8004238:	3001      	adds	r0, #1
 800423a:	600b      	str	r3, [r1, #0]
 800423c:	4770      	bx	lr
 800423e:	4610      	mov	r0, r2
 8004240:	e7e9      	b.n	8004216 <__lo0bits+0x2a>
 8004242:	2000      	movs	r0, #0
 8004244:	4770      	bx	lr
 8004246:	2020      	movs	r0, #32
 8004248:	4770      	bx	lr

0800424a <__i2b>:
 800424a:	b510      	push	{r4, lr}
 800424c:	460c      	mov	r4, r1
 800424e:	2101      	movs	r1, #1
 8004250:	f7ff ff27 	bl	80040a2 <_Balloc>
 8004254:	2201      	movs	r2, #1
 8004256:	6144      	str	r4, [r0, #20]
 8004258:	6102      	str	r2, [r0, #16]
 800425a:	bd10      	pop	{r4, pc}

0800425c <__multiply>:
 800425c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004260:	4614      	mov	r4, r2
 8004262:	690a      	ldr	r2, [r1, #16]
 8004264:	6923      	ldr	r3, [r4, #16]
 8004266:	4688      	mov	r8, r1
 8004268:	429a      	cmp	r2, r3
 800426a:	bfbe      	ittt	lt
 800426c:	460b      	movlt	r3, r1
 800426e:	46a0      	movlt	r8, r4
 8004270:	461c      	movlt	r4, r3
 8004272:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004276:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800427a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800427e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004282:	eb07 0609 	add.w	r6, r7, r9
 8004286:	42b3      	cmp	r3, r6
 8004288:	bfb8      	it	lt
 800428a:	3101      	addlt	r1, #1
 800428c:	f7ff ff09 	bl	80040a2 <_Balloc>
 8004290:	f100 0514 	add.w	r5, r0, #20
 8004294:	462b      	mov	r3, r5
 8004296:	2200      	movs	r2, #0
 8004298:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800429c:	4573      	cmp	r3, lr
 800429e:	d316      	bcc.n	80042ce <__multiply+0x72>
 80042a0:	f104 0214 	add.w	r2, r4, #20
 80042a4:	f108 0114 	add.w	r1, r8, #20
 80042a8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80042ac:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	9b00      	ldr	r3, [sp, #0]
 80042b4:	9201      	str	r2, [sp, #4]
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d80c      	bhi.n	80042d4 <__multiply+0x78>
 80042ba:	2e00      	cmp	r6, #0
 80042bc:	dd03      	ble.n	80042c6 <__multiply+0x6a>
 80042be:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d05d      	beq.n	8004382 <__multiply+0x126>
 80042c6:	6106      	str	r6, [r0, #16]
 80042c8:	b003      	add	sp, #12
 80042ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ce:	f843 2b04 	str.w	r2, [r3], #4
 80042d2:	e7e3      	b.n	800429c <__multiply+0x40>
 80042d4:	f8b2 b000 	ldrh.w	fp, [r2]
 80042d8:	f1bb 0f00 	cmp.w	fp, #0
 80042dc:	d023      	beq.n	8004326 <__multiply+0xca>
 80042de:	4689      	mov	r9, r1
 80042e0:	46ac      	mov	ip, r5
 80042e2:	f04f 0800 	mov.w	r8, #0
 80042e6:	f859 4b04 	ldr.w	r4, [r9], #4
 80042ea:	f8dc a000 	ldr.w	sl, [ip]
 80042ee:	b2a3      	uxth	r3, r4
 80042f0:	fa1f fa8a 	uxth.w	sl, sl
 80042f4:	fb0b a303 	mla	r3, fp, r3, sl
 80042f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80042fc:	f8dc 4000 	ldr.w	r4, [ip]
 8004300:	4443      	add	r3, r8
 8004302:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004306:	fb0b 840a 	mla	r4, fp, sl, r8
 800430a:	46e2      	mov	sl, ip
 800430c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004310:	b29b      	uxth	r3, r3
 8004312:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004316:	454f      	cmp	r7, r9
 8004318:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800431c:	f84a 3b04 	str.w	r3, [sl], #4
 8004320:	d82b      	bhi.n	800437a <__multiply+0x11e>
 8004322:	f8cc 8004 	str.w	r8, [ip, #4]
 8004326:	9b01      	ldr	r3, [sp, #4]
 8004328:	3204      	adds	r2, #4
 800432a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800432e:	f1ba 0f00 	cmp.w	sl, #0
 8004332:	d020      	beq.n	8004376 <__multiply+0x11a>
 8004334:	4689      	mov	r9, r1
 8004336:	46a8      	mov	r8, r5
 8004338:	f04f 0b00 	mov.w	fp, #0
 800433c:	682b      	ldr	r3, [r5, #0]
 800433e:	f8b9 c000 	ldrh.w	ip, [r9]
 8004342:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004346:	b29b      	uxth	r3, r3
 8004348:	fb0a 440c 	mla	r4, sl, ip, r4
 800434c:	46c4      	mov	ip, r8
 800434e:	445c      	add	r4, fp
 8004350:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004354:	f84c 3b04 	str.w	r3, [ip], #4
 8004358:	f859 3b04 	ldr.w	r3, [r9], #4
 800435c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8004360:	0c1b      	lsrs	r3, r3, #16
 8004362:	fb0a b303 	mla	r3, sl, r3, fp
 8004366:	454f      	cmp	r7, r9
 8004368:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800436c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8004370:	d805      	bhi.n	800437e <__multiply+0x122>
 8004372:	f8c8 3004 	str.w	r3, [r8, #4]
 8004376:	3504      	adds	r5, #4
 8004378:	e79b      	b.n	80042b2 <__multiply+0x56>
 800437a:	46d4      	mov	ip, sl
 800437c:	e7b3      	b.n	80042e6 <__multiply+0x8a>
 800437e:	46e0      	mov	r8, ip
 8004380:	e7dd      	b.n	800433e <__multiply+0xe2>
 8004382:	3e01      	subs	r6, #1
 8004384:	e799      	b.n	80042ba <__multiply+0x5e>
	...

08004388 <__pow5mult>:
 8004388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800438c:	4615      	mov	r5, r2
 800438e:	f012 0203 	ands.w	r2, r2, #3
 8004392:	4606      	mov	r6, r0
 8004394:	460f      	mov	r7, r1
 8004396:	d007      	beq.n	80043a8 <__pow5mult+0x20>
 8004398:	4c21      	ldr	r4, [pc, #132]	; (8004420 <__pow5mult+0x98>)
 800439a:	3a01      	subs	r2, #1
 800439c:	2300      	movs	r3, #0
 800439e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80043a2:	f7ff fec9 	bl	8004138 <__multadd>
 80043a6:	4607      	mov	r7, r0
 80043a8:	10ad      	asrs	r5, r5, #2
 80043aa:	d035      	beq.n	8004418 <__pow5mult+0x90>
 80043ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80043ae:	b93c      	cbnz	r4, 80043c0 <__pow5mult+0x38>
 80043b0:	2010      	movs	r0, #16
 80043b2:	f7ff fe63 	bl	800407c <malloc>
 80043b6:	6270      	str	r0, [r6, #36]	; 0x24
 80043b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80043bc:	6004      	str	r4, [r0, #0]
 80043be:	60c4      	str	r4, [r0, #12]
 80043c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80043c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80043c8:	b94c      	cbnz	r4, 80043de <__pow5mult+0x56>
 80043ca:	f240 2171 	movw	r1, #625	; 0x271
 80043ce:	4630      	mov	r0, r6
 80043d0:	f7ff ff3b 	bl	800424a <__i2b>
 80043d4:	2300      	movs	r3, #0
 80043d6:	4604      	mov	r4, r0
 80043d8:	f8c8 0008 	str.w	r0, [r8, #8]
 80043dc:	6003      	str	r3, [r0, #0]
 80043de:	f04f 0800 	mov.w	r8, #0
 80043e2:	07eb      	lsls	r3, r5, #31
 80043e4:	d50a      	bpl.n	80043fc <__pow5mult+0x74>
 80043e6:	4639      	mov	r1, r7
 80043e8:	4622      	mov	r2, r4
 80043ea:	4630      	mov	r0, r6
 80043ec:	f7ff ff36 	bl	800425c <__multiply>
 80043f0:	4681      	mov	r9, r0
 80043f2:	4639      	mov	r1, r7
 80043f4:	4630      	mov	r0, r6
 80043f6:	f7ff fe88 	bl	800410a <_Bfree>
 80043fa:	464f      	mov	r7, r9
 80043fc:	106d      	asrs	r5, r5, #1
 80043fe:	d00b      	beq.n	8004418 <__pow5mult+0x90>
 8004400:	6820      	ldr	r0, [r4, #0]
 8004402:	b938      	cbnz	r0, 8004414 <__pow5mult+0x8c>
 8004404:	4622      	mov	r2, r4
 8004406:	4621      	mov	r1, r4
 8004408:	4630      	mov	r0, r6
 800440a:	f7ff ff27 	bl	800425c <__multiply>
 800440e:	6020      	str	r0, [r4, #0]
 8004410:	f8c0 8000 	str.w	r8, [r0]
 8004414:	4604      	mov	r4, r0
 8004416:	e7e4      	b.n	80043e2 <__pow5mult+0x5a>
 8004418:	4638      	mov	r0, r7
 800441a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800441e:	bf00      	nop
 8004420:	080049f0 	.word	0x080049f0

08004424 <__lshift>:
 8004424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004428:	460c      	mov	r4, r1
 800442a:	4607      	mov	r7, r0
 800442c:	4616      	mov	r6, r2
 800442e:	6923      	ldr	r3, [r4, #16]
 8004430:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004434:	eb0a 0903 	add.w	r9, sl, r3
 8004438:	6849      	ldr	r1, [r1, #4]
 800443a:	68a3      	ldr	r3, [r4, #8]
 800443c:	f109 0501 	add.w	r5, r9, #1
 8004440:	42ab      	cmp	r3, r5
 8004442:	db32      	blt.n	80044aa <__lshift+0x86>
 8004444:	4638      	mov	r0, r7
 8004446:	f7ff fe2c 	bl	80040a2 <_Balloc>
 800444a:	2300      	movs	r3, #0
 800444c:	4680      	mov	r8, r0
 800444e:	461a      	mov	r2, r3
 8004450:	f100 0114 	add.w	r1, r0, #20
 8004454:	4553      	cmp	r3, sl
 8004456:	db2b      	blt.n	80044b0 <__lshift+0x8c>
 8004458:	6920      	ldr	r0, [r4, #16]
 800445a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800445e:	f104 0314 	add.w	r3, r4, #20
 8004462:	f016 021f 	ands.w	r2, r6, #31
 8004466:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800446a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800446e:	d025      	beq.n	80044bc <__lshift+0x98>
 8004470:	2000      	movs	r0, #0
 8004472:	f1c2 0e20 	rsb	lr, r2, #32
 8004476:	468a      	mov	sl, r1
 8004478:	681e      	ldr	r6, [r3, #0]
 800447a:	4096      	lsls	r6, r2
 800447c:	4330      	orrs	r0, r6
 800447e:	f84a 0b04 	str.w	r0, [sl], #4
 8004482:	f853 0b04 	ldr.w	r0, [r3], #4
 8004486:	459c      	cmp	ip, r3
 8004488:	fa20 f00e 	lsr.w	r0, r0, lr
 800448c:	d814      	bhi.n	80044b8 <__lshift+0x94>
 800448e:	6048      	str	r0, [r1, #4]
 8004490:	b108      	cbz	r0, 8004496 <__lshift+0x72>
 8004492:	f109 0502 	add.w	r5, r9, #2
 8004496:	3d01      	subs	r5, #1
 8004498:	4638      	mov	r0, r7
 800449a:	f8c8 5010 	str.w	r5, [r8, #16]
 800449e:	4621      	mov	r1, r4
 80044a0:	f7ff fe33 	bl	800410a <_Bfree>
 80044a4:	4640      	mov	r0, r8
 80044a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044aa:	3101      	adds	r1, #1
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	e7c7      	b.n	8004440 <__lshift+0x1c>
 80044b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80044b4:	3301      	adds	r3, #1
 80044b6:	e7cd      	b.n	8004454 <__lshift+0x30>
 80044b8:	4651      	mov	r1, sl
 80044ba:	e7dc      	b.n	8004476 <__lshift+0x52>
 80044bc:	3904      	subs	r1, #4
 80044be:	f853 2b04 	ldr.w	r2, [r3], #4
 80044c2:	459c      	cmp	ip, r3
 80044c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80044c8:	d8f9      	bhi.n	80044be <__lshift+0x9a>
 80044ca:	e7e4      	b.n	8004496 <__lshift+0x72>

080044cc <__mcmp>:
 80044cc:	6903      	ldr	r3, [r0, #16]
 80044ce:	690a      	ldr	r2, [r1, #16]
 80044d0:	b530      	push	{r4, r5, lr}
 80044d2:	1a9b      	subs	r3, r3, r2
 80044d4:	d10c      	bne.n	80044f0 <__mcmp+0x24>
 80044d6:	0092      	lsls	r2, r2, #2
 80044d8:	3014      	adds	r0, #20
 80044da:	3114      	adds	r1, #20
 80044dc:	1884      	adds	r4, r0, r2
 80044de:	4411      	add	r1, r2
 80044e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80044e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80044e8:	4295      	cmp	r5, r2
 80044ea:	d003      	beq.n	80044f4 <__mcmp+0x28>
 80044ec:	d305      	bcc.n	80044fa <__mcmp+0x2e>
 80044ee:	2301      	movs	r3, #1
 80044f0:	4618      	mov	r0, r3
 80044f2:	bd30      	pop	{r4, r5, pc}
 80044f4:	42a0      	cmp	r0, r4
 80044f6:	d3f3      	bcc.n	80044e0 <__mcmp+0x14>
 80044f8:	e7fa      	b.n	80044f0 <__mcmp+0x24>
 80044fa:	f04f 33ff 	mov.w	r3, #4294967295
 80044fe:	e7f7      	b.n	80044f0 <__mcmp+0x24>

08004500 <__mdiff>:
 8004500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004504:	460d      	mov	r5, r1
 8004506:	4607      	mov	r7, r0
 8004508:	4611      	mov	r1, r2
 800450a:	4628      	mov	r0, r5
 800450c:	4614      	mov	r4, r2
 800450e:	f7ff ffdd 	bl	80044cc <__mcmp>
 8004512:	1e06      	subs	r6, r0, #0
 8004514:	d108      	bne.n	8004528 <__mdiff+0x28>
 8004516:	4631      	mov	r1, r6
 8004518:	4638      	mov	r0, r7
 800451a:	f7ff fdc2 	bl	80040a2 <_Balloc>
 800451e:	2301      	movs	r3, #1
 8004520:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004528:	bfa4      	itt	ge
 800452a:	4623      	movge	r3, r4
 800452c:	462c      	movge	r4, r5
 800452e:	4638      	mov	r0, r7
 8004530:	6861      	ldr	r1, [r4, #4]
 8004532:	bfa6      	itte	ge
 8004534:	461d      	movge	r5, r3
 8004536:	2600      	movge	r6, #0
 8004538:	2601      	movlt	r6, #1
 800453a:	f7ff fdb2 	bl	80040a2 <_Balloc>
 800453e:	f04f 0e00 	mov.w	lr, #0
 8004542:	60c6      	str	r6, [r0, #12]
 8004544:	692b      	ldr	r3, [r5, #16]
 8004546:	6926      	ldr	r6, [r4, #16]
 8004548:	f104 0214 	add.w	r2, r4, #20
 800454c:	f105 0914 	add.w	r9, r5, #20
 8004550:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004554:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004558:	f100 0114 	add.w	r1, r0, #20
 800455c:	f852 ab04 	ldr.w	sl, [r2], #4
 8004560:	f859 5b04 	ldr.w	r5, [r9], #4
 8004564:	fa1f f38a 	uxth.w	r3, sl
 8004568:	4473      	add	r3, lr
 800456a:	b2ac      	uxth	r4, r5
 800456c:	1b1b      	subs	r3, r3, r4
 800456e:	0c2c      	lsrs	r4, r5, #16
 8004570:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004574:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004578:	b29b      	uxth	r3, r3
 800457a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800457e:	45c8      	cmp	r8, r9
 8004580:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004584:	4694      	mov	ip, r2
 8004586:	f841 4b04 	str.w	r4, [r1], #4
 800458a:	d8e7      	bhi.n	800455c <__mdiff+0x5c>
 800458c:	45bc      	cmp	ip, r7
 800458e:	d304      	bcc.n	800459a <__mdiff+0x9a>
 8004590:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004594:	b183      	cbz	r3, 80045b8 <__mdiff+0xb8>
 8004596:	6106      	str	r6, [r0, #16]
 8004598:	e7c4      	b.n	8004524 <__mdiff+0x24>
 800459a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800459e:	b2a2      	uxth	r2, r4
 80045a0:	4472      	add	r2, lr
 80045a2:	1413      	asrs	r3, r2, #16
 80045a4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80045a8:	b292      	uxth	r2, r2
 80045aa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80045ae:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80045b2:	f841 2b04 	str.w	r2, [r1], #4
 80045b6:	e7e9      	b.n	800458c <__mdiff+0x8c>
 80045b8:	3e01      	subs	r6, #1
 80045ba:	e7e9      	b.n	8004590 <__mdiff+0x90>

080045bc <__d2b>:
 80045bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80045c0:	461c      	mov	r4, r3
 80045c2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80045c6:	2101      	movs	r1, #1
 80045c8:	4690      	mov	r8, r2
 80045ca:	f7ff fd6a 	bl	80040a2 <_Balloc>
 80045ce:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80045d2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80045d6:	4607      	mov	r7, r0
 80045d8:	bb34      	cbnz	r4, 8004628 <__d2b+0x6c>
 80045da:	9201      	str	r2, [sp, #4]
 80045dc:	f1b8 0200 	subs.w	r2, r8, #0
 80045e0:	d027      	beq.n	8004632 <__d2b+0x76>
 80045e2:	a802      	add	r0, sp, #8
 80045e4:	f840 2d08 	str.w	r2, [r0, #-8]!
 80045e8:	f7ff fe00 	bl	80041ec <__lo0bits>
 80045ec:	9900      	ldr	r1, [sp, #0]
 80045ee:	b1f0      	cbz	r0, 800462e <__d2b+0x72>
 80045f0:	9a01      	ldr	r2, [sp, #4]
 80045f2:	f1c0 0320 	rsb	r3, r0, #32
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	430b      	orrs	r3, r1
 80045fc:	40c2      	lsrs	r2, r0
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	9201      	str	r2, [sp, #4]
 8004602:	9b01      	ldr	r3, [sp, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	bf14      	ite	ne
 8004608:	2102      	movne	r1, #2
 800460a:	2101      	moveq	r1, #1
 800460c:	61bb      	str	r3, [r7, #24]
 800460e:	6139      	str	r1, [r7, #16]
 8004610:	b1c4      	cbz	r4, 8004644 <__d2b+0x88>
 8004612:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004616:	4404      	add	r4, r0
 8004618:	6034      	str	r4, [r6, #0]
 800461a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800461e:	6028      	str	r0, [r5, #0]
 8004620:	4638      	mov	r0, r7
 8004622:	b002      	add	sp, #8
 8004624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004628:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800462c:	e7d5      	b.n	80045da <__d2b+0x1e>
 800462e:	6179      	str	r1, [r7, #20]
 8004630:	e7e7      	b.n	8004602 <__d2b+0x46>
 8004632:	a801      	add	r0, sp, #4
 8004634:	f7ff fdda 	bl	80041ec <__lo0bits>
 8004638:	2101      	movs	r1, #1
 800463a:	9b01      	ldr	r3, [sp, #4]
 800463c:	6139      	str	r1, [r7, #16]
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	3020      	adds	r0, #32
 8004642:	e7e5      	b.n	8004610 <__d2b+0x54>
 8004644:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004648:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800464c:	6030      	str	r0, [r6, #0]
 800464e:	6918      	ldr	r0, [r3, #16]
 8004650:	f7ff fdad 	bl	80041ae <__hi0bits>
 8004654:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004658:	e7e1      	b.n	800461e <__d2b+0x62>

0800465a <_calloc_r>:
 800465a:	b538      	push	{r3, r4, r5, lr}
 800465c:	fb02 f401 	mul.w	r4, r2, r1
 8004660:	4621      	mov	r1, r4
 8004662:	f000 f809 	bl	8004678 <_malloc_r>
 8004666:	4605      	mov	r5, r0
 8004668:	b118      	cbz	r0, 8004672 <_calloc_r+0x18>
 800466a:	4622      	mov	r2, r4
 800466c:	2100      	movs	r1, #0
 800466e:	f7fe fb6d 	bl	8002d4c <memset>
 8004672:	4628      	mov	r0, r5
 8004674:	bd38      	pop	{r3, r4, r5, pc}
	...

08004678 <_malloc_r>:
 8004678:	b570      	push	{r4, r5, r6, lr}
 800467a:	1ccd      	adds	r5, r1, #3
 800467c:	f025 0503 	bic.w	r5, r5, #3
 8004680:	3508      	adds	r5, #8
 8004682:	2d0c      	cmp	r5, #12
 8004684:	bf38      	it	cc
 8004686:	250c      	movcc	r5, #12
 8004688:	2d00      	cmp	r5, #0
 800468a:	4606      	mov	r6, r0
 800468c:	db01      	blt.n	8004692 <_malloc_r+0x1a>
 800468e:	42a9      	cmp	r1, r5
 8004690:	d903      	bls.n	800469a <_malloc_r+0x22>
 8004692:	230c      	movs	r3, #12
 8004694:	6033      	str	r3, [r6, #0]
 8004696:	2000      	movs	r0, #0
 8004698:	bd70      	pop	{r4, r5, r6, pc}
 800469a:	f000 f869 	bl	8004770 <__malloc_lock>
 800469e:	4a21      	ldr	r2, [pc, #132]	; (8004724 <_malloc_r+0xac>)
 80046a0:	6814      	ldr	r4, [r2, #0]
 80046a2:	4621      	mov	r1, r4
 80046a4:	b991      	cbnz	r1, 80046cc <_malloc_r+0x54>
 80046a6:	4c20      	ldr	r4, [pc, #128]	; (8004728 <_malloc_r+0xb0>)
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	b91b      	cbnz	r3, 80046b4 <_malloc_r+0x3c>
 80046ac:	4630      	mov	r0, r6
 80046ae:	f000 f83d 	bl	800472c <_sbrk_r>
 80046b2:	6020      	str	r0, [r4, #0]
 80046b4:	4629      	mov	r1, r5
 80046b6:	4630      	mov	r0, r6
 80046b8:	f000 f838 	bl	800472c <_sbrk_r>
 80046bc:	1c43      	adds	r3, r0, #1
 80046be:	d124      	bne.n	800470a <_malloc_r+0x92>
 80046c0:	230c      	movs	r3, #12
 80046c2:	4630      	mov	r0, r6
 80046c4:	6033      	str	r3, [r6, #0]
 80046c6:	f000 f854 	bl	8004772 <__malloc_unlock>
 80046ca:	e7e4      	b.n	8004696 <_malloc_r+0x1e>
 80046cc:	680b      	ldr	r3, [r1, #0]
 80046ce:	1b5b      	subs	r3, r3, r5
 80046d0:	d418      	bmi.n	8004704 <_malloc_r+0x8c>
 80046d2:	2b0b      	cmp	r3, #11
 80046d4:	d90f      	bls.n	80046f6 <_malloc_r+0x7e>
 80046d6:	600b      	str	r3, [r1, #0]
 80046d8:	18cc      	adds	r4, r1, r3
 80046da:	50cd      	str	r5, [r1, r3]
 80046dc:	4630      	mov	r0, r6
 80046de:	f000 f848 	bl	8004772 <__malloc_unlock>
 80046e2:	f104 000b 	add.w	r0, r4, #11
 80046e6:	1d23      	adds	r3, r4, #4
 80046e8:	f020 0007 	bic.w	r0, r0, #7
 80046ec:	1ac3      	subs	r3, r0, r3
 80046ee:	d0d3      	beq.n	8004698 <_malloc_r+0x20>
 80046f0:	425a      	negs	r2, r3
 80046f2:	50e2      	str	r2, [r4, r3]
 80046f4:	e7d0      	b.n	8004698 <_malloc_r+0x20>
 80046f6:	684b      	ldr	r3, [r1, #4]
 80046f8:	428c      	cmp	r4, r1
 80046fa:	bf16      	itet	ne
 80046fc:	6063      	strne	r3, [r4, #4]
 80046fe:	6013      	streq	r3, [r2, #0]
 8004700:	460c      	movne	r4, r1
 8004702:	e7eb      	b.n	80046dc <_malloc_r+0x64>
 8004704:	460c      	mov	r4, r1
 8004706:	6849      	ldr	r1, [r1, #4]
 8004708:	e7cc      	b.n	80046a4 <_malloc_r+0x2c>
 800470a:	1cc4      	adds	r4, r0, #3
 800470c:	f024 0403 	bic.w	r4, r4, #3
 8004710:	42a0      	cmp	r0, r4
 8004712:	d005      	beq.n	8004720 <_malloc_r+0xa8>
 8004714:	1a21      	subs	r1, r4, r0
 8004716:	4630      	mov	r0, r6
 8004718:	f000 f808 	bl	800472c <_sbrk_r>
 800471c:	3001      	adds	r0, #1
 800471e:	d0cf      	beq.n	80046c0 <_malloc_r+0x48>
 8004720:	6025      	str	r5, [r4, #0]
 8004722:	e7db      	b.n	80046dc <_malloc_r+0x64>
 8004724:	20000234 	.word	0x20000234
 8004728:	20000238 	.word	0x20000238

0800472c <_sbrk_r>:
 800472c:	b538      	push	{r3, r4, r5, lr}
 800472e:	2300      	movs	r3, #0
 8004730:	4c05      	ldr	r4, [pc, #20]	; (8004748 <_sbrk_r+0x1c>)
 8004732:	4605      	mov	r5, r0
 8004734:	4608      	mov	r0, r1
 8004736:	6023      	str	r3, [r4, #0]
 8004738:	f7fd ff4c 	bl	80025d4 <_sbrk>
 800473c:	1c43      	adds	r3, r0, #1
 800473e:	d102      	bne.n	8004746 <_sbrk_r+0x1a>
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	b103      	cbz	r3, 8004746 <_sbrk_r+0x1a>
 8004744:	602b      	str	r3, [r5, #0]
 8004746:	bd38      	pop	{r3, r4, r5, pc}
 8004748:	2000061c 	.word	0x2000061c

0800474c <__ascii_mbtowc>:
 800474c:	b082      	sub	sp, #8
 800474e:	b901      	cbnz	r1, 8004752 <__ascii_mbtowc+0x6>
 8004750:	a901      	add	r1, sp, #4
 8004752:	b142      	cbz	r2, 8004766 <__ascii_mbtowc+0x1a>
 8004754:	b14b      	cbz	r3, 800476a <__ascii_mbtowc+0x1e>
 8004756:	7813      	ldrb	r3, [r2, #0]
 8004758:	600b      	str	r3, [r1, #0]
 800475a:	7812      	ldrb	r2, [r2, #0]
 800475c:	1c10      	adds	r0, r2, #0
 800475e:	bf18      	it	ne
 8004760:	2001      	movne	r0, #1
 8004762:	b002      	add	sp, #8
 8004764:	4770      	bx	lr
 8004766:	4610      	mov	r0, r2
 8004768:	e7fb      	b.n	8004762 <__ascii_mbtowc+0x16>
 800476a:	f06f 0001 	mvn.w	r0, #1
 800476e:	e7f8      	b.n	8004762 <__ascii_mbtowc+0x16>

08004770 <__malloc_lock>:
 8004770:	4770      	bx	lr

08004772 <__malloc_unlock>:
 8004772:	4770      	bx	lr

08004774 <__ascii_wctomb>:
 8004774:	b149      	cbz	r1, 800478a <__ascii_wctomb+0x16>
 8004776:	2aff      	cmp	r2, #255	; 0xff
 8004778:	bf8b      	itete	hi
 800477a:	238a      	movhi	r3, #138	; 0x8a
 800477c:	700a      	strbls	r2, [r1, #0]
 800477e:	6003      	strhi	r3, [r0, #0]
 8004780:	2001      	movls	r0, #1
 8004782:	bf88      	it	hi
 8004784:	f04f 30ff 	movhi.w	r0, #4294967295
 8004788:	4770      	bx	lr
 800478a:	4608      	mov	r0, r1
 800478c:	4770      	bx	lr
	...

08004790 <_init>:
 8004790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004792:	bf00      	nop
 8004794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004796:	bc08      	pop	{r3}
 8004798:	469e      	mov	lr, r3
 800479a:	4770      	bx	lr

0800479c <_fini>:
 800479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479e:	bf00      	nop
 80047a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a2:	bc08      	pop	{r3}
 80047a4:	469e      	mov	lr, r3
 80047a6:	4770      	bx	lr
