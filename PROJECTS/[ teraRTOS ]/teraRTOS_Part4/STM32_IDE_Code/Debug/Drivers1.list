
Drivers1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001038  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001168  08001168  00011168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001194  08001194  0001119c  2**0
                  CONTENTS
  4 .ARM          00000000  08001194  08001194  0001119c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001194  0800119c  0001119c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001194  08001194  00011194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001198  08001198  00011198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001119c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  20000000  0800119c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  0800119c  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001119c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006bd0  00000000  00000000  000111c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000112d  00000000  00000000  00017d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000014e0  00000000  00000000  00018ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000348  00000000  00000000  0001a3a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002c0  00000000  00000000  0001a6f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000274e  00000000  00000000  0001a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000036d7  00000000  00000000  0001d0fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00012959  00000000  00000000  000207d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003312e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ae4  00000000  00000000  000331ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001150 	.word	0x08001150

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001150 	.word	0x08001150

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <EXTI0_IRQHandler>:
// ISR functions
//-----------------------------


void EXTI0_IRQHandler(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<0); //WRITE 1 TO CLEAR
 8000188:	4b05      	ldr	r3, [pc, #20]	; (80001a0 <EXTI0_IRQHandler+0x1c>)
 800018a:	695b      	ldr	r3, [r3, #20]
 800018c:	4a04      	ldr	r2, [pc, #16]	; (80001a0 <EXTI0_IRQHandler+0x1c>)
 800018e:	f043 0301 	orr.w	r3, r3, #1
 8000192:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 8000194:	4b03      	ldr	r3, [pc, #12]	; (80001a4 <EXTI0_IRQHandler+0x20>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4798      	blx	r3
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010400 	.word	0x40010400
 80001a4:	2000002c 	.word	0x2000002c

080001a8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<1); //WRITE 1 TO CLEAR
 80001ac:	4b05      	ldr	r3, [pc, #20]	; (80001c4 <EXTI1_IRQHandler+0x1c>)
 80001ae:	695b      	ldr	r3, [r3, #20]
 80001b0:	4a04      	ldr	r2, [pc, #16]	; (80001c4 <EXTI1_IRQHandler+0x1c>)
 80001b2:	f043 0302 	orr.w	r3, r3, #2
 80001b6:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <EXTI1_IRQHandler+0x20>)
 80001ba:	685b      	ldr	r3, [r3, #4]
 80001bc:	4798      	blx	r3
}
 80001be:	bf00      	nop
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010400 	.word	0x40010400
 80001c8:	2000002c 	.word	0x2000002c

080001cc <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<2); //WRITE 1 TO CLEAR
 80001d0:	4b05      	ldr	r3, [pc, #20]	; (80001e8 <EXTI2_IRQHandler+0x1c>)
 80001d2:	695b      	ldr	r3, [r3, #20]
 80001d4:	4a04      	ldr	r2, [pc, #16]	; (80001e8 <EXTI2_IRQHandler+0x1c>)
 80001d6:	f043 0304 	orr.w	r3, r3, #4
 80001da:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 80001dc:	4b03      	ldr	r3, [pc, #12]	; (80001ec <EXTI2_IRQHandler+0x20>)
 80001de:	689b      	ldr	r3, [r3, #8]
 80001e0:	4798      	blx	r3
}
 80001e2:	bf00      	nop
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	40010400 	.word	0x40010400
 80001ec:	2000002c 	.word	0x2000002c

080001f0 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<3); //WRITE 1 TO CLEAR
 80001f4:	4b05      	ldr	r3, [pc, #20]	; (800020c <EXTI3_IRQHandler+0x1c>)
 80001f6:	695b      	ldr	r3, [r3, #20]
 80001f8:	4a04      	ldr	r2, [pc, #16]	; (800020c <EXTI3_IRQHandler+0x1c>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 8000200:	4b03      	ldr	r3, [pc, #12]	; (8000210 <EXTI3_IRQHandler+0x20>)
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	4798      	blx	r3
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40010400 	.word	0x40010400
 8000210:	2000002c 	.word	0x2000002c

08000214 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<4); //WRITE 1 TO CLEAR
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <EXTI4_IRQHandler+0x1c>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	4a04      	ldr	r2, [pc, #16]	; (8000230 <EXTI4_IRQHandler+0x1c>)
 800021e:	f043 0310 	orr.w	r3, r3, #16
 8000222:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000224:	4b03      	ldr	r3, [pc, #12]	; (8000234 <EXTI4_IRQHandler+0x20>)
 8000226:	691b      	ldr	r3, [r3, #16]
 8000228:	4798      	blx	r3
}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40010400 	.word	0x40010400
 8000234:	2000002c 	.word	0x2000002c

08000238 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	if( EXTI->EXTI_PR & (1<<5))
 800023c:	4b26      	ldr	r3, [pc, #152]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800023e:	695b      	ldr	r3, [r3, #20]
 8000240:	f003 0320 	and.w	r3, r3, #32
 8000244:	2b00      	cmp	r3, #0
 8000246:	d008      	beq.n	800025a <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->EXTI_PR |= (1<<5); //WRITE 1 TO CLEAR
 8000248:	4b23      	ldr	r3, [pc, #140]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	4a22      	ldr	r2, [pc, #136]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800024e:	f043 0320 	orr.w	r3, r3, #32
 8000252:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[5]();
 8000254:	4b21      	ldr	r3, [pc, #132]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 8000256:	695b      	ldr	r3, [r3, #20]
 8000258:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<6))
 800025a:	4b1f      	ldr	r3, [pc, #124]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000262:	2b00      	cmp	r3, #0
 8000264:	d008      	beq.n	8000278 <EXTI9_5_IRQHandler+0x40>
	{
		EXTI->EXTI_PR |= (1<<6); //WRITE 1 TO CLEAR
 8000266:	4b1c      	ldr	r3, [pc, #112]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	4a1b      	ldr	r2, [pc, #108]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800026c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000270:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[6]();
 8000272:	4b1a      	ldr	r3, [pc, #104]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<7))
 8000278:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800027a:	695b      	ldr	r3, [r3, #20]
 800027c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000280:	2b00      	cmp	r3, #0
 8000282:	d008      	beq.n	8000296 <EXTI9_5_IRQHandler+0x5e>
	{
		EXTI->EXTI_PR |= (1<<7); //WRITE 1 TO CLEAR
 8000284:	4b14      	ldr	r3, [pc, #80]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a13      	ldr	r2, [pc, #76]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800028a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800028e:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[7]();
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 8000292:	69db      	ldr	r3, [r3, #28]
 8000294:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<8))
 8000296:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d008      	beq.n	80002b4 <EXTI9_5_IRQHandler+0x7c>
	{
		EXTI->EXTI_PR |= (1<<8); //WRITE 1 TO CLEAR
 80002a2:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	4a0c      	ldr	r2, [pc, #48]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ac:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[8]();
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 80002b0:	6a1b      	ldr	r3, [r3, #32]
 80002b2:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<9))
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d008      	beq.n	80002d2 <EXTI9_5_IRQHandler+0x9a>
	{
		EXTI->EXTI_PR |= (1<<9); //WRITE 1 TO CLEAR
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ca:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[9]();
 80002cc:	4b03      	ldr	r3, [pc, #12]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 80002ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002d0:	4798      	blx	r3
	}
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40010400 	.word	0x40010400
 80002dc:	2000002c 	.word	0x2000002c

080002e0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	if( EXTI->EXTI_PR & (1<<10))
 80002e4:	4b30      	ldr	r3, [pc, #192]	; (80003a8 <EXTI15_10_IRQHandler+0xc8>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d009      	beq.n	8000304 <EXTI15_10_IRQHandler+0x24>
	{
		EXTI->EXTI_PR |= (1<<10); //WRITE 1 TO CLEAR
 80002f0:	4b2d      	ldr	r3, [pc, #180]	; (80003a8 <EXTI15_10_IRQHandler+0xc8>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a2c      	ldr	r2, [pc, #176]	; (80003a8 <EXTI15_10_IRQHandler+0xc8>)
 80002f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002fa:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[10]();
 80002fc:	4b2b      	ldr	r3, [pc, #172]	; (80003ac <EXTI15_10_IRQHandler+0xcc>)
 80002fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000300:	4798      	blx	r3
		EXTI->EXTI_PR |= (1<<15); //WRITE 1 TO CLEAR
		GP_IRQ_CallBack[15]();
	}


}
 8000302:	e04e      	b.n	80003a2 <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<11))
 8000304:	4b28      	ldr	r3, [pc, #160]	; (80003a8 <EXTI15_10_IRQHandler+0xc8>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800030c:	2b00      	cmp	r3, #0
 800030e:	d009      	beq.n	8000324 <EXTI15_10_IRQHandler+0x44>
		EXTI->EXTI_PR |= (1<<11); //WRITE 1 TO CLEAR
 8000310:	4b25      	ldr	r3, [pc, #148]	; (80003a8 <EXTI15_10_IRQHandler+0xc8>)
 8000312:	695b      	ldr	r3, [r3, #20]
 8000314:	4a24      	ldr	r2, [pc, #144]	; (80003a8 <EXTI15_10_IRQHandler+0xc8>)
 8000316:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800031a:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[11]();
 800031c:	4b23      	ldr	r3, [pc, #140]	; (80003ac <EXTI15_10_IRQHandler+0xcc>)
 800031e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000320:	4798      	blx	r3
}
 8000322:	e03e      	b.n	80003a2 <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<12))
 8000324:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <EXTI15_10_IRQHandler+0xc8>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800032c:	2b00      	cmp	r3, #0
 800032e:	d009      	beq.n	8000344 <EXTI15_10_IRQHandler+0x64>
		EXTI->EXTI_PR |= (1<<12); //WRITE 1 TO CLEAR
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <EXTI15_10_IRQHandler+0xc8>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	4a1c      	ldr	r2, [pc, #112]	; (80003a8 <EXTI15_10_IRQHandler+0xc8>)
 8000336:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800033a:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[12]();
 800033c:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <EXTI15_10_IRQHandler+0xcc>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000340:	4798      	blx	r3
}
 8000342:	e02e      	b.n	80003a2 <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<13))
 8000344:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <EXTI15_10_IRQHandler+0xc8>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800034c:	2b00      	cmp	r3, #0
 800034e:	d009      	beq.n	8000364 <EXTI15_10_IRQHandler+0x84>
		EXTI->EXTI_PR |= (1<<13); //WRITE 1 TO CLEAR
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <EXTI15_10_IRQHandler+0xc8>)
 8000352:	695b      	ldr	r3, [r3, #20]
 8000354:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <EXTI15_10_IRQHandler+0xc8>)
 8000356:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800035a:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[13]();
 800035c:	4b13      	ldr	r3, [pc, #76]	; (80003ac <EXTI15_10_IRQHandler+0xcc>)
 800035e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000360:	4798      	blx	r3
}
 8000362:	e01e      	b.n	80003a2 <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<14))
 8000364:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <EXTI15_10_IRQHandler+0xc8>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800036c:	2b00      	cmp	r3, #0
 800036e:	d009      	beq.n	8000384 <EXTI15_10_IRQHandler+0xa4>
		EXTI->EXTI_PR |= (1<<14); //WRITE 1 TO CLEAR
 8000370:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <EXTI15_10_IRQHandler+0xc8>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a0c      	ldr	r2, [pc, #48]	; (80003a8 <EXTI15_10_IRQHandler+0xc8>)
 8000376:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800037a:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[14]();
 800037c:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <EXTI15_10_IRQHandler+0xcc>)
 800037e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000380:	4798      	blx	r3
}
 8000382:	e00e      	b.n	80003a2 <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<15))
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <EXTI15_10_IRQHandler+0xc8>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800038c:	2b00      	cmp	r3, #0
 800038e:	d008      	beq.n	80003a2 <EXTI15_10_IRQHandler+0xc2>
		EXTI->EXTI_PR |= (1<<15); //WRITE 1 TO CLEAR
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <EXTI15_10_IRQHandler+0xc8>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <EXTI15_10_IRQHandler+0xc8>)
 8000396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800039a:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[15]();
 800039c:	4b03      	ldr	r3, [pc, #12]	; (80003ac <EXTI15_10_IRQHandler+0xcc>)
 800039e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003a0:	4798      	blx	r3
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40010400 	.word	0x40010400
 80003ac:	2000002c 	.word	0x2000002c

080003b0 <I2C1_ER_IRQHandler>:
 * ======================================================================================================================
 */

//Not supported
void I2C1_ER_IRQHandler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0


}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr

080003bc <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0

}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr

080003c8 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0


}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr

080003d4 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0

}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr

080003e0 <SPI1_IRQHandler>:
//------------------<< ISR >>--------------------
//-----------------------------------------------


void SPI1_IRQHandler(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
	Interrupt_flags_bits_t IRQ;
	IRQ.Receive_buffer_not_empty_flag = ( ( SPI1->SPI_SR & (1<<0) ) >> 0 );
 80003e6:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <SPI1_IRQHandler+0x40>)
 80003e8:	689b      	ldr	r3, [r3, #8]
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	793b      	ldrb	r3, [r7, #4]
 80003f2:	f362 0300 	bfi	r3, r2, #0, #1
 80003f6:	713b      	strb	r3, [r7, #4]
	IRQ.Transmit_buffer_empty_flag = ( ( SPI1->SPI_SR & (1<<1) ) >> 1 );
 80003f8:	4b09      	ldr	r3, [pc, #36]	; (8000420 <SPI1_IRQHandler+0x40>)
 80003fa:	689b      	ldr	r3, [r3, #8]
 80003fc:	085b      	lsrs	r3, r3, #1
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	b2da      	uxtb	r2, r3
 8000404:	793b      	ldrb	r3, [r7, #4]
 8000406:	f362 0341 	bfi	r3, r2, #1, #1
 800040a:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config_s->CallBack_PTR (&IRQ);
 800040c:	4b05      	ldr	r3, [pc, #20]	; (8000424 <SPI1_IRQHandler+0x44>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	1d3a      	adds	r2, r7, #4
 8000414:	4610      	mov	r0, r2
 8000416:	4798      	blx	r3



}
 8000418:	bf00      	nop
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40013000 	.word	0x40013000
 8000424:	20000068 	.word	0x20000068

08000428 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
	Interrupt_flags_bits_t IRQ;
	IRQ.Receive_buffer_not_empty_flag = ( ( SPI2->SPI_SR & (1<<0) ) >> 0 );
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <SPI2_IRQHandler+0x40>)
 8000430:	689b      	ldr	r3, [r3, #8]
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	b2da      	uxtb	r2, r3
 8000438:	793b      	ldrb	r3, [r7, #4]
 800043a:	f362 0300 	bfi	r3, r2, #0, #1
 800043e:	713b      	strb	r3, [r7, #4]
	IRQ.Transmit_buffer_empty_flag = ( ( SPI2->SPI_SR & (1<<1) ) >> 1 );
 8000440:	4b09      	ldr	r3, [pc, #36]	; (8000468 <SPI2_IRQHandler+0x40>)
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	085b      	lsrs	r3, r3, #1
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	b2da      	uxtb	r2, r3
 800044c:	793b      	ldrb	r3, [r7, #4]
 800044e:	f362 0341 	bfi	r3, r2, #1, #1
 8000452:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config_s->CallBack_PTR (&IRQ);
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <SPI2_IRQHandler+0x44>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	1d3a      	adds	r2, r7, #4
 800045c:	4610      	mov	r0, r2
 800045e:	4798      	blx	r3

}
 8000460:	bf00      	nop
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40003800 	.word	0x40003800
 800046c:	20000068 	.word	0x20000068

08000470 <USART1_IRQHandler>:

//-----------------------------------------------
//------------------<< ISR >>--------------------
//-----------------------------------------------
void USART1_IRQHandler(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
	interrupts_Bits IRQ = { ( (USART1->USART_SR) & (0b1<<5) ) >> 5 , ( (USART1->USART_SR) & (0b1<<6) ) >> 6 , ( (USART1->USART_SR) & (0b1<<7) ) >> 7};
 8000476:	2300      	movs	r3, #0
 8000478:	713b      	strb	r3, [r7, #4]
 800047a:	4b14      	ldr	r3, [pc, #80]	; (80004cc <USART1_IRQHandler+0x5c>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	095b      	lsrs	r3, r3, #5
 8000480:	f003 0301 	and.w	r3, r3, #1
 8000484:	b2da      	uxtb	r2, r3
 8000486:	793b      	ldrb	r3, [r7, #4]
 8000488:	f362 0300 	bfi	r3, r2, #0, #1
 800048c:	713b      	strb	r3, [r7, #4]
 800048e:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <USART1_IRQHandler+0x5c>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	099b      	lsrs	r3, r3, #6
 8000494:	f003 0301 	and.w	r3, r3, #1
 8000498:	b2da      	uxtb	r2, r3
 800049a:	793b      	ldrb	r3, [r7, #4]
 800049c:	f362 0341 	bfi	r3, r2, #1, #1
 80004a0:	713b      	strb	r3, [r7, #4]
 80004a2:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <USART1_IRQHandler+0x5c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	09db      	lsrs	r3, r3, #7
 80004a8:	f003 0301 	and.w	r3, r3, #1
 80004ac:	b2da      	uxtb	r2, r3
 80004ae:	793b      	ldrb	r3, [r7, #4]
 80004b0:	f362 0382 	bfi	r3, r2, #2, #1
 80004b4:	713b      	strb	r3, [r7, #4]
	Global_USART_Config_s->CallBack_FN (&IRQ);
 80004b6:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <USART1_IRQHandler+0x60>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	695b      	ldr	r3, [r3, #20]
 80004bc:	1d3a      	adds	r2, r7, #4
 80004be:	4610      	mov	r0, r2
 80004c0:	4798      	blx	r3
}
 80004c2:	bf00      	nop
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40013800 	.word	0x40013800
 80004d0:	2000001c 	.word	0x2000001c

080004d4 <task1>:


uint8_t Task1LED,Task2LED,Task3LED,Task4LED=0;


void task1(void) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	static int count =0;
	while(1)
	{
		//Task 1 code
		Task1LED ^= 1;
 80004d8:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <task1+0x3c>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	f083 0301 	eor.w	r3, r3, #1
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <task1+0x3c>)
 80004e4:	701a      	strb	r2, [r3, #0]
		count++;
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <task1+0x40>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	3301      	adds	r3, #1
 80004ec:	4a09      	ldr	r2, [pc, #36]	; (8000514 <task1+0x40>)
 80004ee:	6013      	str	r3, [r2, #0]
		if(count ==30)
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <task1+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b1e      	cmp	r3, #30
 80004f6:	d105      	bne.n	8000504 <task1+0x30>
		{
		teraRTOS_ActivateTask(&Task4);
 80004f8:	4807      	ldr	r0, [pc, #28]	; (8000518 <task1+0x44>)
 80004fa:	f000 fcb9 	bl	8000e70 <teraRTOS_ActivateTask>
		count =0;
 80004fe:	4b05      	ldr	r3, [pc, #20]	; (8000514 <task1+0x40>)
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
		}
		teraRTOS_TaskWait(100, &Task1);
 8000504:	4905      	ldr	r1, [pc, #20]	; (800051c <task1+0x48>)
 8000506:	2064      	movs	r0, #100	; 0x64
 8000508:	f000 fcd6 	bl	8000eb8 <teraRTOS_TaskWait>
		Task1LED ^= 1;
 800050c:	e7e4      	b.n	80004d8 <task1+0x4>
 800050e:	bf00      	nop
 8000510:	2000013c 	.word	0x2000013c
 8000514:	20000024 	.word	0x20000024
 8000518:	2000006c 	.word	0x2000006c
 800051c:	200000b0 	.word	0x200000b0

08000520 <task2>:

	}
}

void task2(void) {
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0

	while(1)
	{
		//Task 2 code
		Task2LED ^= 1;
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <task2+0x20>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	f083 0301 	eor.w	r3, r3, #1
 800052c:	b2da      	uxtb	r2, r3
 800052e:	4b04      	ldr	r3, [pc, #16]	; (8000540 <task2+0x20>)
 8000530:	701a      	strb	r2, [r3, #0]
		teraRTOS_TaskWait(300, &Task2);
 8000532:	4904      	ldr	r1, [pc, #16]	; (8000544 <task2+0x24>)
 8000534:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000538:	f000 fcbe 	bl	8000eb8 <teraRTOS_TaskWait>
		Task2LED ^= 1;
 800053c:	e7f2      	b.n	8000524 <task2+0x4>
 800053e:	bf00      	nop
 8000540:	200000f4 	.word	0x200000f4
 8000544:	20000140 	.word	0x20000140

08000548 <task3>:

	}
}

void task3(void) {
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0

	while(1)
	{
		//Task 3 code
		Task3LED ^= 1;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <task3+0x20>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	f083 0301 	eor.w	r3, r3, #1
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <task3+0x20>)
 8000558:	701a      	strb	r2, [r3, #0]
		teraRTOS_TaskWait(500, &Task3);
 800055a:	4904      	ldr	r1, [pc, #16]	; (800056c <task3+0x24>)
 800055c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000560:	f000 fcaa 	bl	8000eb8 <teraRTOS_TaskWait>
		Task3LED ^= 1;
 8000564:	e7f2      	b.n	800054c <task3+0x4>
 8000566:	bf00      	nop
 8000568:	20000184 	.word	0x20000184
 800056c:	200000f8 	.word	0x200000f8

08000570 <task4>:

	}
}

void task4(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0

	while(1)
	{
		//Task 4 code
		Task4LED ^= 1;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <task4+0x20>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	f083 0301 	eor.w	r3, r3, #1
 800057c:	b2da      	uxtb	r2, r3
 800057e:	4b04      	ldr	r3, [pc, #16]	; (8000590 <task4+0x20>)
 8000580:	701a      	strb	r2, [r3, #0]
		teraRTOS_TaskWait(1000, &Task4);
 8000582:	4904      	ldr	r1, [pc, #16]	; (8000594 <task4+0x24>)
 8000584:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000588:	f000 fc96 	bl	8000eb8 <teraRTOS_TaskWait>
		Task4LED ^= 1;
 800058c:	e7f2      	b.n	8000574 <task4+0x4>
 800058e:	bf00      	nop
 8000590:	20000020 	.word	0x20000020
 8000594:	2000006c 	.word	0x2000006c

08000598 <main>:
	}
}



int main(void){
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0

	TERA_RTOS_ErrorType Error;
	//HW INIT (Initialize ClockTree, ResetController)
	HW_init();
 800059e:	f000 f921 	bl	80007e4 <HW_init>

	if(TERA_RTOS_init() != NoError)
 80005a2:	f000 fb95 	bl	8000cd0 <TERA_RTOS_init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d000      	beq.n	80005ae <main+0x16>
		while(1);
 80005ac:	e7fe      	b.n	80005ac <main+0x14>

	Task1.Stack_Size = 1024;
 80005ae:	4b38      	ldr	r3, [pc, #224]	; (8000690 <main+0xf8>)
 80005b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005b4:	601a      	str	r2, [r3, #0]
	Task1.TaskEntry_Ptr = task1;
 80005b6:	4b36      	ldr	r3, [pc, #216]	; (8000690 <main+0xf8>)
 80005b8:	4a36      	ldr	r2, [pc, #216]	; (8000694 <main+0xfc>)
 80005ba:	609a      	str	r2, [r3, #8]
	Task1.Priority = 3;
 80005bc:	4b34      	ldr	r3, [pc, #208]	; (8000690 <main+0xf8>)
 80005be:	2203      	movs	r2, #3
 80005c0:	711a      	strb	r2, [r3, #4]
	strcpy(Task1.TaskName, "Task_1");
 80005c2:	4b35      	ldr	r3, [pc, #212]	; (8000698 <main+0x100>)
 80005c4:	4a35      	ldr	r2, [pc, #212]	; (800069c <main+0x104>)
 80005c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ca:	6018      	str	r0, [r3, #0]
 80005cc:	3304      	adds	r3, #4
 80005ce:	8019      	strh	r1, [r3, #0]
 80005d0:	3302      	adds	r3, #2
 80005d2:	0c0a      	lsrs	r2, r1, #16
 80005d4:	701a      	strb	r2, [r3, #0]

	Task2.Stack_Size = 1024;
 80005d6:	4b32      	ldr	r3, [pc, #200]	; (80006a0 <main+0x108>)
 80005d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005dc:	601a      	str	r2, [r3, #0]
	Task2.TaskEntry_Ptr = task2;
 80005de:	4b30      	ldr	r3, [pc, #192]	; (80006a0 <main+0x108>)
 80005e0:	4a30      	ldr	r2, [pc, #192]	; (80006a4 <main+0x10c>)
 80005e2:	609a      	str	r2, [r3, #8]
	Task2.Priority = 3;
 80005e4:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <main+0x108>)
 80005e6:	2203      	movs	r2, #3
 80005e8:	711a      	strb	r2, [r3, #4]
	strcpy(Task2.TaskName, "Task_2");
 80005ea:	4b2f      	ldr	r3, [pc, #188]	; (80006a8 <main+0x110>)
 80005ec:	4a2f      	ldr	r2, [pc, #188]	; (80006ac <main+0x114>)
 80005ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005f2:	6018      	str	r0, [r3, #0]
 80005f4:	3304      	adds	r3, #4
 80005f6:	8019      	strh	r1, [r3, #0]
 80005f8:	3302      	adds	r3, #2
 80005fa:	0c0a      	lsrs	r2, r1, #16
 80005fc:	701a      	strb	r2, [r3, #0]

	Task3.Stack_Size = 1024;
 80005fe:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <main+0x118>)
 8000600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000604:	601a      	str	r2, [r3, #0]
	Task3.TaskEntry_Ptr = task3;
 8000606:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <main+0x118>)
 8000608:	4a2a      	ldr	r2, [pc, #168]	; (80006b4 <main+0x11c>)
 800060a:	609a      	str	r2, [r3, #8]
	Task3.Priority = 3;
 800060c:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <main+0x118>)
 800060e:	2203      	movs	r2, #3
 8000610:	711a      	strb	r2, [r3, #4]
	strcpy(Task3.TaskName, "Task_3");
 8000612:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <main+0x120>)
 8000614:	4a29      	ldr	r2, [pc, #164]	; (80006bc <main+0x124>)
 8000616:	e892 0003 	ldmia.w	r2, {r0, r1}
 800061a:	6018      	str	r0, [r3, #0]
 800061c:	3304      	adds	r3, #4
 800061e:	8019      	strh	r1, [r3, #0]
 8000620:	3302      	adds	r3, #2
 8000622:	0c0a      	lsrs	r2, r1, #16
 8000624:	701a      	strb	r2, [r3, #0]


	Task4.Stack_Size = 1024;
 8000626:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <main+0x128>)
 8000628:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800062c:	601a      	str	r2, [r3, #0]
	Task4.TaskEntry_Ptr = task4;
 800062e:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <main+0x128>)
 8000630:	4a24      	ldr	r2, [pc, #144]	; (80006c4 <main+0x12c>)
 8000632:	609a      	str	r2, [r3, #8]
	Task4.Priority = 1;
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <main+0x128>)
 8000636:	2201      	movs	r2, #1
 8000638:	711a      	strb	r2, [r3, #4]
	strcpy(Task3.TaskName, "Task_4");
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <main+0x120>)
 800063c:	4a22      	ldr	r2, [pc, #136]	; (80006c8 <main+0x130>)
 800063e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000642:	6018      	str	r0, [r3, #0]
 8000644:	3304      	adds	r3, #4
 8000646:	8019      	strh	r1, [r3, #0]
 8000648:	3302      	adds	r3, #2
 800064a:	0c0a      	lsrs	r2, r1, #16
 800064c:	701a      	strb	r2, [r3, #0]

	Error = teraRTOS_CreateTask(&Task1);
 800064e:	4810      	ldr	r0, [pc, #64]	; (8000690 <main+0xf8>)
 8000650:	f000 fbb8 	bl	8000dc4 <teraRTOS_CreateTask>
 8000654:	4603      	mov	r3, r0
 8000656:	71fb      	strb	r3, [r7, #7]
	Error = teraRTOS_CreateTask(&Task2);
 8000658:	4811      	ldr	r0, [pc, #68]	; (80006a0 <main+0x108>)
 800065a:	f000 fbb3 	bl	8000dc4 <teraRTOS_CreateTask>
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	Error = teraRTOS_CreateTask(&Task3);
 8000662:	4813      	ldr	r0, [pc, #76]	; (80006b0 <main+0x118>)
 8000664:	f000 fbae 	bl	8000dc4 <teraRTOS_CreateTask>
 8000668:	4603      	mov	r3, r0
 800066a:	71fb      	strb	r3, [r7, #7]
	Error = teraRTOS_CreateTask(&Task4);
 800066c:	4814      	ldr	r0, [pc, #80]	; (80006c0 <main+0x128>)
 800066e:	f000 fba9 	bl	8000dc4 <teraRTOS_CreateTask>
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]


	teraRTOS_ActivateTask(&Task1);
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <main+0xf8>)
 8000678:	f000 fbfa 	bl	8000e70 <teraRTOS_ActivateTask>
	teraRTOS_ActivateTask(&Task2);
 800067c:	4808      	ldr	r0, [pc, #32]	; (80006a0 <main+0x108>)
 800067e:	f000 fbf7 	bl	8000e70 <teraRTOS_ActivateTask>
	teraRTOS_ActivateTask(&Task3);
 8000682:	480b      	ldr	r0, [pc, #44]	; (80006b0 <main+0x118>)
 8000684:	f000 fbf4 	bl	8000e70 <teraRTOS_ActivateTask>
//	teraRTOS_ActivateTask(&Task4);



	teraRTOS_START();
 8000688:	f000 fc2a 	bl	8000ee0 <teraRTOS_START>




	while(1)
 800068c:	e7fe      	b.n	800068c <main+0xf4>
 800068e:	bf00      	nop
 8000690:	200000b0 	.word	0x200000b0
 8000694:	080004d5 	.word	0x080004d5
 8000698:	200000cc 	.word	0x200000cc
 800069c:	08001168 	.word	0x08001168
 80006a0:	20000140 	.word	0x20000140
 80006a4:	08000521 	.word	0x08000521
 80006a8:	2000015c 	.word	0x2000015c
 80006ac:	08001170 	.word	0x08001170
 80006b0:	200000f8 	.word	0x200000f8
 80006b4:	08000549 	.word	0x08000549
 80006b8:	20000114 	.word	0x20000114
 80006bc:	08001178 	.word	0x08001178
 80006c0:	2000006c 	.word	0x2000006c
 80006c4:	08000571 	.word	0x08000571
 80006c8:	08001180 	.word	0x08001180

080006cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d4:	480c      	ldr	r0, [pc, #48]	; (8000708 <LoopForever+0x6>)
  ldr r1, =_edata
 80006d6:	490d      	ldr	r1, [pc, #52]	; (800070c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d8:	4a0d      	ldr	r2, [pc, #52]	; (8000710 <LoopForever+0xe>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006dc:	e002      	b.n	80006e4 <LoopCopyDataInit>

080006de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e2:	3304      	adds	r3, #4

080006e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e8:	d3f9      	bcc.n	80006de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ea:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006ec:	4c0a      	ldr	r4, [pc, #40]	; (8000718 <LoopForever+0x16>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f0:	e001      	b.n	80006f6 <LoopFillZerobss>

080006f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f4:	3204      	adds	r2, #4

080006f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f8:	d3fb      	bcc.n	80006f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006fa:	f000 fd05 	bl	8001108 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fe:	f7ff ff4b 	bl	8000598 <main>

08000702 <LoopForever>:

LoopForever:
    b LoopForever
 8000702:	e7fe      	b.n	8000702 <LoopForever>
  ldr   r0, =_estack
 8000704:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800070c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000710:	0800119c 	.word	0x0800119c
  ldr r2, =_sbss
 8000714:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000718:	20000520 	.word	0x20000520

0800071c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800071c:	e7fe      	b.n	800071c <ADC1_2_IRQHandler>
	...

08000720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	6039      	str	r1, [r7, #0]
 800072a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800072c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000730:	2b00      	cmp	r3, #0
 8000732:	db0a      	blt.n	800074a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	b2da      	uxtb	r2, r3
 8000738:	490c      	ldr	r1, [pc, #48]	; (800076c <__NVIC_SetPriority+0x4c>)
 800073a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073e:	0152      	lsls	r2, r2, #5
 8000740:	b2d2      	uxtb	r2, r2
 8000742:	440b      	add	r3, r1
 8000744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000748:	e00a      	b.n	8000760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4908      	ldr	r1, [pc, #32]	; (8000770 <__NVIC_SetPriority+0x50>)
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	f003 030f 	and.w	r3, r3, #15
 8000756:	3b04      	subs	r3, #4
 8000758:	0152      	lsls	r2, r2, #5
 800075a:	b2d2      	uxtb	r2, r2
 800075c:	440b      	add	r3, r1
 800075e:	761a      	strb	r2, [r3, #24]
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000e100 	.word	0xe000e100
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3b01      	subs	r3, #1
 8000780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000784:	d301      	bcc.n	800078a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000786:	2301      	movs	r3, #1
 8000788:	e00f      	b.n	80007aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <SysTick_Config+0x40>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000792:	2107      	movs	r1, #7
 8000794:	f04f 30ff 	mov.w	r0, #4294967295
 8000798:	f7ff ffc2 	bl	8000720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <SysTick_Config+0x40>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a2:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <SysTick_Config+0x40>)
 80007a4:	2207      	movs	r2, #7
 80007a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	e000e010 	.word	0xe000e010

080007b8 <HardFault_Handler>:
extern void Decide_WhatNext(void);


uint8_t SysTickLED =0;

void HardFault_Handler(void) {
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

	while(1);
 80007bc:	e7fe      	b.n	80007bc <HardFault_Handler+0x4>

080007be <MemManage_Handler>:

}
void MemManage_Handler(void){
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

	while(1);
 80007c2:	e7fe      	b.n	80007c2 <MemManage_Handler+0x4>

080007c4 <BusFault_Handler>:

}
void BusFault_Handler(void){
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

	while(1);
 80007c8:	e7fe      	b.n	80007c8 <BusFault_Handler+0x4>

080007ca <UsageFault_Handler>:

}
void UsageFault_Handler(void){
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

	while(1);
 80007ce:	e7fe      	b.n	80007ce <UsageFault_Handler+0x4>

080007d0 <SVC_Handler>:
}


__attribute ((naked)) void SVC_Handler(void)
{
	__asm("TST LR,0x4");
 80007d0:	f01e 0f04 	tst.w	lr, #4
	__asm("ITE EQ");
 80007d4:	bf0c      	ite	eq
	__asm("MRSEQ R0,MSP");
 80007d6:	f3ef 8008 	mrseq	r0, MSP
	__asm("MRSNE R0,PSP");
 80007da:	f3ef 8009 	mrsne	r0, PSP
	__asm("B OS_SVC_services");
 80007de:	f000 b93b 	b.w	8000a58 <OS_SVC_services>



}
 80007e2:	bf00      	nop

080007e4 <HW_init>:

void HW_init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	// x count -> 1 ms
	// x = 8000 Count

	// Decrease PendSV interrupt priority to be smaller than or equal SysTick Timer
	//SysTick has a priority equal to 14
	__NVIC_SetPriority(PendSV_IRQn, 15);
 80007e8:	210f      	movs	r1, #15
 80007ea:	f06f 0001 	mvn.w	r0, #1
 80007ee:	f7ff ff97 	bl	8000720 <__NVIC_SetPriority>



}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <trigger_OS_PendSV>:
void trigger_OS_PendSV(void){
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <trigger_OS_PendSV+0x18>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	4a03      	ldr	r2, [pc, #12]	; (8000810 <trigger_OS_PendSV+0x18>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000806:	6053      	str	r3, [r2, #4]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <Start_Ticker>:


void Start_Ticker()
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	//8 MHZ
	// 1 count -> 0.125 us
	// x count -> 1 ms
	// x = 8000 Count

	SysTick_Config(8000);
 8000818:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800081c:	f7ff ffaa 	bl	8000774 <SysTick_Config>

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

	SysTickLED ^= 1;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <SysTick_Handler+0x24>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	f083 0301 	eor.w	r3, r3, #1
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <SysTick_Handler+0x24>)
 8000834:	701a      	strb	r2, [r3, #0]
	teraRTOS_Update_TaskWaitingTime();
 8000836:	f000 fb7f 	bl	8000f38 <teraRTOS_Update_TaskWaitingTime>
	//Determine Pcurrent&Pnext
	Decide_WhatNext();
 800083a:	f000 f8bb 	bl	80009b4 <Decide_WhatNext>
	//Context Switch/Restore
	trigger_OS_PendSV();
 800083e:	f7ff ffdb 	bl	80007f8 <trigger_OS_PendSV>

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000028 	.word	0x20000028

0800084c <BubbleSort>:
	SVC_WaitingTask
}SVC_ID;


//Handler Mode
void BubbleSort(){
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0

	uint8_t i=0;
 8000852:	2300      	movs	r3, #0
 8000854:	71fb      	strb	r3, [r7, #7]
	uint8_t j=0;
 8000856:	2300      	movs	r3, #0
 8000858:	71bb      	strb	r3, [r7, #6]
	uint8_t n;


	Task_Creation * temp;
	n = OS_Control.ActiveTasks_number;
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <BubbleSort+0x94>)
 800085c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000860:	717b      	strb	r3, [r7, #5]

	for(i=0; i<n-1; i++)
 8000862:	2300      	movs	r3, #0
 8000864:	71fb      	strb	r3, [r7, #7]
 8000866:	e030      	b.n	80008ca <BubbleSort+0x7e>
	{
		for(j=0; j<n-i-1; j++)
 8000868:	2300      	movs	r3, #0
 800086a:	71bb      	strb	r3, [r7, #6]
 800086c:	e023      	b.n	80008b6 <BubbleSort+0x6a>
		{
			if (OS_Control.OS_Tasks[j]->Priority > OS_Control.OS_Tasks[j+1]->Priority)
 800086e:	79bb      	ldrb	r3, [r7, #6]
 8000870:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <BubbleSort+0x94>)
 8000872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000876:	791a      	ldrb	r2, [r3, #4]
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	3301      	adds	r3, #1
 800087c:	4918      	ldr	r1, [pc, #96]	; (80008e0 <BubbleSort+0x94>)
 800087e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000882:	791b      	ldrb	r3, [r3, #4]
 8000884:	429a      	cmp	r2, r3
 8000886:	d913      	bls.n	80008b0 <BubbleSort+0x64>
			{
				temp = OS_Control.OS_Tasks[j];
 8000888:	79bb      	ldrb	r3, [r7, #6]
 800088a:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <BubbleSort+0x94>)
 800088c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000890:	603b      	str	r3, [r7, #0]
				OS_Control.OS_Tasks[j] = OS_Control.OS_Tasks[j+1];
 8000892:	79bb      	ldrb	r3, [r7, #6]
 8000894:	1c5a      	adds	r2, r3, #1
 8000896:	79bb      	ldrb	r3, [r7, #6]
 8000898:	4911      	ldr	r1, [pc, #68]	; (80008e0 <BubbleSort+0x94>)
 800089a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800089e:	4910      	ldr	r1, [pc, #64]	; (80008e0 <BubbleSort+0x94>)
 80008a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OS_Tasks[j+1] = temp;
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	3301      	adds	r3, #1
 80008a8:	490d      	ldr	r1, [pc, #52]	; (80008e0 <BubbleSort+0x94>)
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(j=0; j<n-i-1; j++)
 80008b0:	79bb      	ldrb	r3, [r7, #6]
 80008b2:	3301      	adds	r3, #1
 80008b4:	71bb      	strb	r3, [r7, #6]
 80008b6:	79ba      	ldrb	r2, [r7, #6]
 80008b8:	7979      	ldrb	r1, [r7, #5]
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	1acb      	subs	r3, r1, r3
 80008be:	3b01      	subs	r3, #1
 80008c0:	429a      	cmp	r2, r3
 80008c2:	dbd4      	blt.n	800086e <BubbleSort+0x22>
	for(i=0; i<n-1; i++)
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	3301      	adds	r3, #1
 80008c8:	71fb      	strb	r3, [r7, #7]
 80008ca:	79fa      	ldrb	r2, [r7, #7]
 80008cc:	797b      	ldrb	r3, [r7, #5]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	429a      	cmp	r2, r3
 80008d2:	dbc9      	blt.n	8000868 <BubbleSort+0x1c>

		}
	}


}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000374 	.word	0x20000374

080008e4 <teraRTOS_Update_SchedulerTable>:

//Handler MODE
void teraRTOS_Update_SchedulerTable(){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0

	Task_Creation * Ptask;
	Task_Creation * PnextTask;

	int i = 0 ;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]



	Task_Creation * temp = NULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]

	//1- Bubble sort the scheduler table -> OS_Control.OS_Tasks[100] (FROM HIGH PRIORITY TO LOW)
	BubbleSort();
 80008f2:	f7ff ffab 	bl	800084c <BubbleSort>
	//2- Free ready queue
	while(FIFO_dequeue(&Ready_Queue, &temp) != FIFO_EMPTY);
 80008f6:	bf00      	nop
 80008f8:	463b      	mov	r3, r7
 80008fa:	4619      	mov	r1, r3
 80008fc:	482b      	ldr	r0, [pc, #172]	; (80009ac <teraRTOS_Update_SchedulerTable+0xc8>)
 80008fe:	f000 fbc5 	bl	800108c <FIFO_dequeue>
 8000902:	4603      	mov	r3, r0
 8000904:	2b02      	cmp	r3, #2
 8000906:	d1f7      	bne.n	80008f8 <teraRTOS_Update_SchedulerTable+0x14>

	//3- Update ready queue
	while(i< OS_Control.ActiveTasks_number)
 8000908:	e044      	b.n	8000994 <teraRTOS_Update_SchedulerTable+0xb0>
	{
		Ptask =	OS_Control.OS_Tasks[i];
 800090a:	4a29      	ldr	r2, [pc, #164]	; (80009b0 <teraRTOS_Update_SchedulerTable+0xcc>)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000912:	60bb      	str	r3, [r7, #8]
		PnextTask =	OS_Control.OS_Tasks[i+1];
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	3301      	adds	r3, #1
 8000918:	4a25      	ldr	r2, [pc, #148]	; (80009b0 <teraRTOS_Update_SchedulerTable+0xcc>)
 800091a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091e:	607b      	str	r3, [r7, #4]
		if(Ptask->TaskState != Suspended)
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000926:	2b00      	cmp	r3, #0
 8000928:	d031      	beq.n	800098e <teraRTOS_Update_SchedulerTable+0xaa>
		{
			if(PnextTask->TaskState == Suspended)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000930:	2b00      	cmp	r3, #0
 8000932:	d108      	bne.n	8000946 <teraRTOS_Update_SchedulerTable+0x62>
			{
				FIFO_enqueue(&Ready_Queue, Ptask);
 8000934:	68b9      	ldr	r1, [r7, #8]
 8000936:	481d      	ldr	r0, [pc, #116]	; (80009ac <teraRTOS_Update_SchedulerTable+0xc8>)
 8000938:	f000 fb66 	bl	8001008 <FIFO_enqueue>
				Ptask->TaskState = Ready;
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	2203      	movs	r2, #3
 8000940:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 8000944:	e02e      	b.n	80009a4 <teraRTOS_Update_SchedulerTable+0xc0>
			}
			if(Ptask->Priority < PnextTask->Priority)
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	791a      	ldrb	r2, [r3, #4]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	791b      	ldrb	r3, [r3, #4]
 800094e:	429a      	cmp	r2, r3
 8000950:	d208      	bcs.n	8000964 <teraRTOS_Update_SchedulerTable+0x80>
			{
				FIFO_enqueue(&Ready_Queue, Ptask);
 8000952:	68b9      	ldr	r1, [r7, #8]
 8000954:	4815      	ldr	r0, [pc, #84]	; (80009ac <teraRTOS_Update_SchedulerTable+0xc8>)
 8000956:	f000 fb57 	bl	8001008 <FIFO_enqueue>
				Ptask->TaskState = Ready;
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	2203      	movs	r2, #3
 800095e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 8000962:	e01f      	b.n	80009a4 <teraRTOS_Update_SchedulerTable+0xc0>
			}
			else if( (Ptask->Priority) == (PnextTask->Priority) )
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	791a      	ldrb	r2, [r3, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	791b      	ldrb	r3, [r3, #4]
 800096c:	429a      	cmp	r2, r3
 800096e:	d108      	bne.n	8000982 <teraRTOS_Update_SchedulerTable+0x9e>
			{
				FIFO_enqueue(&Ready_Queue, Ptask);
 8000970:	68b9      	ldr	r1, [r7, #8]
 8000972:	480e      	ldr	r0, [pc, #56]	; (80009ac <teraRTOS_Update_SchedulerTable+0xc8>)
 8000974:	f000 fb48 	bl	8001008 <FIFO_enqueue>
				Ptask->TaskState = Ready;
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	2203      	movs	r2, #3
 800097c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8000980:	e005      	b.n	800098e <teraRTOS_Update_SchedulerTable+0xaa>
			}
			else if(Ptask->Priority > PnextTask->Priority) // This condition not allowed to happen because of Bubble sorting
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	791a      	ldrb	r2, [r3, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	791b      	ldrb	r3, [r3, #4]
 800098a:	429a      	cmp	r2, r3
 800098c:	d809      	bhi.n	80009a2 <teraRTOS_Update_SchedulerTable+0xbe>
			}
		}



		i++;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	3301      	adds	r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
	while(i< OS_Control.ActiveTasks_number)
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <teraRTOS_Update_SchedulerTable+0xcc>)
 8000996:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	429a      	cmp	r2, r3
 800099e:	d8b4      	bhi.n	800090a <teraRTOS_Update_SchedulerTable+0x26>
	}

}
 80009a0:	e000      	b.n	80009a4 <teraRTOS_Update_SchedulerTable+0xc0>
				break;
 80009a2:	bf00      	nop
}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200001cc 	.word	0x200001cc
 80009b0:	20000374 	.word	0x20000374

080009b4 <Decide_WhatNext>:

//Handler Mode
void Decide_WhatNext(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0

	//if ready queue is empty && OS_Control.CurrentTask->TaskState != Suspended
	if(Ready_Queue.counter == 0 && OS_Control.CurrentTask->TaskState != Suspended)
 80009b8:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <Decide_WhatNext+0x98>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d11a      	bne.n	80009f6 <Decide_WhatNext+0x42>
 80009c0:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <Decide_WhatNext+0x9c>)
 80009c2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d013      	beq.n	80009f6 <Decide_WhatNext+0x42>
	{
		OS_Control.CurrentTask->TaskState = Running;
 80009ce:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <Decide_WhatNext+0x9c>)
 80009d0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009d4:	2201      	movs	r2, #1
 80009d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		FIFO_enqueue(&Ready_Queue, OS_Control.CurrentTask);
 80009da:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <Decide_WhatNext+0x9c>)
 80009dc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009e0:	4619      	mov	r1, r3
 80009e2:	481a      	ldr	r0, [pc, #104]	; (8000a4c <Decide_WhatNext+0x98>)
 80009e4:	f000 fb10 	bl	8001008 <FIFO_enqueue>
		OS_Control.NextTask =  OS_Control.CurrentTask;
 80009e8:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <Decide_WhatNext+0x9c>)
 80009ea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009ee:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <Decide_WhatNext+0x9c>)
 80009f0:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
			FIFO_enqueue(&Ready_Queue, OS_Control.CurrentTask);
			OS_Control.CurrentTask->TaskState = Ready;
		}
	}

}
 80009f4:	e027      	b.n	8000a46 <Decide_WhatNext+0x92>
		FIFO_dequeue(&Ready_Queue, &OS_Control.NextTask);
 80009f6:	4917      	ldr	r1, [pc, #92]	; (8000a54 <Decide_WhatNext+0xa0>)
 80009f8:	4814      	ldr	r0, [pc, #80]	; (8000a4c <Decide_WhatNext+0x98>)
 80009fa:	f000 fb47 	bl	800108c <FIFO_dequeue>
		OS_Control.NextTask->TaskState = Running;
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <Decide_WhatNext+0x9c>)
 8000a00:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000a04:	2201      	movs	r2, #1
 8000a06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if( (OS_Control.CurrentTask->Priority == OS_Control.NextTask->Priority ) && (OS_Control.CurrentTask->TaskState != Suspended) )
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <Decide_WhatNext+0x9c>)
 8000a0c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a10:	791a      	ldrb	r2, [r3, #4]
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <Decide_WhatNext+0x9c>)
 8000a14:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000a18:	791b      	ldrb	r3, [r3, #4]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d113      	bne.n	8000a46 <Decide_WhatNext+0x92>
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <Decide_WhatNext+0x9c>)
 8000a20:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a24:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d00c      	beq.n	8000a46 <Decide_WhatNext+0x92>
			FIFO_enqueue(&Ready_Queue, OS_Control.CurrentTask);
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <Decide_WhatNext+0x9c>)
 8000a2e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <Decide_WhatNext+0x98>)
 8000a36:	f000 fae7 	bl	8001008 <FIFO_enqueue>
			OS_Control.CurrentTask->TaskState = Ready;
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <Decide_WhatNext+0x9c>)
 8000a3c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a40:	2203      	movs	r2, #3
 8000a42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200001cc 	.word	0x200001cc
 8000a50:	20000374 	.word	0x20000374
 8000a54:	20000518 	.word	0x20000518

08000a58 <OS_SVC_services>:

//To execute specific OS service
// Handler Mode
void OS_SVC_services(int * StackFramePointer)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	//OS_SVC_Set Stack -> R0 -> argument 0 = StackFramePointer
	//OS_SVC_Set Stack : R0,R1,R2,R3,R12,LR,PC,xPSR
	unsigned char SVC_Number;
	SVC_Number =  *((unsigned char*)( ( (unsigned char*)StackFramePointer[6] ) - 2 )) ;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3318      	adds	r3, #24
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	3b02      	subs	r3, #2
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	73fb      	strb	r3, [r7, #15]

	switch(SVC_Number)
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	db20      	blt.n	8000ab4 <OS_SVC_services+0x5c>
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	dd02      	ble.n	8000a7c <OS_SVC_services+0x24>
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d017      	beq.n	8000aaa <OS_SVC_services+0x52>
		teraRTOS_Update_SchedulerTable();

		break;
	}

	return;
 8000a7a:	e01b      	b.n	8000ab4 <OS_SVC_services+0x5c>
		teraRTOS_Update_SchedulerTable();
 8000a7c:	f7ff ff32 	bl	80008e4 <teraRTOS_Update_SchedulerTable>
		if(OS_Control.OS_Modes == OSrunning)
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <OS_SVC_services+0x64>)
 8000a82:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d112      	bne.n	8000ab0 <OS_SVC_services+0x58>
			if(strcmp(OS_Control.CurrentTask->TaskName, "idleTask") != 0)
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <OS_SVC_services+0x64>)
 8000a8c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a90:	331c      	adds	r3, #28
 8000a92:	490b      	ldr	r1, [pc, #44]	; (8000ac0 <OS_SVC_services+0x68>)
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fb6b 	bl	8000170 <strcmp>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d007      	beq.n	8000ab0 <OS_SVC_services+0x58>
				Decide_WhatNext();
 8000aa0:	f7ff ff88 	bl	80009b4 <Decide_WhatNext>
				trigger_OS_PendSV();
 8000aa4:	f7ff fea8 	bl	80007f8 <trigger_OS_PendSV>
		break;
 8000aa8:	e002      	b.n	8000ab0 <OS_SVC_services+0x58>
		teraRTOS_Update_SchedulerTable();
 8000aaa:	f7ff ff1b 	bl	80008e4 <teraRTOS_Update_SchedulerTable>
		break;
 8000aae:	e000      	b.n	8000ab2 <OS_SVC_services+0x5a>
		break;
 8000ab0:	bf00      	nop
	return;
 8000ab2:	bf00      	nop
 8000ab4:	bf00      	nop
}
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000374 	.word	0x20000374
 8000ac0:	08001188 	.word	0x08001188

08000ac4 <PendSV_Handler>:
	//=====================================
	//Save the Context of the Current Task
	//=====================================
	//Get the Current Task PSP from CPU register as CPU pushes xPSR,.....,R0

	OS_GET_PSP(OS_Control.CurrentTask->CurrentPSP);
 8000ac4:	4b6b      	ldr	r3, [pc, #428]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000ac6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000aca:	f3ef 8209 	mrs	r2, PSP
 8000ace:	619a      	str	r2, [r3, #24]

	//Using this CurrentPSP ( Pointer ) to store (R4 to R11)
	OS_Control.CurrentTask->CurrentPSP--;
 8000ad0:	4b68      	ldr	r3, [pc, #416]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000ad2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ad6:	699a      	ldr	r2, [r3, #24]
 8000ad8:	3a04      	subs	r2, #4
 8000ada:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r4" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 8000adc:	4b65      	ldr	r3, [pc, #404]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000ade:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4622      	mov	r2, r4
 8000ae6:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->CurrentPSP--;
 8000ae8:	4b62      	ldr	r3, [pc, #392]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000aea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000aee:	699a      	ldr	r2, [r3, #24]
 8000af0:	3a04      	subs	r2, #4
 8000af2:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r5" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 8000af4:	4b5f      	ldr	r3, [pc, #380]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000af6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	462a      	mov	r2, r5
 8000afe:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->CurrentPSP--;
 8000b00:	4b5c      	ldr	r3, [pc, #368]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000b02:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b06:	699a      	ldr	r2, [r3, #24]
 8000b08:	3a04      	subs	r2, #4
 8000b0a:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r6" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 8000b0c:	4b59      	ldr	r3, [pc, #356]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000b0e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4632      	mov	r2, r6
 8000b16:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->CurrentPSP--;
 8000b18:	4b56      	ldr	r3, [pc, #344]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000b1a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b1e:	699a      	ldr	r2, [r3, #24]
 8000b20:	3a04      	subs	r2, #4
 8000b22:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r7" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 8000b24:	4b53      	ldr	r3, [pc, #332]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000b26:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	463a      	mov	r2, r7
 8000b2e:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->CurrentPSP--;
 8000b30:	4b50      	ldr	r3, [pc, #320]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000b32:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b36:	699a      	ldr	r2, [r3, #24]
 8000b38:	3a04      	subs	r2, #4
 8000b3a:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r8" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 8000b3c:	4b4d      	ldr	r3, [pc, #308]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000b3e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4642      	mov	r2, r8
 8000b46:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->CurrentPSP--;
 8000b48:	4b4a      	ldr	r3, [pc, #296]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000b4a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b4e:	699a      	ldr	r2, [r3, #24]
 8000b50:	3a04      	subs	r2, #4
 8000b52:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r9" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 8000b54:	4b47      	ldr	r3, [pc, #284]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000b56:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	464a      	mov	r2, r9
 8000b5e:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->CurrentPSP--;
 8000b60:	4b44      	ldr	r3, [pc, #272]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000b62:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b66:	699a      	ldr	r2, [r3, #24]
 8000b68:	3a04      	subs	r2, #4
 8000b6a:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r10" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 8000b6c:	4b41      	ldr	r3, [pc, #260]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000b6e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4652      	mov	r2, sl
 8000b76:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->CurrentPSP--;
 8000b78:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000b7a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b7e:	699a      	ldr	r2, [r3, #24]
 8000b80:	3a04      	subs	r2, #4
 8000b82:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r11" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 8000b84:	4b3b      	ldr	r3, [pc, #236]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000b86:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	465a      	mov	r2, fp
 8000b8e:	601a      	str	r2, [r3, #0]

	//=====================================
	//Restore the Context of the Next task
	//=====================================

	OS_Control.CurrentTask = OS_Control.NextTask;
 8000b90:	4b38      	ldr	r3, [pc, #224]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000b92:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000b96:	4a37      	ldr	r2, [pc, #220]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000b98:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	OS_Control.NextTask = NULL;
 8000b9c:	4b35      	ldr	r3, [pc, #212]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

	__asm volatile("mov R11,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 8000ba4:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000ba6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	469b      	mov	fp, r3
	OS_Control.CurrentTask->CurrentPSP++;
 8000bb0:	4b30      	ldr	r3, [pc, #192]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000bb2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000bb6:	699a      	ldr	r2, [r3, #24]
 8000bb8:	3204      	adds	r2, #4
 8000bba:	619a      	str	r2, [r3, #24]
	__asm volatile("mov R10,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 8000bbc:	4b2d      	ldr	r3, [pc, #180]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000bbe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	469a      	mov	sl, r3
	OS_Control.CurrentTask->CurrentPSP++;
 8000bc8:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000bca:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000bce:	699a      	ldr	r2, [r3, #24]
 8000bd0:	3204      	adds	r2, #4
 8000bd2:	619a      	str	r2, [r3, #24]
	__asm volatile("mov R9,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 8000bd4:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000bd6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4699      	mov	r9, r3
	OS_Control.CurrentTask->CurrentPSP++;
 8000be0:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000be2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000be6:	699a      	ldr	r2, [r3, #24]
 8000be8:	3204      	adds	r2, #4
 8000bea:	619a      	str	r2, [r3, #24]
	__asm volatile("mov R8,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 8000bec:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000bee:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4698      	mov	r8, r3
	OS_Control.CurrentTask->CurrentPSP++;
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000bfa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000bfe:	699a      	ldr	r2, [r3, #24]
 8000c00:	3204      	adds	r2, #4
 8000c02:	619a      	str	r2, [r3, #24]
	__asm volatile("mov R7,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000c06:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	461f      	mov	r7, r3
	OS_Control.CurrentTask->CurrentPSP++;
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000c12:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c16:	699a      	ldr	r2, [r3, #24]
 8000c18:	3204      	adds	r2, #4
 8000c1a:	619a      	str	r2, [r3, #24]
	__asm volatile("mov R6,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000c1e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	461e      	mov	r6, r3
	OS_Control.CurrentTask->CurrentPSP++;
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000c2a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c2e:	699a      	ldr	r2, [r3, #24]
 8000c30:	3204      	adds	r2, #4
 8000c32:	619a      	str	r2, [r3, #24]
	__asm volatile("mov R5,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000c36:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	461d      	mov	r5, r3
	OS_Control.CurrentTask->CurrentPSP++;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000c42:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c46:	699a      	ldr	r2, [r3, #24]
 8000c48:	3204      	adds	r2, #4
 8000c4a:	619a      	str	r2, [r3, #24]
	__asm volatile("mov R4,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000c4e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	461c      	mov	r4, r3
	OS_Control.CurrentTask->CurrentPSP++;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000c5a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c5e:	699a      	ldr	r2, [r3, #24]
 8000c60:	3204      	adds	r2, #4
 8000c62:	619a      	str	r2, [r3, #24]

	//Update PSP and Exit
	OS_SET_PSP(OS_Control.CurrentTask->CurrentPSP);
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <PendSV_Handler+0x1b0>)
 8000c66:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f383 8809 	msr	PSP, r3
	__asm volatile ("BX LR");
 8000c70:	4770      	bx	lr



}
 8000c72:	bf00      	nop
 8000c74:	20000374 	.word	0x20000374

08000c78 <teraRTOS_CreateMSP>:


void teraRTOS_CreateMSP() {
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
	OS_Control._S_MSP =(uint32_t)&_estack ;
 8000c7c:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <teraRTOS_CreateMSP+0x34>)
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <teraRTOS_CreateMSP+0x38>)
 8000c80:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP = OS_Control._S_MSP - MainStackSize;
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <teraRTOS_CreateMSP+0x38>)
 8000c86:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000c8a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <teraRTOS_CreateMSP+0x38>)
 8000c90:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	// Aligned 8 Bytes spaces between MSP and PSP
	OS_Control.Task_PSP_LOCATOR = OS_Control._E_MSP + 8 ;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <teraRTOS_CreateMSP+0x38>)
 8000c96:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000c9a:	3308      	adds	r3, #8
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <teraRTOS_CreateMSP+0x38>)
 8000c9e:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//  if ( _E_MSP < &_eheap ) --> " ERROR: EXCEEDED THE AVAILABLE STACK SIZE "


}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20002800 	.word	0x20002800
 8000cb0:	20000374 	.word	0x20000374

08000cb4 <idle_Task_fun>:
uint8_t idleTaskLED;
void idle_Task_fun(){
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

	while(1)
	{
		idleTaskLED ^= 1;
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <idle_Task_fun+0x18>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	f083 0301 	eor.w	r3, r3, #1
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b02      	ldr	r3, [pc, #8]	; (8000ccc <idle_Task_fun+0x18>)
 8000cc4:	701a      	strb	r2, [r3, #0]
		__asm("wfe");
 8000cc6:	bf20      	wfe
		idleTaskLED ^= 1;
 8000cc8:	e7f6      	b.n	8000cb8 <idle_Task_fun+0x4>
 8000cca:	bf00      	nop
 8000ccc:	200001e0 	.word	0x200001e0

08000cd0 <TERA_RTOS_init>:
	}

}
TERA_RTOS_ErrorType TERA_RTOS_init(void){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0

	TERA_RTOS_ErrorType RTOS_Error;
	RTOS_Error = NoError;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	71fb      	strb	r3, [r7, #7]
	//Update OS Mode ( OS -> suspended )
	OS_Control.OS_Modes = OSsuspended;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <TERA_RTOS_init+0x5c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	// Specify the main stack for OS
	teraRTOS_CreateMSP();
 8000ce2:	f7ff ffc9 	bl	8000c78 <teraRTOS_CreateMSP>


	// Create OS ready Queue
	if ( FIFO_init(&Ready_Queue, READY_QUEUE_FIFO, 100) != FIFO_NO_ERROR)
 8000ce6:	2264      	movs	r2, #100	; 0x64
 8000ce8:	4911      	ldr	r1, [pc, #68]	; (8000d30 <TERA_RTOS_init+0x60>)
 8000cea:	4812      	ldr	r0, [pc, #72]	; (8000d34 <TERA_RTOS_init+0x64>)
 8000cec:	f000 f96a 	bl	8000fc4 <FIFO_init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <TERA_RTOS_init+0x2a>
	{
		RTOS_Error = Ready_Queue_init_error;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	71fb      	strb	r3, [r7, #7]
	}


	// Configure idle Task
	strcpy (teraRTOS_idleTask.TaskName,"idleTask");
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <TERA_RTOS_init+0x68>)
 8000cfc:	4a0f      	ldr	r2, [pc, #60]	; (8000d3c <TERA_RTOS_init+0x6c>)
 8000cfe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d00:	c303      	stmia	r3!, {r0, r1}
 8000d02:	701a      	strb	r2, [r3, #0]
	teraRTOS_idleTask.Priority = 255;
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <TERA_RTOS_init+0x70>)
 8000d06:	22ff      	movs	r2, #255	; 0xff
 8000d08:	711a      	strb	r2, [r3, #4]
	teraRTOS_idleTask.TaskEntry_Ptr = idle_Task_fun;
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <TERA_RTOS_init+0x70>)
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <TERA_RTOS_init+0x74>)
 8000d0e:	609a      	str	r2, [r3, #8]
	teraRTOS_idleTask.Stack_Size = 300;
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <TERA_RTOS_init+0x70>)
 8000d12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d16:	601a      	str	r2, [r3, #0]

	RTOS_Error = teraRTOS_CreateTask(&teraRTOS_idleTask);
 8000d18:	4809      	ldr	r0, [pc, #36]	; (8000d40 <TERA_RTOS_init+0x70>)
 8000d1a:	f000 f853 	bl	8000dc4 <teraRTOS_CreateTask>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]



	return RTOS_Error;
 8000d22:	79fb      	ldrb	r3, [r7, #7]

}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000374 	.word	0x20000374
 8000d30:	200001e4 	.word	0x200001e4
 8000d34:	200001cc 	.word	0x200001cc
 8000d38:	200001a4 	.word	0x200001a4
 8000d3c:	08001188 	.word	0x08001188
 8000d40:	20000188 	.word	0x20000188
 8000d44:	08000cb5 	.word	0x08000cb5

08000d48 <teraRTOS_Create_TaskStack>:


void teraRTOS_Create_TaskStack(Task_Creation * create_stack){
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	 * R9
	 * R10
//New SP --> * R11
	 */

	create_stack->CurrentPSP =(uint32_t *) create_stack->_S_PSP_Task;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	461a      	mov	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	619a      	str	r2, [r3, #24]

	create_stack->CurrentPSP--;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	1f1a      	subs	r2, r3, #4
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	619a      	str	r2, [r3, #24]
	*(create_stack->CurrentPSP)=0x01000000;		//Dummy xPSR with T=1 to avoid Bus fault
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d6c:	601a      	str	r2, [r3, #0]

	create_stack->CurrentPSP--;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	1f1a      	subs	r2, r3, #4
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	619a      	str	r2, [r3, #24]
	*(create_stack->CurrentPSP)=(unsigned int)create_stack->TaskEntry_Ptr;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	601a      	str	r2, [r3, #0]

	create_stack->CurrentPSP--;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	1f1a      	subs	r2, r3, #4
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	619a      	str	r2, [r3, #24]
	*(create_stack->CurrentPSP)=0xFFFFFFFD; // LR = 0xFFFFFFFD (EXC_RETURN) --> return to Thread with PSP
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f06f 0202 	mvn.w	r2, #2
 8000d94:	601a      	str	r2, [r3, #0]

	int i;
	for(i=0; i<13; i++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	e00b      	b.n	8000db4 <teraRTOS_Create_TaskStack+0x6c>
	{
		create_stack->CurrentPSP--;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	1f1a      	subs	r2, r3, #4
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	619a      	str	r2, [r3, #24]
		*(create_stack->CurrentPSP)=0;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
	for(i=0; i<13; i++)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	3301      	adds	r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2b0c      	cmp	r3, #12
 8000db8:	ddf0      	ble.n	8000d9c <teraRTOS_Create_TaskStack+0x54>
	}




}
 8000dba:	bf00      	nop
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <teraRTOS_CreateTask>:


TERA_RTOS_ErrorType teraRTOS_CreateTask(Task_Creation* create){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]


	TERA_RTOS_ErrorType RTOS_Error = NoError;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	73fb      	strb	r3, [r7, #15]

	//Create its own PSP stack

	create->_S_PSP_Task = OS_Control.Task_PSP_LOCATOR;
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <teraRTOS_CreateTask+0x74>)
 8000dd2:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	611a      	str	r2, [r3, #16]
	create->_E_PSP_Task = create->_S_PSP_Task - create->Stack_Size;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	691a      	ldr	r2, [r3, #16]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	1ad2      	subs	r2, r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	615a      	str	r2, [r3, #20]

	//Check task stack size exceeded PSP stack or not

	if( create->_E_PSP_Task < (uint32_t)&(_eheap) )
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	4a13      	ldr	r2, [pc, #76]	; (8000e3c <teraRTOS_CreateTask+0x78>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d201      	bcs.n	8000df6 <teraRTOS_CreateTask+0x32>
	{
		return Task_exceeded_StackSize;
 8000df2:	2302      	movs	r3, #2
 8000df4:	e01b      	b.n	8000e2e <teraRTOS_CreateTask+0x6a>
	}

	//Aligned 8 bytes space between task PSP and other

	OS_Control.Task_PSP_LOCATOR = ( create->_E_PSP_Task - 8 );
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	3b08      	subs	r3, #8
 8000dfc:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <teraRTOS_CreateTask+0x74>)
 8000dfe:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198


	//Initialize PSP task stack

	teraRTOS_Create_TaskStack(create);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ffa0 	bl	8000d48 <teraRTOS_Create_TaskStack>


	OS_Control.OS_Tasks[OS_Control.ActiveTasks_number] = create;
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <teraRTOS_CreateTask+0x74>)
 8000e0a:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000e0e:	490a      	ldr	r1, [pc, #40]	; (8000e38 <teraRTOS_CreateTask+0x74>)
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.ActiveTasks_number++;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <teraRTOS_CreateTask+0x74>)
 8000e18:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	4a06      	ldr	r2, [pc, #24]	; (8000e38 <teraRTOS_CreateTask+0x74>)
 8000e20:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
	// Task state update --> Suspended

	create->TaskState = Suspended;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a



	return RTOS_Error;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000374 	.word	0x20000374
 8000e3c:	20000b20 	.word	0x20000b20

08000e40 <teraRTOS_OS_SVC_Set>:
//Thread Mode
void teraRTOS_OS_SVC_Set(SVC_ID id){
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]

	switch(id)
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d006      	beq.n	8000e5e <teraRTOS_OS_SVC_Set+0x1e>
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d006      	beq.n	8000e62 <teraRTOS_OS_SVC_Set+0x22>
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d000      	beq.n	8000e5a <teraRTOS_OS_SVC_Set+0x1a>

		break;

	}

}
 8000e58:	e005      	b.n	8000e66 <teraRTOS_OS_SVC_Set+0x26>
		__asm("SVC #0x0");
 8000e5a:	df00      	svc	0
		break;
 8000e5c:	e003      	b.n	8000e66 <teraRTOS_OS_SVC_Set+0x26>
		__asm("SVC #0x1");
 8000e5e:	df01      	svc	1
		break;
 8000e60:	e001      	b.n	8000e66 <teraRTOS_OS_SVC_Set+0x26>
		__asm("SVC #0x2");
 8000e62:	df02      	svc	2
		break;
 8000e64:	bf00      	nop
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <teraRTOS_ActivateTask>:


TERA_RTOS_ErrorType teraRTOS_ActivateTask(Task_Creation * activate){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]

	TERA_RTOS_ErrorType error;
	error = NoError;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	73fb      	strb	r3, [r7, #15]

	activate->TaskState = Waiting;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2202      	movs	r2, #2
 8000e80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	teraRTOS_OS_SVC_Set(SVC_ActivateTask);
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff ffdb 	bl	8000e40 <teraRTOS_OS_SVC_Set>



	return error;
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]

}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <teraRTOS_TerminateTask>:
TERA_RTOS_ErrorType teraRTOS_TerminateTask(Task_Creation * terminate){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

	TERA_RTOS_ErrorType error;
	error = NoError;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	73fb      	strb	r3, [r7, #15]

	terminate->TaskState = Suspended;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	teraRTOS_OS_SVC_Set(SVC_TerminateTask);
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f7ff ffc9 	bl	8000e40 <teraRTOS_OS_SVC_Set>




	return error;
 8000eae:	7bfb      	ldrb	r3, [r7, #15]



}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <teraRTOS_TaskWait>:


void teraRTOS_TaskWait(uint32_t TicksNum,Task_Creation * task_w8)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]

	task_w8->Task_WaitingTime.Blocking = Block_Enable;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	task_w8->Task_WaitingTime.Ticks_Number = TicksNum;
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	641a      	str	r2, [r3, #64]	; 0x40
	//Task should be suspended
	//Then should be terminated
	teraRTOS_TerminateTask(task_w8);
 8000ed0:	6838      	ldr	r0, [r7, #0]
 8000ed2:	f7ff ffdf 	bl	8000e94 <teraRTOS_TerminateTask>

}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <teraRTOS_START>:
void teraRTOS_START(){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

	OS_Control.OS_Modes = OSrunning;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <teraRTOS_START+0x50>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//Set default Current Task == idleTask
	OS_Control.CurrentTask = &teraRTOS_idleTask;
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <teraRTOS_START+0x50>)
 8000eee:	4a11      	ldr	r2, [pc, #68]	; (8000f34 <teraRTOS_START+0x54>)
 8000ef0:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	//Activate idle task
	teraRTOS_ActivateTask(&teraRTOS_idleTask);
 8000ef4:	480f      	ldr	r0, [pc, #60]	; (8000f34 <teraRTOS_START+0x54>)
 8000ef6:	f7ff ffbb 	bl	8000e70 <teraRTOS_ActivateTask>
	//Start ticker
	Start_Ticker(); // Every 1ms
 8000efa:	f7ff fc8b 	bl	8000814 <Start_Ticker>

	OS_SET_PSP(OS_Control.CurrentTask->CurrentPSP);
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <teraRTOS_START+0x50>)
 8000f00:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f383 8809 	msr	PSP, r3

	//Switch from MSP to PSP
	OS_SWITCH_SP_to_PSP;
 8000f0a:	f3ef 8014 	mrs	r0, CONTROL
 8000f0e:	f04f 0102 	mov.w	r1, #2
 8000f12:	ea40 0001 	orr.w	r0, r0, r1
 8000f16:	f380 8814 	msr	CONTROL, r0

	Switch_CPU_AccessLevel_Unprivilege;
 8000f1a:	f3ef 8314 	mrs	r3, CONTROL
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	f383 8814 	msr	CONTROL, r3

	teraRTOS_idleTask.TaskEntry_Ptr();
 8000f26:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <teraRTOS_START+0x54>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	4798      	blx	r3


}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000374 	.word	0x20000374
 8000f34:	20000188 	.word	0x20000188

08000f38 <teraRTOS_Update_TaskWaitingTime>:

void teraRTOS_Update_TaskWaitingTime()
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
	int i=0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
	for(i=0; i<OS_Control.ActiveTasks_number; i++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	e031      	b.n	8000fac <teraRTOS_Update_TaskWaitingTime+0x74>
	{

		if(OS_Control.OS_Tasks[i]->TaskState == Suspended)
 8000f48:	4a1d      	ldr	r2, [pc, #116]	; (8000fc0 <teraRTOS_Update_TaskWaitingTime+0x88>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f50:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d126      	bne.n	8000fa6 <teraRTOS_Update_TaskWaitingTime+0x6e>
		{
			if(OS_Control.OS_Tasks[i]->Task_WaitingTime.Blocking == Block_Enable)
 8000f58:	4a19      	ldr	r2, [pc, #100]	; (8000fc0 <teraRTOS_Update_TaskWaitingTime+0x88>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d11e      	bne.n	8000fa6 <teraRTOS_Update_TaskWaitingTime+0x6e>
			{
				OS_Control.OS_Tasks[i]->Task_WaitingTime.Ticks_Number--;
 8000f68:	4a15      	ldr	r2, [pc, #84]	; (8000fc0 <teraRTOS_Update_TaskWaitingTime+0x88>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f72:	3a01      	subs	r2, #1
 8000f74:	641a      	str	r2, [r3, #64]	; 0x40
				if(OS_Control.OS_Tasks[i]->Task_WaitingTime.Ticks_Number == 0)
 8000f76:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <teraRTOS_Update_TaskWaitingTime+0x88>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d110      	bne.n	8000fa6 <teraRTOS_Update_TaskWaitingTime+0x6e>
				{
					OS_Control.OS_Tasks[i]->Task_WaitingTime.Blocking = Block_Disable;
 8000f84:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <teraRTOS_Update_TaskWaitingTime+0x88>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					OS_Control.OS_Tasks[i]->TaskState = Waiting;
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <teraRTOS_Update_TaskWaitingTime+0x88>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
					teraRTOS_OS_SVC_Set(SVC_WaitingTask);
 8000fa0:	2002      	movs	r0, #2
 8000fa2:	f7ff ff4d 	bl	8000e40 <teraRTOS_OS_SVC_Set>
	for(i=0; i<OS_Control.ActiveTasks_number; i++)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <teraRTOS_Update_TaskWaitingTime+0x88>)
 8000fae:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d8c7      	bhi.n	8000f48 <teraRTOS_Update_TaskWaitingTime+0x10>
			}

		}
	}

}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000374 	.word	0x20000374

08000fc4 <FIFO_init>:
 */


#include "TERA_RTOS_FIFO.h"
/* *********************************** */
Buffer_status FIFO_init (FIFO_Buf_t* fifo,element_type * buff , unsigned int length){
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]

	if(!buff )
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <FIFO_init+0x16>
		return FIFO_NULL;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e011      	b.n	8000ffe <FIFO_init+0x3a>

	fifo->base = buff ;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	68ba      	ldr	r2, [r7, #8]
 8000fde:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base ;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	68da      	ldr	r2, [r3, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	611a      	str	r2, [r3, #16]
	fifo->counter=0;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 8000ffc:	2300      	movs	r3, #0

}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <FIFO_enqueue>:

/* *********************************** */

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo,element_type item){
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <FIFO_enqueue+0x1a>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 8001022:	2303      	movs	r3, #3
 8001024:	e02d      	b.n	8001082 <FIFO_enqueue+0x7a>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	429a      	cmp	r2, r3
 8001030:	d107      	bne.n	8001042 <FIFO_enqueue+0x3a>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	429a      	cmp	r2, r3
 800103c:	d101      	bne.n	8001042 <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 800103e:	2301      	movs	r3, #1
 8001040:	e01f      	b.n	8001082 <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	601a      	str	r2, [r3, #0]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	68d2      	ldr	r2, [r2, #12]
 800105c:	4611      	mov	r1, r2
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	6912      	ldr	r2, [r2, #16]
 8001062:	0092      	lsls	r2, r2, #2
 8001064:	440a      	add	r2, r1
 8001066:	3a04      	subs	r2, #4
 8001068:	4293      	cmp	r3, r2
 800106a:	d104      	bne.n	8001076 <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	e004      	b.n	8001080 <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	1d1a      	adds	r2, r3, #4
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 8001080:	2300      	movs	r3, #0


}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <FIFO_dequeue>:

/* *********************************** */

Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type * item){
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->length)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <FIFO_dequeue+0x1a>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e028      	b.n	80010fc <FIFO_dequeue+0x70>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d101      	bne.n	80010ba <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 80010b6:	2302      	movs	r3, #2
 80010b8:	e020      	b.n	80010fc <FIFO_dequeue+0x70>



	*item = *(fifo->head);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	1e5a      	subs	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	601a      	str	r2, [r3, #0]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68d2      	ldr	r2, [r2, #12]
 80010d6:	4611      	mov	r1, r2
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	6912      	ldr	r2, [r2, #16]
 80010dc:	0092      	lsls	r2, r2, #2
 80010de:	440a      	add	r2, r1
 80010e0:	3a04      	subs	r2, #4
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d104      	bne.n	80010f0 <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68da      	ldr	r2, [r3, #12]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	e004      	b.n	80010fa <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	1d1a      	adds	r2, r3, #4
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
	...

08001108 <__libc_init_array>:
 8001108:	b570      	push	{r4, r5, r6, lr}
 800110a:	2500      	movs	r5, #0
 800110c:	4e0c      	ldr	r6, [pc, #48]	; (8001140 <__libc_init_array+0x38>)
 800110e:	4c0d      	ldr	r4, [pc, #52]	; (8001144 <__libc_init_array+0x3c>)
 8001110:	1ba4      	subs	r4, r4, r6
 8001112:	10a4      	asrs	r4, r4, #2
 8001114:	42a5      	cmp	r5, r4
 8001116:	d109      	bne.n	800112c <__libc_init_array+0x24>
 8001118:	f000 f81a 	bl	8001150 <_init>
 800111c:	2500      	movs	r5, #0
 800111e:	4e0a      	ldr	r6, [pc, #40]	; (8001148 <__libc_init_array+0x40>)
 8001120:	4c0a      	ldr	r4, [pc, #40]	; (800114c <__libc_init_array+0x44>)
 8001122:	1ba4      	subs	r4, r4, r6
 8001124:	10a4      	asrs	r4, r4, #2
 8001126:	42a5      	cmp	r5, r4
 8001128:	d105      	bne.n	8001136 <__libc_init_array+0x2e>
 800112a:	bd70      	pop	{r4, r5, r6, pc}
 800112c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001130:	4798      	blx	r3
 8001132:	3501      	adds	r5, #1
 8001134:	e7ee      	b.n	8001114 <__libc_init_array+0xc>
 8001136:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800113a:	4798      	blx	r3
 800113c:	3501      	adds	r5, #1
 800113e:	e7f2      	b.n	8001126 <__libc_init_array+0x1e>
 8001140:	08001194 	.word	0x08001194
 8001144:	08001194 	.word	0x08001194
 8001148:	08001194 	.word	0x08001194
 800114c:	08001198 	.word	0x08001198

08001150 <_init>:
 8001150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001152:	bf00      	nop
 8001154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001156:	bc08      	pop	{r3}
 8001158:	469e      	mov	lr, r3
 800115a:	4770      	bx	lr

0800115c <_fini>:
 800115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800115e:	bf00      	nop
 8001160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001162:	bc08      	pop	{r3}
 8001164:	469e      	mov	lr, r3
 8001166:	4770      	bx	lr
