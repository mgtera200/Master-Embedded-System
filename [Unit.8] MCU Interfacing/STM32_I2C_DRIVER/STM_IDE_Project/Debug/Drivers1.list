
Drivers1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e8c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000fbc  08000fbc  00010fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fc4  08000fc4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000fc4  08000fc4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fc4  08000fc4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fc4  08000fc4  00010fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fc8  08000fc8  00010fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000018  08000fe4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08000fe4  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b17  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f84  00000000  00000000  00026b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000107e  00000000  00000000  00027adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002a0  00000000  00000000  00028b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000218  00000000  00000000  00028e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002d48  00000000  00000000  00029018  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000032c4  00000000  00000000  0002bd60  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000bcc1  00000000  00000000  0002f024  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003ace5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000868  00000000  00000000  0003ad60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000018 	.word	0x20000018
 800014c:	00000000 	.word	0x00000000
 8000150:	08000fa4 	.word	0x08000fa4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000001c 	.word	0x2000001c
 800016c:	08000fa4 	.word	0x08000fa4

08000170 <eeprom_init>:
 *  Created on: Dec 18, 2023
 *      Author: Dell
 */
#include "I2C_Slave_EEPROM.h"

void eeprom_init(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0

	I2C_InitTypeDef I2C1CFG;

	//I2C Controller act as a Master

	I2C1CFG.General_Call_Address_Detection = I2C_ENGC_Enable;
 8000176:	2340      	movs	r3, #64	; 0x40
 8000178:	623b      	str	r3, [r7, #32]
	I2C1CFG.I2C_ACK_Control = I2C_Ack_Enable;
 800017a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017e:	61fb      	str	r3, [r7, #28]
	I2C1CFG.I2C_ClockSpeed = I2C_SCLK_SM_100K;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <eeprom_init+0x38>)
 8000182:	607b      	str	r3, [r7, #4]
	I2C1CFG.I2C_Mode = I2C_Mode_I2C;
 8000184:	2300      	movs	r3, #0
 8000186:	60fb      	str	r3, [r7, #12]
	I2C1CFG.P_Slave_Event_CallBack = NULL;
 8000188:	2300      	movs	r3, #0
 800018a:	627b      	str	r3, [r7, #36]	; 0x24
	I2C1CFG.StretchMode = I2C_StretchMode_Enable;
 800018c:	2300      	movs	r3, #0
 800018e:	60bb      	str	r3, [r7, #8]

	MCAL_I2C_GPIO_Set_Pins(I2C1);
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <eeprom_init+0x3c>)
 8000192:	f000 fc7b 	bl	8000a8c <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C1CFG);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4619      	mov	r1, r3
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <eeprom_init+0x3c>)
 800019c:	f000 fb68 	bl	8000870 <MCAL_I2C_Init>
}
 80001a0:	bf00      	nop
 80001a2:	3728      	adds	r7, #40	; 0x28
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <eeprom_write_Nbytes>:


unsigned char eeprom_write_Nbytes(unsigned int Memory_address, unsigned char* bytes,uint8_t Data_Length){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c8      	sub	sp, #288	; 0x120
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f107 030c 	add.w	r3, r7, #12
 80001ba:	6018      	str	r0, [r3, #0]
 80001bc:	f107 0308 	add.w	r3, r7, #8
 80001c0:	6019      	str	r1, [r3, #0]
 80001c2:	1dfb      	adds	r3, r7, #7
 80001c4:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0 ;
 80001c6:	2300      	movs	r3, #0
 80001c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint8_t buffer[258];
	buffer[0] = (uint8_t)(Memory_address>>8); // upper byte memory address
 80001cc:	f107 030c 	add.w	r3, r7, #12
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	0a1b      	lsrs	r3, r3, #8
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	f107 0314 	add.w	r3, r7, #20
 80001da:	701a      	strb	r2, [r3, #0]
	buffer[1]= (uint8_t)(Memory_address); // lower byte memory address
 80001dc:	f107 030c 	add.w	r3, r7, #12
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	705a      	strb	r2, [r3, #1]

	for(i=2; i<(Data_Length+2); i++)
 80001ea:	2302      	movs	r3, #2
 80001ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80001f0:	e011      	b.n	8000216 <eeprom_write_Nbytes+0x66>
	{
		buffer[i] = bytes[i-2];
 80001f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80001f6:	3b02      	subs	r3, #2
 80001f8:	f107 0208 	add.w	r2, r7, #8
 80001fc:	6812      	ldr	r2, [r2, #0]
 80001fe:	441a      	add	r2, r3
 8000200:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000204:	7811      	ldrb	r1, [r2, #0]
 8000206:	f107 0214 	add.w	r2, r7, #20
 800020a:	54d1      	strb	r1, [r2, r3]
	for(i=2; i<(Data_Length+2); i++)
 800020c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000210:	3301      	adds	r3, #1
 8000212:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000216:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800021a:	1dfb      	adds	r3, r7, #7
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	3302      	adds	r3, #2
 8000220:	429a      	cmp	r2, r3
 8000222:	dbe6      	blt.n	80001f2 <eeprom_write_Nbytes+0x42>
	}


	MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_Address, buffer, (Data_Length+2), With_Stop, Start);
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	3302      	adds	r3, #2
 800022a:	4619      	mov	r1, r3
 800022c:	f107 0214 	add.w	r2, r7, #20
 8000230:	2300      	movs	r3, #0
 8000232:	9301      	str	r3, [sp, #4]
 8000234:	2300      	movs	r3, #0
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	460b      	mov	r3, r1
 800023a:	212a      	movs	r1, #42	; 0x2a
 800023c:	4804      	ldr	r0, [pc, #16]	; (8000250 <eeprom_write_Nbytes+0xa0>)
 800023e:	f000 fc6d 	bl	8000b1c <MCAL_I2C_Master_TX>
	return 0;
 8000242:	2300      	movs	r3, #0
}
 8000244:	4618      	mov	r0, r3
 8000246:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40005400 	.word	0x40005400

08000254 <eeprom_read_byte>:



unsigned char eeprom_read_byte(unsigned int address, uint8_t* dataOut,uint8_t dataLen){
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af02      	add	r7, sp, #8
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	4613      	mov	r3, r2
 8000260:	71fb      	strb	r3, [r7, #7]

	unsigned char buffer[2];
	buffer[0] = (uint8_t)(address>>8);
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	0a1b      	lsrs	r3, r3, #8
 8000266:	b2db      	uxtb	r3, r3
 8000268:	753b      	strb	r3, [r7, #20]
	buffer[1] = (uint8_t)(address);
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_Address, buffer, 2, without_Stop, Start);
 8000270:	f107 0214 	add.w	r2, r7, #20
 8000274:	2300      	movs	r3, #0
 8000276:	9301      	str	r3, [sp, #4]
 8000278:	2301      	movs	r3, #1
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2302      	movs	r3, #2
 800027e:	212a      	movs	r1, #42	; 0x2a
 8000280:	4809      	ldr	r0, [pc, #36]	; (80002a8 <eeprom_read_byte+0x54>)
 8000282:	f000 fc4b 	bl	8000b1c <MCAL_I2C_Master_TX>
	MCAL_I2C_Master_RX(I2C1, EEPROM_Slave_Address, dataOut, dataLen, With_Stop, repeated_start);
 8000286:	79fa      	ldrb	r2, [r7, #7]
 8000288:	2301      	movs	r3, #1
 800028a:	9301      	str	r3, [sp, #4]
 800028c:	2300      	movs	r3, #0
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	4613      	mov	r3, r2
 8000292:	68ba      	ldr	r2, [r7, #8]
 8000294:	212a      	movs	r1, #42	; 0x2a
 8000296:	4804      	ldr	r0, [pc, #16]	; (80002a8 <eeprom_read_byte+0x54>)
 8000298:	f000 fc96 	bl	8000bc8 <MCAL_I2C_Master_RX>

	return 0;
 800029c:	2300      	movs	r3, #0
}
 800029e:	4618      	mov	r0, r3
 80002a0:	3718      	adds	r7, #24
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40005400 	.word	0x40005400

080002ac <EXTI0_IRQHandler>:
// ISR functions
//-----------------------------


void EXTI0_IRQHandler(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<0); //WRITE 1 TO CLEAR
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <EXTI0_IRQHandler+0x1c>)
 80002b2:	695b      	ldr	r3, [r3, #20]
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <EXTI0_IRQHandler+0x1c>)
 80002b6:	f043 0301 	orr.w	r3, r3, #1
 80002ba:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <EXTI0_IRQHandler+0x20>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4798      	blx	r3
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40010400 	.word	0x40010400
 80002cc:	20000080 	.word	0x20000080

080002d0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<1); //WRITE 1 TO CLEAR
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <EXTI1_IRQHandler+0x1c>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a04      	ldr	r2, [pc, #16]	; (80002ec <EXTI1_IRQHandler+0x1c>)
 80002da:	f043 0302 	orr.w	r3, r3, #2
 80002de:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 80002e0:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <EXTI1_IRQHandler+0x20>)
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	4798      	blx	r3
}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	40010400 	.word	0x40010400
 80002f0:	20000080 	.word	0x20000080

080002f4 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<2); //WRITE 1 TO CLEAR
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <EXTI2_IRQHandler+0x1c>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a04      	ldr	r2, [pc, #16]	; (8000310 <EXTI2_IRQHandler+0x1c>)
 80002fe:	f043 0304 	orr.w	r3, r3, #4
 8000302:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <EXTI2_IRQHandler+0x20>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	4798      	blx	r3
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40010400 	.word	0x40010400
 8000314:	20000080 	.word	0x20000080

08000318 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<3); //WRITE 1 TO CLEAR
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <EXTI3_IRQHandler+0x1c>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a04      	ldr	r2, [pc, #16]	; (8000334 <EXTI3_IRQHandler+0x1c>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <EXTI3_IRQHandler+0x20>)
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	4798      	blx	r3
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40010400 	.word	0x40010400
 8000338:	20000080 	.word	0x20000080

0800033c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<4); //WRITE 1 TO CLEAR
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <EXTI4_IRQHandler+0x1c>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	4a04      	ldr	r2, [pc, #16]	; (8000358 <EXTI4_IRQHandler+0x1c>)
 8000346:	f043 0310 	orr.w	r3, r3, #16
 800034a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 800034c:	4b03      	ldr	r3, [pc, #12]	; (800035c <EXTI4_IRQHandler+0x20>)
 800034e:	691b      	ldr	r3, [r3, #16]
 8000350:	4798      	blx	r3
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010400 	.word	0x40010400
 800035c:	20000080 	.word	0x20000080

08000360 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	if( EXTI->EXTI_PR & (1<<5))
 8000364:	4b26      	ldr	r3, [pc, #152]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	f003 0320 	and.w	r3, r3, #32
 800036c:	2b00      	cmp	r3, #0
 800036e:	d008      	beq.n	8000382 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->EXTI_PR |= (1<<5); //WRITE 1 TO CLEAR
 8000370:	4b23      	ldr	r3, [pc, #140]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a22      	ldr	r2, [pc, #136]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000376:	f043 0320 	orr.w	r3, r3, #32
 800037a:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[5]();
 800037c:	4b21      	ldr	r3, [pc, #132]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<6))
 8000382:	4b1f      	ldr	r3, [pc, #124]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800038a:	2b00      	cmp	r3, #0
 800038c:	d008      	beq.n	80003a0 <EXTI9_5_IRQHandler+0x40>
	{
		EXTI->EXTI_PR |= (1<<6); //WRITE 1 TO CLEAR
 800038e:	4b1c      	ldr	r3, [pc, #112]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a1b      	ldr	r2, [pc, #108]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000398:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[6]();
 800039a:	4b1a      	ldr	r3, [pc, #104]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<7))
 80003a0:	4b17      	ldr	r3, [pc, #92]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d008      	beq.n	80003be <EXTI9_5_IRQHandler+0x5e>
	{
		EXTI->EXTI_PR |= (1<<7); //WRITE 1 TO CLEAR
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4a13      	ldr	r2, [pc, #76]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b6:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[7]();
 80003b8:	4b12      	ldr	r3, [pc, #72]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 80003ba:	69db      	ldr	r3, [r3, #28]
 80003bc:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<8))
 80003be:	4b10      	ldr	r3, [pc, #64]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d008      	beq.n	80003dc <EXTI9_5_IRQHandler+0x7c>
	{
		EXTI->EXTI_PR |= (1<<8); //WRITE 1 TO CLEAR
 80003ca:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a0c      	ldr	r2, [pc, #48]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003d4:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[8]();
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 80003d8:	6a1b      	ldr	r3, [r3, #32]
 80003da:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<9))
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d008      	beq.n	80003fa <EXTI9_5_IRQHandler+0x9a>
	{
		EXTI->EXTI_PR |= (1<<9); //WRITE 1 TO CLEAR
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003f2:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[9]();
 80003f4:	4b03      	ldr	r3, [pc, #12]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 80003f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f8:	4798      	blx	r3
	}
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40010400 	.word	0x40010400
 8000404:	20000080 	.word	0x20000080

08000408 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	if( EXTI->EXTI_PR & (1<<10))
 800040c:	4b30      	ldr	r3, [pc, #192]	; (80004d0 <EXTI15_10_IRQHandler+0xc8>)
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000414:	2b00      	cmp	r3, #0
 8000416:	d009      	beq.n	800042c <EXTI15_10_IRQHandler+0x24>
	{
		EXTI->EXTI_PR |= (1<<10); //WRITE 1 TO CLEAR
 8000418:	4b2d      	ldr	r3, [pc, #180]	; (80004d0 <EXTI15_10_IRQHandler+0xc8>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	4a2c      	ldr	r2, [pc, #176]	; (80004d0 <EXTI15_10_IRQHandler+0xc8>)
 800041e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000422:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[10]();
 8000424:	4b2b      	ldr	r3, [pc, #172]	; (80004d4 <EXTI15_10_IRQHandler+0xcc>)
 8000426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000428:	4798      	blx	r3
		EXTI->EXTI_PR |= (1<<15); //WRITE 1 TO CLEAR
		GP_IRQ_CallBack[15]();
	}


}
 800042a:	e04e      	b.n	80004ca <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<11))
 800042c:	4b28      	ldr	r3, [pc, #160]	; (80004d0 <EXTI15_10_IRQHandler+0xc8>)
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000434:	2b00      	cmp	r3, #0
 8000436:	d009      	beq.n	800044c <EXTI15_10_IRQHandler+0x44>
		EXTI->EXTI_PR |= (1<<11); //WRITE 1 TO CLEAR
 8000438:	4b25      	ldr	r3, [pc, #148]	; (80004d0 <EXTI15_10_IRQHandler+0xc8>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	4a24      	ldr	r2, [pc, #144]	; (80004d0 <EXTI15_10_IRQHandler+0xc8>)
 800043e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000442:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[11]();
 8000444:	4b23      	ldr	r3, [pc, #140]	; (80004d4 <EXTI15_10_IRQHandler+0xcc>)
 8000446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000448:	4798      	blx	r3
}
 800044a:	e03e      	b.n	80004ca <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<12))
 800044c:	4b20      	ldr	r3, [pc, #128]	; (80004d0 <EXTI15_10_IRQHandler+0xc8>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000454:	2b00      	cmp	r3, #0
 8000456:	d009      	beq.n	800046c <EXTI15_10_IRQHandler+0x64>
		EXTI->EXTI_PR |= (1<<12); //WRITE 1 TO CLEAR
 8000458:	4b1d      	ldr	r3, [pc, #116]	; (80004d0 <EXTI15_10_IRQHandler+0xc8>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	4a1c      	ldr	r2, [pc, #112]	; (80004d0 <EXTI15_10_IRQHandler+0xc8>)
 800045e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000462:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[12]();
 8000464:	4b1b      	ldr	r3, [pc, #108]	; (80004d4 <EXTI15_10_IRQHandler+0xcc>)
 8000466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000468:	4798      	blx	r3
}
 800046a:	e02e      	b.n	80004ca <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<13))
 800046c:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <EXTI15_10_IRQHandler+0xc8>)
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000474:	2b00      	cmp	r3, #0
 8000476:	d009      	beq.n	800048c <EXTI15_10_IRQHandler+0x84>
		EXTI->EXTI_PR |= (1<<13); //WRITE 1 TO CLEAR
 8000478:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <EXTI15_10_IRQHandler+0xc8>)
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	4a14      	ldr	r2, [pc, #80]	; (80004d0 <EXTI15_10_IRQHandler+0xc8>)
 800047e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000482:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[13]();
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <EXTI15_10_IRQHandler+0xcc>)
 8000486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000488:	4798      	blx	r3
}
 800048a:	e01e      	b.n	80004ca <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<14))
 800048c:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <EXTI15_10_IRQHandler+0xc8>)
 800048e:	695b      	ldr	r3, [r3, #20]
 8000490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000494:	2b00      	cmp	r3, #0
 8000496:	d009      	beq.n	80004ac <EXTI15_10_IRQHandler+0xa4>
		EXTI->EXTI_PR |= (1<<14); //WRITE 1 TO CLEAR
 8000498:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <EXTI15_10_IRQHandler+0xc8>)
 800049a:	695b      	ldr	r3, [r3, #20]
 800049c:	4a0c      	ldr	r2, [pc, #48]	; (80004d0 <EXTI15_10_IRQHandler+0xc8>)
 800049e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004a2:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[14]();
 80004a4:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <EXTI15_10_IRQHandler+0xcc>)
 80004a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004a8:	4798      	blx	r3
}
 80004aa:	e00e      	b.n	80004ca <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<15))
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <EXTI15_10_IRQHandler+0xc8>)
 80004ae:	695b      	ldr	r3, [r3, #20]
 80004b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d008      	beq.n	80004ca <EXTI15_10_IRQHandler+0xc2>
		EXTI->EXTI_PR |= (1<<15); //WRITE 1 TO CLEAR
 80004b8:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <EXTI15_10_IRQHandler+0xc8>)
 80004ba:	695b      	ldr	r3, [r3, #20]
 80004bc:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <EXTI15_10_IRQHandler+0xc8>)
 80004be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004c2:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[15]();
 80004c4:	4b03      	ldr	r3, [pc, #12]	; (80004d4 <EXTI15_10_IRQHandler+0xcc>)
 80004c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004c8:	4798      	blx	r3
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40010400 	.word	0x40010400
 80004d4:	20000080 	.word	0x20000080

080004d8 <get_CRLH_position>:
 *  ENG-TERA
 */
#include "GPIO_DRIVER.h"


int get_CRLH_position(uint32_t pin_num){
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]

	switch(pin_num)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2b0f      	cmp	r3, #15
 80004e4:	d842      	bhi.n	800056c <get_CRLH_position+0x94>
 80004e6:	a201      	add	r2, pc, #4	; (adr r2, 80004ec <get_CRLH_position+0x14>)
 80004e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ec:	0800052d 	.word	0x0800052d
 80004f0:	08000531 	.word	0x08000531
 80004f4:	08000535 	.word	0x08000535
 80004f8:	08000539 	.word	0x08000539
 80004fc:	0800053d 	.word	0x0800053d
 8000500:	08000541 	.word	0x08000541
 8000504:	08000545 	.word	0x08000545
 8000508:	08000549 	.word	0x08000549
 800050c:	0800054d 	.word	0x0800054d
 8000510:	08000551 	.word	0x08000551
 8000514:	08000555 	.word	0x08000555
 8000518:	08000559 	.word	0x08000559
 800051c:	0800055d 	.word	0x0800055d
 8000520:	08000561 	.word	0x08000561
 8000524:	08000565 	.word	0x08000565
 8000528:	08000569 	.word	0x08000569
	{
	case 0:
		return 0;
 800052c:	2300      	movs	r3, #0
 800052e:	e01e      	b.n	800056e <get_CRLH_position+0x96>
	case 1:
		return 4;
 8000530:	2304      	movs	r3, #4
 8000532:	e01c      	b.n	800056e <get_CRLH_position+0x96>
	case 2:
		return 8;
 8000534:	2308      	movs	r3, #8
 8000536:	e01a      	b.n	800056e <get_CRLH_position+0x96>
	case 3:
		return 12;
 8000538:	230c      	movs	r3, #12
 800053a:	e018      	b.n	800056e <get_CRLH_position+0x96>
	case 4:
		return 16;
 800053c:	2310      	movs	r3, #16
 800053e:	e016      	b.n	800056e <get_CRLH_position+0x96>
	case 5:
		return 20;
 8000540:	2314      	movs	r3, #20
 8000542:	e014      	b.n	800056e <get_CRLH_position+0x96>
	case 6:
		return 24;
 8000544:	2318      	movs	r3, #24
 8000546:	e012      	b.n	800056e <get_CRLH_position+0x96>
	case 7:
		return 28;
 8000548:	231c      	movs	r3, #28
 800054a:	e010      	b.n	800056e <get_CRLH_position+0x96>
	case 8:
		return 0;
 800054c:	2300      	movs	r3, #0
 800054e:	e00e      	b.n	800056e <get_CRLH_position+0x96>
	case 9:
		return 4;
 8000550:	2304      	movs	r3, #4
 8000552:	e00c      	b.n	800056e <get_CRLH_position+0x96>
	case 10:
		return 8;
 8000554:	2308      	movs	r3, #8
 8000556:	e00a      	b.n	800056e <get_CRLH_position+0x96>
	case 11:
		return 12;
 8000558:	230c      	movs	r3, #12
 800055a:	e008      	b.n	800056e <get_CRLH_position+0x96>
	case 12:
		return 16;
 800055c:	2310      	movs	r3, #16
 800055e:	e006      	b.n	800056e <get_CRLH_position+0x96>
	case 13:
		return 20;
 8000560:	2314      	movs	r3, #20
 8000562:	e004      	b.n	800056e <get_CRLH_position+0x96>
	case 14:
		return 24;
 8000564:	2318      	movs	r3, #24
 8000566:	e002      	b.n	800056e <get_CRLH_position+0x96>
	case 15:
		return 28;
 8000568:	231c      	movs	r3, #28
 800056a:	e000      	b.n	800056e <get_CRLH_position+0x96>
	}
	return 0;
 800056c:	2300      	movs	r3, #0

}
 800056e:	4618      	mov	r0, r3
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr

08000578 <MCAL_GPIO_Init>:
 * @param [in]	-Pin_config_s: Is a pointer to the structure that contains the information of the pin we want to configure
 * @retval		-none
 * Note			-In Our package LQFP48 we have only GPIOA and GPIOB
 */

void MCAL_GPIO_Init(GPIO_REGISTERS_t *GPIOx, Pin_Config_t * Pin_config_s){
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]

	volatile uint32_t *configRegister = NULL;
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]
	uint32_t pinConfig = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]

	configRegister = (Pin_config_s->Pin_Num < 8)? &GPIOx->GPIOx_CRL : &GPIOx->GPIOx_CRH;
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b07      	cmp	r3, #7
 8000590:	d801      	bhi.n	8000596 <MCAL_GPIO_Init+0x1e>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	e001      	b.n	800059a <MCAL_GPIO_Init+0x22>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	3304      	adds	r3, #4
 800059a:	60bb      	str	r3, [r7, #8]
	(*configRegister) &= ~(0x000F << get_CRLH_position(Pin_config_s->Pin_Num));
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff ff99 	bl	80004d8 <get_CRLH_position>
 80005a6:	4602      	mov	r2, r0
 80005a8:	230f      	movs	r3, #15
 80005aa:	4093      	lsls	r3, r2
 80005ac:	43da      	mvns	r2, r3
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	401a      	ands	r2, r3
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	601a      	str	r2, [r3, #0]

	/* IF OUTPUT */

	if( (Pin_config_s->mode == Output_ALF_Push_pull) || (Pin_config_s->mode == Output_ALF_Open_drain) || (Pin_config_s->mode == Output_Open_drain) || (Pin_config_s->mode == Output_Push_pull) )
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	2b06      	cmp	r3, #6
 80005be:	d00b      	beq.n	80005d8 <MCAL_GPIO_Init+0x60>
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	2b07      	cmp	r3, #7
 80005c6:	d007      	beq.n	80005d8 <MCAL_GPIO_Init+0x60>
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	2b05      	cmp	r3, #5
 80005ce:	d003      	beq.n	80005d8 <MCAL_GPIO_Init+0x60>
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	d10a      	bne.n	80005ee <MCAL_GPIO_Init+0x76>
	{
		pinConfig = ( ( ( (Pin_config_s->mode - 4 )<< 2 ) | (Pin_config_s->Speed_Output) ) & 0x0F );
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	3b04      	subs	r3, #4
 80005de:	009a      	lsls	r2, r3, #2
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	f003 030f 	and.w	r3, r3, #15
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	e031      	b.n	8000652 <MCAL_GPIO_Init+0xda>
	}

	else // IF INPUT
	{
		if( (Pin_config_s->mode == Input_Analog) || (Pin_config_s ->mode == Input_floating) )
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d003      	beq.n	80005fe <MCAL_GPIO_Init+0x86>
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d106      	bne.n	800060c <MCAL_GPIO_Init+0x94>
		{
			pinConfig =( ( (Pin_config_s->mode << 2) | 0x00 ) & 0x0F );
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	f003 030f 	and.w	r3, r3, #15
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	e022      	b.n	8000652 <MCAL_GPIO_Init+0xda>
		}
		else if(Pin_config_s->mode == Input_AF)
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	2b08      	cmp	r3, #8
 8000612:	d102      	bne.n	800061a <MCAL_GPIO_Init+0xa2>
		{
			pinConfig =( ( (Input_floating << 2 ) | 0x00 ) & 0x0F );
 8000614:	2304      	movs	r3, #4
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e01b      	b.n	8000652 <MCAL_GPIO_Init+0xda>
		}
		else // IF INPUT PULLUP\PULLDOWN
		{
			pinConfig = ( ( (Input_PullUp << 2 ) | 0x00 ) & 0x0F );
 800061a:	2308      	movs	r3, #8
 800061c:	60fb      	str	r3, [r7, #12]
			if(Pin_config_s->mode == Input_PullUp) // IF PULL UP
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	2b02      	cmp	r3, #2
 8000624:	d10a      	bne.n	800063c <MCAL_GPIO_Init+0xc4>
			{
				GPIOx->GPIOx_ODR |= (1<<Pin_config_s->Pin_Num) ;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	68db      	ldr	r3, [r3, #12]
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	6812      	ldr	r2, [r2, #0]
 800062e:	2101      	movs	r1, #1
 8000630:	fa01 f202 	lsl.w	r2, r1, r2
 8000634:	431a      	orrs	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	e00a      	b.n	8000652 <MCAL_GPIO_Init+0xda>
			}
			else // IF PULL DOWN
			{
				GPIOx->GPIOx_ODR &= ~(1<<Pin_config_s->Pin_Num) ;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	6812      	ldr	r2, [r2, #0]
 8000644:	2101      	movs	r1, #1
 8000646:	fa01 f202 	lsl.w	r2, r1, r2
 800064a:	43d2      	mvns	r2, r2
 800064c:	401a      	ands	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	60da      	str	r2, [r3, #12]

			}
		}
	}
	(*configRegister) |=( (pinConfig) << get_CRLH_position(Pin_config_s->Pin_Num) );
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ff3e 	bl	80004d8 <get_CRLH_position>
 800065c:	4602      	mov	r2, r0
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	fa03 f202 	lsl.w	r2, r3, r2
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	431a      	orrs	r2, r3
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	601a      	str	r2, [r3, #0]
}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <I2C_GenerateSTART>:

//---------------------------------------------------------------------------------------------------------------
//-----------------------------------------------<< Generic Functions >>-----------------------------------------
//---------------------------------------------------------------------------------------------------------------

void I2C_GenerateSTART(I2C_REGISTERS_t *I2Cx,FunctionalState NewState , Repeated_Start start){
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
 800067e:	460b      	mov	r3, r1
 8000680:	70fb      	strb	r3, [r7, #3]
 8000682:	4613      	mov	r3, r2
 8000684:	70bb      	strb	r3, [r7, #2]

	if(start != repeated_start)
 8000686:	78bb      	ldrb	r3, [r7, #2]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d007      	beq.n	800069c <I2C_GenerateSTART+0x26>
	{
		// Check if the bus is idle
		while(I2C_GetFlagStatus(I2Cx,I2C_FLAG_BUSY )); //todo || timeout flag check);
 800068c:	bf00      	nop
 800068e:	2100      	movs	r1, #0
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 f817 	bl	80006c4 <I2C_GetFlagStatus>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1f8      	bne.n	800068e <I2C_GenerateSTART+0x18>
	//	1: Repeated start generation
	//	In Slave mode:
	//	0: No Start generation
	//	1: Start generation when the bus is free

	if(NewState != Disable)
 800069c:	78fb      	ldrb	r3, [r7, #3]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d006      	beq.n	80006b0 <I2C_GenerateSTART+0x3a>
	{
		/* Generate a start condition  */
		I2Cx->I2C_CR1 |= I2C_CR1_START;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		I2Cx->I2C_CR1 &= ~(I2C_CR1_START);
	}
}
 80006ae:	e005      	b.n	80006bc <I2C_GenerateSTART+0x46>
		I2Cx->I2C_CR1 &= ~(I2C_CR1_START);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	601a      	str	r2, [r3, #0]
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <I2C_GetFlagStatus>:
//======================================================================================

FlagStatus I2C_GetFlagStatus(I2C_REGISTERS_t *I2Cx,Status flag){
 80006c4:	b480      	push	{r7}
 80006c6:	b087      	sub	sp, #28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6039      	str	r1, [r7, #0]

	uint32_t flag1=0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
	uint32_t flag2=0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
	uint32_t lastevent=0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
	FlagStatus bitstatus = RESET;
 80006da:	2300      	movs	r3, #0
 80006dc:	75fb      	strb	r3, [r7, #23]
	switch(flag)
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	2b03      	cmp	r3, #3
 80006e2:	d03c      	beq.n	800075e <I2C_GetFlagStatus+0x9a>
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d804      	bhi.n	80006f2 <I2C_GetFlagStatus+0x2e>
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d014      	beq.n	8000716 <I2C_GetFlagStatus+0x52>
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d81e      	bhi.n	800072e <I2C_GetFlagStatus+0x6a>
 80006f0:	e005      	b.n	80006fe <I2C_GetFlagStatus+0x3a>
 80006f2:	2b05      	cmp	r3, #5
 80006f4:	d927      	bls.n	8000746 <I2C_GetFlagStatus+0x82>
 80006f6:	4a30      	ldr	r2, [pc, #192]	; (80007b8 <I2C_GetFlagStatus+0xf4>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d03c      	beq.n	8000776 <I2C_GetFlagStatus+0xb2>
 80006fc:	e056      	b.n	80007ac <I2C_GetFlagStatus+0xe8>
		//– Set by hardware on detection of SDA or SCL low
		//– cleared by hardware on detection of a Stop condition.
		//It indicates a communication in progress on the bus. This information is still updated when
		//the interface is disabled (PE=0).

		if( (I2Cx->I2C_SR2) & (I2C_SR2_BUSY) )
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	2b00      	cmp	r3, #0
 8000708:	d002      	beq.n	8000710 <I2C_GetFlagStatus+0x4c>
		{
			bitstatus = SET;
 800070a:	2301      	movs	r3, #1
 800070c:	75fb      	strb	r3, [r7, #23]

		else
		{
			bitstatus = RESET;
		}
		break;
 800070e:	e04d      	b.n	80007ac <I2C_GetFlagStatus+0xe8>
			bitstatus = RESET;
 8000710:	2300      	movs	r3, #0
 8000712:	75fb      	strb	r3, [r7, #23]
		break;
 8000714:	e04a      	b.n	80007ac <I2C_GetFlagStatus+0xe8>
		//	1: Start condition generated.
		//	– Set when a Start condition generated.
		//	– Cleared by software by reading the SR1 register followed by writing the DR register, or by
		//	 hardware when PE=0

		if( (I2Cx->I2C_SR1) & (I2C_SR1_SB) )
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	2b00      	cmp	r3, #0
 8000720:	d002      	beq.n	8000728 <I2C_GetFlagStatus+0x64>
			bitstatus = SET;
 8000722:	2301      	movs	r3, #1
 8000724:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;

		break;
 8000726:	e041      	b.n	80007ac <I2C_GetFlagStatus+0xe8>
			bitstatus = RESET;
 8000728:	2300      	movs	r3, #0
 800072a:	75fb      	strb	r3, [r7, #23]
		break;
 800072c:	e03e      	b.n	80007ac <I2C_GetFlagStatus+0xe8>
		//		1: End of address transmission
		//		– For 10-bit addressing, the bit is set after the ACK of the 2nd byte.
		//		– For 7-bit addressing, the bit is set after the ACK of the byte.
		//		Note: ADDR is not set after a NACK reception

		if( (I2Cx->I2C_SR1) & (I2C_SR1_ADDR) )
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	2b00      	cmp	r3, #0
 8000738:	d002      	beq.n	8000740 <I2C_GetFlagStatus+0x7c>
			bitstatus = SET;
 800073a:	2301      	movs	r3, #1
 800073c:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;

		break;
 800073e:	e035      	b.n	80007ac <I2C_GetFlagStatus+0xe8>
			bitstatus = RESET;
 8000740:	2300      	movs	r3, #0
 8000742:	75fb      	strb	r3, [r7, #23]
		break;
 8000744:	e032      	b.n	80007ac <I2C_GetFlagStatus+0xe8>
		//		– Cleared by software writing to the DR register or by hardware after a start or a stop condition
		//		or when PE=0.
		//		TxE is not set if either a NACK is received, or if next byte to be transmitted is PEC (PEC=1)
		//		Note: TxE is not cleared by writing the first data being transmitted, or by writing data when
		//		BTF is set, as in both cases the data register is still empty.
		if( (I2Cx->I2C_SR1) & (I2C_SR1_TXE) )
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074e:	2b00      	cmp	r3, #0
 8000750:	d002      	beq.n	8000758 <I2C_GetFlagStatus+0x94>
		{
			bitstatus = SET;
 8000752:	2301      	movs	r3, #1
 8000754:	75fb      	strb	r3, [r7, #23]

		else
		{
			bitstatus = RESET;
		}
		break;
 8000756:	e029      	b.n	80007ac <I2C_GetFlagStatus+0xe8>
			bitstatus = RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	75fb      	strb	r3, [r7, #23]
		break;
 800075c:	e026      	b.n	80007ac <I2C_GetFlagStatus+0xe8>
		//		1: Data register not empty
		//		– Set when data register is not empty in receiver mode. RxNE is not set during address phase.
		//		– Cleared by software reading or writing the DR register or by hardware when PE=0.
		//		RxNE is not set in case of ARLO event.
		//		Note: RxNE is not cleared by reading data when BTF is set, as the data register is still full.
		if( (I2Cx->I2C_SR1) & (I2C_SR1_RXNE) )
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000766:	2b00      	cmp	r3, #0
 8000768:	d002      	beq.n	8000770 <I2C_GetFlagStatus+0xac>
		{
			bitstatus = SET;
 800076a:	2301      	movs	r3, #1
 800076c:	75fb      	strb	r3, [r7, #23]

		else
		{
			bitstatus = RESET;
		}
		break;
 800076e:	e01d      	b.n	80007ac <I2C_GetFlagStatus+0xe8>
			bitstatus = RESET;
 8000770:	2300      	movs	r3, #0
 8000772:	75fb      	strb	r3, [r7, #23]
		break;
 8000774:	e01a      	b.n	80007ac <I2C_GetFlagStatus+0xe8>

	case MASTER_BYTE_TRANSMITTING:
	{
		/*  Read the I2Cx Status registers */
		flag1 = I2Cx->I2C_SR1;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	613b      	str	r3, [r7, #16]
		flag2 = I2Cx->I2C_SR2;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	60fb      	str	r3, [r7, #12]
		flag2 = (flag2 << 16);
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	041b      	lsls	r3, r3, #16
 8000786:	60fb      	str	r3, [r7, #12]
		/* Get the last event value from I2Cx status register */
		lastevent = (flag1 | flag2 ) & ((uint32_t)0x00FFFFFF);
 8000788:	693a      	ldr	r2, [r7, #16]
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	4313      	orrs	r3, r2
 800078e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000792:	60bb      	str	r3, [r7, #8]
		/* Check whether the last event contains the flag */
		if( (lastevent & flag) == flag )
 8000794:	68ba      	ldr	r2, [r7, #8]
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	4013      	ands	r3, r2
 800079a:	683a      	ldr	r2, [r7, #0]
 800079c:	429a      	cmp	r2, r3
 800079e:	d102      	bne.n	80007a6 <I2C_GetFlagStatus+0xe2>
		{
			bitstatus = SET;
 80007a0:	2301      	movs	r3, #1
 80007a2:	75fb      	strb	r3, [r7, #23]
		else
		{
			bitstatus = RESET;

		}
		break;
 80007a4:	e001      	b.n	80007aa <I2C_GetFlagStatus+0xe6>
			bitstatus = RESET;
 80007a6:	2300      	movs	r3, #0
 80007a8:	75fb      	strb	r3, [r7, #23]
		break;
 80007aa:	bf00      	nop
	}

	}


	return bitstatus;
 80007ac:	7dfb      	ldrb	r3, [r7, #23]



}
 80007ae:	4618      	mov	r0, r3
 80007b0:	371c      	adds	r7, #28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	00070080 	.word	0x00070080

080007bc <I2C_SendAddress>:

//======================================================================================

void I2C_SendAddress(I2C_REGISTERS_t *I2Cx,uint16_t Address , I2C_Direction Direction)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	807b      	strh	r3, [r7, #2]
 80007c8:	4613      	mov	r3, r2
 80007ca:	707b      	strb	r3, [r7, #1]

	Address = (Address << 1);
 80007cc:	887b      	ldrh	r3, [r7, #2]
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	807b      	strh	r3, [r7, #2]
	if(Direction != I2C_Direction_Transmitter)
 80007d2:	787b      	ldrb	r3, [r7, #1]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d004      	beq.n	80007e2 <I2C_SendAddress+0x26>
	{
		/* Set the address bit0 for read */
		Address |= ( 1 << 0);
 80007d8:	887b      	ldrh	r3, [r7, #2]
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	807b      	strh	r3, [r7, #2]
 80007e0:	e003      	b.n	80007ea <I2C_SendAddress+0x2e>
	}
	else
	{
		/* Set the address bit0 for write */
		Address &= ~( 1 << 0);
 80007e2:	887b      	ldrh	r3, [r7, #2]
 80007e4:	f023 0301 	bic.w	r3, r3, #1
 80007e8:	807b      	strh	r3, [r7, #2]
	}

	/* Send The Address */
	I2Cx->I2C_DR = Address;
 80007ea:	887a      	ldrh	r2, [r7, #2]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	611a      	str	r2, [r3, #16]

}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr

080007fa <I2C_AcknowledgeConfig>:

//================================================================================


void I2C_AcknowledgeConfig(I2C_REGISTERS_t *I2Cx,FunctionalState NewState){
 80007fa:	b480      	push	{r7}
 80007fc:	b085      	sub	sp, #20
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
 8000802:	460b      	mov	r3, r1
 8000804:	70fb      	strb	r3, [r7, #3]

	uint16_t tempreg;
	tempreg = I2Cx->I2C_CR1;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	81fb      	strh	r3, [r7, #14]

	if(NewState == Enable)
 800080c:	78fb      	ldrb	r3, [r7, #3]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d107      	bne.n	8000822 <I2C_AcknowledgeConfig+0x28>
	{
		tempreg |= I2C_CR1_ACK;
 8000812:	89fb      	ldrh	r3, [r7, #14]
 8000814:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000818:	81fb      	strh	r3, [r7, #14]
		I2Cx->I2C_CR1 = tempreg;
 800081a:	89fa      	ldrh	r2, [r7, #14]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	601a      	str	r2, [r3, #0]
	{
		tempreg &= ~(I2C_CR1_ACK);
		I2Cx->I2C_CR1 = tempreg;
	}

}
 8000820:	e006      	b.n	8000830 <I2C_AcknowledgeConfig+0x36>
		tempreg &= ~(I2C_CR1_ACK);
 8000822:	89fb      	ldrh	r3, [r7, #14]
 8000824:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000828:	81fb      	strh	r3, [r7, #14]
		I2Cx->I2C_CR1 = tempreg;
 800082a:	89fa      	ldrh	r2, [r7, #14]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	601a      	str	r2, [r3, #0]
}
 8000830:	bf00      	nop
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr

0800083a <I2C_GenerateSTOP>:
//=================================================================================

void I2C_GenerateSTOP(I2C_REGISTERS_t *I2Cx,FunctionalState NewState){
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
 8000842:	460b      	mov	r3, r1
 8000844:	70fb      	strb	r3, [r7, #3]

	if(NewState != Disable)
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d006      	beq.n	800085a <I2C_GenerateSTOP+0x20>
	{
		/* Generate a Stop condition */
		I2Cx->I2C_CR1 |= I2C_CR1_STOP;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	601a      	str	r2, [r3, #0]
		I2Cx->I2C_CR1 &= ~(I2C_CR1_STOP);

	}


}
 8000858:	e005      	b.n	8000866 <I2C_GenerateSTOP+0x2c>
		I2Cx->I2C_CR1 &= ~(I2C_CR1_STOP);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	601a      	str	r2, [r3, #0]
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <MCAL_I2C_Init>:
 * @param [in] 		- I2C_InitStruct : a pointer to I2C_InitTypeDef structure that contains the configuration information for the specified I2C Module
 * @retval 			- None
 * Note 			- Supported for I2C SM mode only
 * 					- Support only 7-bit address mode
 */
void MCAL_I2C_Init(I2C_REGISTERS_t * I2Cx, I2C_InitTypeDef * I2C_InitStruct){
 8000870:	b5b0      	push	{r4, r5, r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
	uint16_t tempreg=0;
 800087a:	2300      	movs	r3, #0
 800087c:	82fb      	strh	r3, [r7, #22]
	uint16_t freqrange=0;
 800087e:	2300      	movs	r3, #0
 8000880:	82bb      	strh	r3, [r7, #20]
	uint32_t pclk1 = 8000000;
 8000882:	4b7a      	ldr	r3, [pc, #488]	; (8000a6c <MCAL_I2C_Init+0x1fc>)
 8000884:	613b      	str	r3, [r7, #16]
	uint16_t result = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	81fb      	strh	r3, [r7, #14]
	if(I2Cx == I2C1)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a78      	ldr	r2, [pc, #480]	; (8000a70 <MCAL_I2C_Init+0x200>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d110      	bne.n	80008b4 <MCAL_I2C_Init+0x44>
	{
		Global_I2C_Config[I2C1_INDEX] = *I2C_InitStruct;
 8000892:	4a78      	ldr	r2, [pc, #480]	; (8000a74 <MCAL_I2C_Init+0x204>)
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	4614      	mov	r4, r2
 8000898:	461d      	mov	r5, r3
 800089a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800089c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800089e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a2:	682b      	ldr	r3, [r5, #0]
 80008a4:	6023      	str	r3, [r4, #0]
		I2C1_CLOCK_EN();
 80008a6:	4b74      	ldr	r3, [pc, #464]	; (8000a78 <MCAL_I2C_Init+0x208>)
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	4a73      	ldr	r2, [pc, #460]	; (8000a78 <MCAL_I2C_Init+0x208>)
 80008ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008b0:	61d3      	str	r3, [r2, #28]
 80008b2:	e010      	b.n	80008d6 <MCAL_I2C_Init+0x66>
	}
	else
	{
		Global_I2C_Config[I2C2_INDEX] = *I2C_InitStruct;
 80008b4:	4b6f      	ldr	r3, [pc, #444]	; (8000a74 <MCAL_I2C_Init+0x204>)
 80008b6:	683a      	ldr	r2, [r7, #0]
 80008b8:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80008bc:	4615      	mov	r5, r2
 80008be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c6:	682b      	ldr	r3, [r5, #0]
 80008c8:	6023      	str	r3, [r4, #0]
		I2C2_CLOCK_EN();
 80008ca:	4b6b      	ldr	r3, [pc, #428]	; (8000a78 <MCAL_I2C_Init+0x208>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	4a6a      	ldr	r2, [pc, #424]	; (8000a78 <MCAL_I2C_Init+0x208>)
 80008d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008d4:	61d3      	str	r3, [r2, #28]
	}

	if(I2C_InitStruct->I2C_Mode == I2C_Mode_I2C)
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d17f      	bne.n	80009de <MCAL_I2C_Init+0x16e>
	{
		/*------------------ INIT Timing ---------------------*/
		// -- I2C_CR2.FREQ[5:0]: Peripheral clock frequency
		/* Get the I2Cx CR2 value */
		tempreg = I2Cx->I2C_CR2;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	82fb      	strh	r3, [r7, #22]
		/* Clear frequency FREQ[5:0] bits */
		tempreg &= ~(I2C_CR2_FREQ);
 80008e4:	8afb      	ldrh	r3, [r7, #22]
 80008e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008ea:	82fb      	strh	r3, [r7, #22]
		/* Get pclk1 frequency value */
		pclk1 = RCC_Get_PCLK1();
 80008ec:	f000 fa2e 	bl	8000d4c <RCC_Get_PCLK1>
 80008f0:	6138      	str	r0, [r7, #16]
		/* Set frequency bits depending on pclk1 value */
		freqrange = (uint16_t)(pclk1 / 1000000);
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	4a61      	ldr	r2, [pc, #388]	; (8000a7c <MCAL_I2C_Init+0x20c>)
 80008f6:	fba2 2303 	umull	r2, r3, r2, r3
 80008fa:	0c9b      	lsrs	r3, r3, #18
 80008fc:	82bb      	strh	r3, [r7, #20]
		tempreg |= freqrange;
 80008fe:	8afa      	ldrh	r2, [r7, #22]
 8000900:	8abb      	ldrh	r3, [r7, #20]
 8000902:	4313      	orrs	r3, r2
 8000904:	82fb      	strh	r3, [r7, #22]
		/* Write to I2Cx CR2 */
		I2Cx->I2C_CR2 = tempreg;
 8000906:	8afa      	ldrh	r2, [r7, #22]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	605a      	str	r2, [r3, #4]
		//• Configure the clock control registers(I2C_CCR)
		// Disable I2C Peripheral while configuring time
		I2Cx->I2C_CR1 &= ~(I2C_CR1_PE);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f023 0201 	bic.w	r2, r3, #1
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	601a      	str	r2, [r3, #0]
		tempreg = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	82fb      	strh	r3, [r7, #22]
		/* Configure speed in standard mode */
		if( (I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_50K) || (I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_100K) )
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000924:	4293      	cmp	r3, r2
 8000926:	d004      	beq.n	8000932 <MCAL_I2C_Init+0xc2>
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a54      	ldr	r2, [pc, #336]	; (8000a80 <MCAL_I2C_Init+0x210>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d112      	bne.n	8000958 <MCAL_I2C_Init+0xe8>
		{
			/* Standard mode speed calculate */
			// Tclk/2 = CRR * Tpclk1
			// CRR = Tclk / (2 * Tpclk1 )
			// CRR = Fpclk1 / ( 2 * I2C_ClockFrequency )
			result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1) );
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	fbb2 f3f3 	udiv	r3, r2, r3
 800093e:	81fb      	strh	r3, [r7, #14]
			tempreg |= result;
 8000940:	8afa      	ldrh	r2, [r7, #22]
 8000942:	89fb      	ldrh	r3, [r7, #14]
 8000944:	4313      	orrs	r3, r2
 8000946:	82fb      	strh	r3, [r7, #22]
			I2Cx->I2C_CCR = tempreg;
 8000948:	8afa      	ldrh	r2, [r7, #22]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	61da      	str	r2, [r3, #28]

			/*------------------ I2C_TRISE Configuration ---------------------*/
			I2Cx->I2C_TRISE = freqrange + 1;
 800094e:	8abb      	ldrh	r3, [r7, #20]
 8000950:	3301      	adds	r3, #1
 8000952:	461a      	mov	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	621a      	str	r2, [r3, #32]
			// Fast mode not supported
		}

		/*------------------ I2Cx CR1 Configuration ---------------------*/
		// Get THe I2Cx CR1 value
		tempreg = I2Cx->I2C_CR1;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	82fb      	strh	r3, [r7, #22]
		tempreg |= (uint16_t)( I2C_InitStruct->I2C_ACK_Control |   I2C_InitStruct->General_Call_Address_Detection | I2C_InitStruct->I2C_Mode | I2C_InitStruct->StretchMode );
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	b29a      	uxth	r2, r3
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	69db      	ldr	r3, [r3, #28]
 8000968:	b29b      	uxth	r3, r3
 800096a:	4313      	orrs	r3, r2
 800096c:	b29a      	uxth	r2, r3
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	b29b      	uxth	r3, r3
 8000974:	4313      	orrs	r3, r2
 8000976:	b29a      	uxth	r2, r3
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	b29b      	uxth	r3, r3
 800097e:	4313      	orrs	r3, r2
 8000980:	b29a      	uxth	r2, r3
 8000982:	8afb      	ldrh	r3, [r7, #22]
 8000984:	4313      	orrs	r3, r2
 8000986:	82fb      	strh	r3, [r7, #22]
		// Write to I2Cx CR1
		I2Cx->I2C_CR1 = tempreg;
 8000988:	8afa      	ldrh	r2, [r7, #22]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	601a      	str	r2, [r3, #0]

		/*------------------ I2Cx OAR1 & I2Cx OAR2 Configuration ---------------------*/
		tempreg =0;
 800098e:	2300      	movs	r3, #0
 8000990:	82fb      	strh	r3, [r7, #22]
		if(I2C_InitStruct->I2C_Slave_Address.Enable_Dual_ADD == 1 )
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	899b      	ldrh	r3, [r3, #12]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d10d      	bne.n	80009b6 <MCAL_I2C_Init+0x146>
		{
			tempreg = I2C_OAR2_ENDUAL ;
 800099a:	2301      	movs	r3, #1
 800099c:	82fb      	strh	r3, [r7, #22]
			tempreg |= I2C_InitStruct->I2C_Slave_Address.Secondary_slave_address << I2C_OAR2_ADD2_Pos;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	8a1b      	ldrh	r3, [r3, #16]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	b21a      	sxth	r2, r3
 80009a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	b21b      	sxth	r3, r3
 80009ae:	82fb      	strh	r3, [r7, #22]
			I2Cx->I2C_OAR2 = tempreg;
 80009b0:	8afa      	ldrh	r2, [r7, #22]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	60da      	str	r2, [r3, #12]
		}
		tempreg = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	82fb      	strh	r3, [r7, #22]
		tempreg |= I2C_InitStruct->I2C_Slave_Address.Primary_slave_address << 1 ;
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	89db      	ldrh	r3, [r3, #14]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	b21a      	sxth	r2, r3
 80009c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	82fb      	strh	r3, [r7, #22]
		tempreg |= I2C_InitStruct->I2C_Slave_Address.I2C_Addressing_Slave_mode;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	695b      	ldr	r3, [r3, #20]
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	8afb      	ldrh	r3, [r7, #22]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	82fb      	strh	r3, [r7, #22]
		I2Cx->I2C_OAR1 = tempreg;
 80009d8:	8afa      	ldrh	r2, [r7, #22]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	609a      	str	r2, [r3, #8]
		// SMBus not supported
	}


	// Interrupt Mode (Slave mode ) // Check callback pointer != NULL
	if(I2C_InitStruct->P_Slave_Event_CallBack != NULL)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	6a1b      	ldr	r3, [r3, #32]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d038      	beq.n	8000a58 <MCAL_I2C_Init+0x1e8>
	{
		//Enable IRQ
		I2Cx->I2C_CR2 |= (I2C_CR2_ITERREN);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	605a      	str	r2, [r3, #4]
		I2Cx->I2C_CR2 |= (I2C_CR2_ITEVTEN);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	605a      	str	r2, [r3, #4]
		I2Cx->I2C_CR2 |= (I2C_CR2_ITBUFEN);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	605a      	str	r2, [r3, #4]

		if(I2Cx == I2C1)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a18      	ldr	r2, [pc, #96]	; (8000a70 <MCAL_I2C_Init+0x200>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d10c      	bne.n	8000a2c <MCAL_I2C_Init+0x1bc>
		{
			NVIC_IRQ31_I2C1_EV_Enable;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <MCAL_I2C_Init+0x214>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <MCAL_I2C_Init+0x214>)
 8000a18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1c:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_Enable;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <MCAL_I2C_Init+0x214>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	4a18      	ldr	r2, [pc, #96]	; (8000a84 <MCAL_I2C_Init+0x214>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6053      	str	r3, [r2, #4]
 8000a2a:	e00f      	b.n	8000a4c <MCAL_I2C_Init+0x1dc>


		}
		else if (I2Cx == I2C2)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a16      	ldr	r2, [pc, #88]	; (8000a88 <MCAL_I2C_Init+0x218>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d10b      	bne.n	8000a4c <MCAL_I2C_Init+0x1dc>
		{
			NVIC_IRQ31_I2C2_EV_Enable;
 8000a34:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <MCAL_I2C_Init+0x214>)
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <MCAL_I2C_Init+0x214>)
 8000a3a:	f043 0302 	orr.w	r3, r3, #2
 8000a3e:	6053      	str	r3, [r2, #4]
			NVIC_IRQ32_I2C2_ER_Enable;
 8000a40:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MCAL_I2C_Init+0x214>)
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	4a0f      	ldr	r2, [pc, #60]	; (8000a84 <MCAL_I2C_Init+0x214>)
 8000a46:	f043 0304 	orr.w	r3, r3, #4
 8000a4a:	6053      	str	r3, [r2, #4]
		}
		I2Cx->I2C_SR1 =0;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
		I2Cx->I2C_SR2 =0;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
	}

	I2Cx->I2C_CR1 |= I2C_CR1_PE;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f043 0201 	orr.w	r2, r3, #1
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	601a      	str	r2, [r3, #0]

}
 8000a64:	bf00      	nop
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a6c:	007a1200 	.word	0x007a1200
 8000a70:	40005400 	.word	0x40005400
 8000a74:	20000034 	.word	0x20000034
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	431bde83 	.word	0x431bde83
 8000a80:	000186a0 	.word	0x000186a0
 8000a84:	e000e100 	.word	0xe000e100
 8000a88:	40005800 	.word	0x40005800

08000a8c <MCAL_I2C_GPIO_Set_Pins>:
 * Note 			- Must open clock for AFIO & GPIO After GPIO Initialization
 * 					- Supported for I2C SM MODE only
 */


void MCAL_I2C_GPIO_Set_Pins(I2C_REGISTERS_t * I2Cx){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]

	Pin_Config_t PinCfg;

	if(I2Cx == I2C1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a1e      	ldr	r2, [pc, #120]	; (8000b10 <MCAL_I2C_GPIO_Set_Pins+0x84>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d118      	bne.n	8000ace <MCAL_I2C_GPIO_Set_Pins+0x42>
	{
		//PB6 : I2C1_SCL
		//PB7 : I2C1_SDA

		PinCfg.Pin_Num = 6;
 8000a9c:	2306      	movs	r3, #6
 8000a9e:	60fb      	str	r3, [r7, #12]
		PinCfg.mode = Output_ALF_Open_drain;
 8000aa0:	2307      	movs	r3, #7
 8000aa2:	613b      	str	r3, [r7, #16]
		PinCfg.Speed_Output = speed_10;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	4619      	mov	r1, r3
 8000aae:	4819      	ldr	r0, [pc, #100]	; (8000b14 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 8000ab0:	f7ff fd62 	bl	8000578 <MCAL_GPIO_Init>

		PinCfg.Pin_Num = 7;
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	60fb      	str	r3, [r7, #12]
		PinCfg.mode = Output_ALF_Open_drain;
 8000ab8:	2307      	movs	r3, #7
 8000aba:	613b      	str	r3, [r7, #16]
		PinCfg.Speed_Output = speed_10;
 8000abc:	2301      	movs	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4813      	ldr	r0, [pc, #76]	; (8000b14 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 8000ac8:	f7ff fd56 	bl	8000578 <MCAL_GPIO_Init>


	}


}
 8000acc:	e01b      	b.n	8000b06 <MCAL_I2C_GPIO_Set_Pins+0x7a>
	else if(I2Cx == I2C2)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a11      	ldr	r2, [pc, #68]	; (8000b18 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d117      	bne.n	8000b06 <MCAL_I2C_GPIO_Set_Pins+0x7a>
		PinCfg.Pin_Num = 10;
 8000ad6:	230a      	movs	r3, #10
 8000ad8:	60fb      	str	r3, [r7, #12]
		PinCfg.mode = Output_ALF_Open_drain;
 8000ada:	2307      	movs	r3, #7
 8000adc:	613b      	str	r3, [r7, #16]
		PinCfg.Speed_Output = speed_10;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480a      	ldr	r0, [pc, #40]	; (8000b14 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 8000aea:	f7ff fd45 	bl	8000578 <MCAL_GPIO_Init>
		PinCfg.Pin_Num = 11;
 8000aee:	230b      	movs	r3, #11
 8000af0:	60fb      	str	r3, [r7, #12]
		PinCfg.mode = Output_ALF_Open_drain;
 8000af2:	2307      	movs	r3, #7
 8000af4:	613b      	str	r3, [r7, #16]
		PinCfg.Speed_Output = speed_10;
 8000af6:	2301      	movs	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	4619      	mov	r1, r3
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 8000b02:	f7ff fd39 	bl	8000578 <MCAL_GPIO_Init>
}
 8000b06:	bf00      	nop
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40005400 	.word	0x40005400
 8000b14:	40010c00 	.word	0x40010c00
 8000b18:	40005800 	.word	0x40005800

08000b1c <MCAL_I2C_Master_TX>:
 * @retval 			- None
 * Note 			- None
 */


void MCAL_I2C_Master_TX(I2C_REGISTERS_t *I2Cx,uint16_t devAddr,uint8_t * dataOut,uint32_t dataLen , Stop_Condition Stop, Repeated_Start start){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	607a      	str	r2, [r7, #4]
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	817b      	strh	r3, [r7, #10]

	int i=0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
	// support timeout ( configure timer to work for specific duration then raise interrupt )
	// this interrupt set a flag to 1 --> timer_interrupt(){flag=1}
	//so any while condition should check this flag in addition to any polling condition ( check flag || any polling condition )

	// 1. Set the start bit in the I2C_CR1 register to generate a start condition
	I2C_GenerateSTART(I2Cx, Enable, start);
 8000b30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b34:	461a      	mov	r2, r3
 8000b36:	2100      	movs	r1, #0
 8000b38:	68f8      	ldr	r0, [r7, #12]
 8000b3a:	f7ff fd9c 	bl	8000676 <I2C_GenerateSTART>

	// 2. Wait for EV5
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address
	while(!(I2C_GetFlagStatus(I2Cx, EV5)));
 8000b3e:	bf00      	nop
 8000b40:	2101      	movs	r1, #1
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	f7ff fdbe 	bl	80006c4 <I2C_GetFlagStatus>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d0f8      	beq.n	8000b40 <MCAL_I2C_Master_TX+0x24>


	// 3. Send Address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Transmitter);
 8000b4e:	897b      	ldrh	r3, [r7, #10]
 8000b50:	2200      	movs	r2, #0
 8000b52:	4619      	mov	r1, r3
 8000b54:	68f8      	ldr	r0, [r7, #12]
 8000b56:	f7ff fe31 	bl	80007bc <I2C_SendAddress>

	// 4. Wait for EV6
	//	EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2
	while(!(I2C_GetFlagStatus(I2Cx, EV6)));
 8000b5a:	bf00      	nop
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	68f8      	ldr	r0, [r7, #12]
 8000b60:	f7ff fdb0 	bl	80006c4 <I2C_GetFlagStatus>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d0f8      	beq.n	8000b5c <MCAL_I2C_Master_TX+0x40>


	// 5. Check for TRA,BUSY,MSL,TXE flags

	while(!(I2C_GetFlagStatus(I2Cx, MASTER_BYTE_TRANSMITTING)));
 8000b6a:	bf00      	nop
 8000b6c:	4915      	ldr	r1, [pc, #84]	; (8000bc4 <MCAL_I2C_Master_TX+0xa8>)
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	f7ff fda8 	bl	80006c4 <I2C_GetFlagStatus>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d0f8      	beq.n	8000b6c <MCAL_I2C_Master_TX+0x50>

	// 6. Send data
	for(i =0; i<dataLen; i++)
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	e011      	b.n	8000ba4 <MCAL_I2C_Master_TX+0x88>
	{
		/* Write in the DR register the data to be sent */
		I2Cx->I2C_DR = dataOut[i];
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	611a      	str	r2, [r3, #16]
		// 7. Wait for EV8
		//	  EV8: TxE=1, shift register not empty, .data register empty, cleared by writing DR register
		while(!(I2C_GetFlagStatus(I2Cx, EV8)));
 8000b8e:	bf00      	nop
 8000b90:	2104      	movs	r1, #4
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f7ff fd96 	bl	80006c4 <I2C_GetFlagStatus>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d0f8      	beq.n	8000b90 <MCAL_I2C_Master_TX+0x74>
	for(i =0; i<dataLen; i++)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	683a      	ldr	r2, [r7, #0]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d8e9      	bhi.n	8000b80 <MCAL_I2C_Master_TX+0x64>
	}


	if(Stop == With_Stop)
 8000bac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d103      	bne.n	8000bbc <MCAL_I2C_Master_TX+0xa0>
	{
		//8. Send stop condition
		I2C_GenerateSTOP(I2Cx, Enable);
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f7ff fe3f 	bl	800083a <I2C_GenerateSTOP>
	}
}
 8000bbc:	bf00      	nop
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	00070080 	.word	0x00070080

08000bc8 <MCAL_I2C_Master_RX>:
 * @param [in] 		- Stop : select send stop bit or not
 * @param [in] 		- Start : select send start or repeated start
 * @retval 			- None
 * Note 			- None
 */
void MCAL_I2C_Master_RX(I2C_REGISTERS_t *I2Cx,uint16_t devAddr,uint8_t * dataOut,uint32_t dataLen , Stop_Condition Stop, Repeated_Start start){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	817b      	strh	r3, [r7, #10]


	uint8_t i =0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	75fb      	strb	r3, [r7, #23]
	uint8_t index = I2Cx==I2C1?  I2C1_INDEX: I2C2_INDEX;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4a32      	ldr	r2, [pc, #200]	; (8000ca8 <MCAL_I2C_Master_RX+0xe0>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	bf14      	ite	ne
 8000be4:	2301      	movne	r3, #1
 8000be6:	2300      	moveq	r3, #0
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	75bb      	strb	r3, [r7, #22]

	// 1. Set the start bit in the I2C_CR1 register to generate a start condition
	I2C_GenerateSTART(I2Cx, Enable, start);
 8000bec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	68f8      	ldr	r0, [r7, #12]
 8000bf6:	f7ff fd3e 	bl	8000676 <I2C_GenerateSTART>

	// 2. Wait for EV5
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address
	while(!(I2C_GetFlagStatus(I2Cx, EV5)));
 8000bfa:	bf00      	nop
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	68f8      	ldr	r0, [r7, #12]
 8000c00:	f7ff fd60 	bl	80006c4 <I2C_GetFlagStatus>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0f8      	beq.n	8000bfc <MCAL_I2C_Master_RX+0x34>


	// 3. Send Address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Receiver);
 8000c0a:	897b      	ldrh	r3, [r7, #10]
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4619      	mov	r1, r3
 8000c10:	68f8      	ldr	r0, [r7, #12]
 8000c12:	f7ff fdd3 	bl	80007bc <I2C_SendAddress>

	// 4. Wait for EV6
	//	EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2
	while(!(I2C_GetFlagStatus(I2Cx, EV6)));
 8000c16:	bf00      	nop
 8000c18:	2102      	movs	r1, #2
 8000c1a:	68f8      	ldr	r0, [r7, #12]
 8000c1c:	f7ff fd52 	bl	80006c4 <I2C_GetFlagStatus>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0f8      	beq.n	8000c18 <MCAL_I2C_Master_RX+0x50>

	I2C_AcknowledgeConfig(I2Cx, Enable);
 8000c26:	2100      	movs	r1, #0
 8000c28:	68f8      	ldr	r0, [r7, #12]
 8000c2a:	f7ff fde6 	bl	80007fa <I2C_AcknowledgeConfig>


	if(dataLen)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d01c      	beq.n	8000c6e <MCAL_I2C_Master_RX+0xa6>
	{
		//read data until Len becomes zero
		for( i = dataLen; i>1; i--)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	75fb      	strb	r3, [r7, #23]
 8000c38:	e012      	b.n	8000c60 <MCAL_I2C_Master_RX+0x98>
		{
			//wait until RxNE becomes 1
			while(!(I2C_GetFlagStatus(I2Cx, EV7)));
 8000c3a:	bf00      	nop
 8000c3c:	2103      	movs	r1, #3
 8000c3e:	68f8      	ldr	r0, [r7, #12]
 8000c40:	f7ff fd40 	bl	80006c4 <I2C_GetFlagStatus>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d0f8      	beq.n	8000c3c <MCAL_I2C_Master_RX+0x74>
			//Read the data from data register into the buffer
			*dataOut = I2Cx->I2C_DR;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	691b      	ldr	r3, [r3, #16]
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	701a      	strb	r2, [r3, #0]
			//Increment the buffer address
			dataOut++;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3301      	adds	r3, #1
 8000c58:	607b      	str	r3, [r7, #4]
		for( i = dataLen; i>1; i--)
 8000c5a:	7dfb      	ldrb	r3, [r7, #23]
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	75fb      	strb	r3, [r7, #23]
 8000c60:	7dfb      	ldrb	r3, [r7, #23]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d8e9      	bhi.n	8000c3a <MCAL_I2C_Master_RX+0x72>
		}

		I2C_AcknowledgeConfig(I2Cx, Disable);
 8000c66:	2101      	movs	r1, #1
 8000c68:	68f8      	ldr	r0, [r7, #12]
 8000c6a:	f7ff fdc6 	bl	80007fa <I2C_AcknowledgeConfig>

	}


	if(Stop == With_Stop)
 8000c6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d103      	bne.n	8000c7e <MCAL_I2C_Master_RX+0xb6>
	{
		//8. Send stop condition
		I2C_GenerateSTOP(I2Cx, Enable);
 8000c76:	2100      	movs	r1, #0
 8000c78:	68f8      	ldr	r0, [r7, #12]
 8000c7a:	f7ff fdde 	bl	800083a <I2C_GenerateSTOP>
	}

	//Re-enable Acknowledge
	if(Global_I2C_Config[index].I2C_ACK_Control == I2C_Ack_Enable)
 8000c7e:	7dba      	ldrb	r2, [r7, #22]
 8000c80:	490a      	ldr	r1, [pc, #40]	; (8000cac <MCAL_I2C_Master_RX+0xe4>)
 8000c82:	4613      	mov	r3, r2
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	4413      	add	r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	3318      	adds	r3, #24
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c94:	d103      	bne.n	8000c9e <MCAL_I2C_Master_RX+0xd6>
	{
		I2C_AcknowledgeConfig(I2Cx, Enable);
 8000c96:	2100      	movs	r1, #0
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f7ff fdae 	bl	80007fa <I2C_AcknowledgeConfig>

	}



}
 8000c9e:	bf00      	nop
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40005400 	.word	0x40005400
 8000cac:	20000034 	.word	0x20000034

08000cb0 <I2C1_ER_IRQHandler>:
 * ======================================================================================================================
 */

//Not supported
void I2C1_ER_IRQHandler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0


}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr

08000cbc <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0


}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <RCC_Get_SYSCLK>:
#include "RCC_DRIVER.h"
uint8_t AHB_Prescaler[] = {0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8};
uint8_t APB2_Prescaler[] = {0,0,0,0,1,2,3,4};


uint32_t RCC_Get_SYSCLK(void){
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0

	int x;
	x = ( (RCC->RCC_CFGR)  & (0b11 << 2) ) >> 2;
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <RCC_Get_SYSCLK+0x38>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	089b      	lsrs	r3, r3, #2
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	607b      	str	r3, [r7, #4]
	switch (x)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d005      	beq.n	8000d04 <RCC_Get_SYSCLK+0x24>
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d005      	beq.n	8000d08 <RCC_Get_SYSCLK+0x28>
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d105      	bne.n	8000d0c <RCC_Get_SYSCLK+0x2c>
	{
	case 0:
		return HSI;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <RCC_Get_SYSCLK+0x3c>)
 8000d02:	e004      	b.n	8000d0e <RCC_Get_SYSCLK+0x2e>
		break;
	case 1:
		return HSE;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <RCC_Get_SYSCLK+0x40>)
 8000d06:	e002      	b.n	8000d0e <RCC_Get_SYSCLK+0x2e>
		break;
	case 2:
		return PLL;
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <RCC_Get_SYSCLK+0x40>)
 8000d0a:	e000      	b.n	8000d0e <RCC_Get_SYSCLK+0x2e>
		break;
	}
return 0;
 8000d0c:	2300      	movs	r3, #0

}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	007a1200 	.word	0x007a1200
 8000d20:	00f42400 	.word	0x00f42400

08000d24 <RCC_Get_HCLK>:
uint32_t RCC_Get_HCLK(void){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0

	return RCC_Get_SYSCLK() >> AHB_Prescaler[ ( (RCC->RCC_CFGR) & (0b111 << 4) ) >> 4 ];
 8000d28:	f7ff ffda 	bl	8000ce0 <RCC_Get_SYSCLK>
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <RCC_Get_HCLK+0x20>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	091b      	lsrs	r3, r3, #4
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	4a03      	ldr	r2, [pc, #12]	; (8000d48 <RCC_Get_HCLK+0x24>)
 8000d3a:	5cd3      	ldrb	r3, [r2, r3]
 8000d3c:	fa21 f303 	lsr.w	r3, r1, r3


}
 8000d40:	4618      	mov	r0, r3
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40021000 	.word	0x40021000
 8000d48:	20000000 	.word	0x20000000

08000d4c <RCC_Get_PCLK1>:

	return RCC_Get_HCLK() >> APB2_Prescaler[ ( (RCC->RCC_CFGR) & (0b111 << 11) ) >> 11 ];

}

uint32_t RCC_Get_PCLK1(void){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0

	return RCC_Get_HCLK() >> APB2_Prescaler[ ( (RCC->RCC_CFGR) & (0b111 << 8) ) >> 8 ];
 8000d50:	f7ff ffe8 	bl	8000d24 <RCC_Get_HCLK>
 8000d54:	4601      	mov	r1, r0
 8000d56:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <RCC_Get_PCLK1+0x20>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	0a1b      	lsrs	r3, r3, #8
 8000d5c:	f003 0307 	and.w	r3, r3, #7
 8000d60:	4a03      	ldr	r2, [pc, #12]	; (8000d70 <RCC_Get_PCLK1+0x24>)
 8000d62:	5cd3      	ldrb	r3, [r2, r3]
 8000d64:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	20000010 	.word	0x20000010

08000d74 <SPI1_IRQHandler>:
//------------------<< ISR >>--------------------
//-----------------------------------------------


void SPI1_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
	Interrupt_flags_bits_t IRQ;
	IRQ.Receive_buffer_not_empty_flag = ( ( SPI1->SPI_SR & (1<<0) ) >> 0 );
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <SPI1_IRQHandler+0x40>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	793b      	ldrb	r3, [r7, #4]
 8000d86:	f362 0300 	bfi	r3, r2, #0, #1
 8000d8a:	713b      	strb	r3, [r7, #4]
	IRQ.Transmit_buffer_empty_flag = ( ( SPI1->SPI_SR & (1<<1) ) >> 1 );
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <SPI1_IRQHandler+0x40>)
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	085b      	lsrs	r3, r3, #1
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	793b      	ldrb	r3, [r7, #4]
 8000d9a:	f362 0341 	bfi	r3, r2, #1, #1
 8000d9e:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config_s->CallBack_PTR (&IRQ);
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <SPI1_IRQHandler+0x44>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	1d3a      	adds	r2, r7, #4
 8000da8:	4610      	mov	r0, r2
 8000daa:	4798      	blx	r3



}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40013000 	.word	0x40013000
 8000db8:	200000bc 	.word	0x200000bc

08000dbc <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
	Interrupt_flags_bits_t IRQ;
	IRQ.Receive_buffer_not_empty_flag = ( ( SPI2->SPI_SR & (1<<0) ) >> 0 );
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <SPI2_IRQHandler+0x40>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	793b      	ldrb	r3, [r7, #4]
 8000dce:	f362 0300 	bfi	r3, r2, #0, #1
 8000dd2:	713b      	strb	r3, [r7, #4]
	IRQ.Transmit_buffer_empty_flag = ( ( SPI2->SPI_SR & (1<<1) ) >> 1 );
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <SPI2_IRQHandler+0x40>)
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	085b      	lsrs	r3, r3, #1
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	793b      	ldrb	r3, [r7, #4]
 8000de2:	f362 0341 	bfi	r3, r2, #1, #1
 8000de6:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config_s->CallBack_PTR (&IRQ);
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <SPI2_IRQHandler+0x44>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	1d3a      	adds	r2, r7, #4
 8000df0:	4610      	mov	r0, r2
 8000df2:	4798      	blx	r3

}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40003800 	.word	0x40003800
 8000e00:	200000bc 	.word	0x200000bc

08000e04 <USART1_IRQHandler>:

//-----------------------------------------------
//------------------<< ISR >>--------------------
//-----------------------------------------------
void USART1_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
	interrupts_Bits IRQ = { ( (USART1->USART_SR) & (0b1<<5) ) >> 5 , ( (USART1->USART_SR) & (0b1<<6) ) >> 6 , ( (USART1->USART_SR) & (0b1<<7) ) >> 7};
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	713b      	strb	r3, [r7, #4]
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <USART1_IRQHandler+0x5c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	095b      	lsrs	r3, r3, #5
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	793b      	ldrb	r3, [r7, #4]
 8000e1c:	f362 0300 	bfi	r3, r2, #0, #1
 8000e20:	713b      	strb	r3, [r7, #4]
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <USART1_IRQHandler+0x5c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	099b      	lsrs	r3, r3, #6
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	793b      	ldrb	r3, [r7, #4]
 8000e30:	f362 0341 	bfi	r3, r2, #1, #1
 8000e34:	713b      	strb	r3, [r7, #4]
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <USART1_IRQHandler+0x5c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	09db      	lsrs	r3, r3, #7
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	793b      	ldrb	r3, [r7, #4]
 8000e44:	f362 0382 	bfi	r3, r2, #2, #1
 8000e48:	713b      	strb	r3, [r7, #4]
	Global_USART_Config_s->CallBack_FN (&IRQ);
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <USART1_IRQHandler+0x60>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	1d3a      	adds	r2, r7, #4
 8000e52:	4610      	mov	r0, r2
 8000e54:	4798      	blx	r3
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40013800 	.word	0x40013800
 8000e64:	2000007c 	.word	0x2000007c

08000e68 <main>:
//	//
//	//	}
//
//}
//
 int main(void){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
	//
	//
	// Enable clock
	GPIOA_CLOCK_EN();
 8000e6e:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <main+0x98>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	4a23      	ldr	r2, [pc, #140]	; (8000f00 <main+0x98>)
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	6193      	str	r3, [r2, #24]
	GPIOB_CLOCK_EN();
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <main+0x98>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	4a20      	ldr	r2, [pc, #128]	; (8000f00 <main+0x98>)
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	6193      	str	r3, [r2, #24]
	AFIO_CLOCK_EN();
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <main+0x98>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	4a1d      	ldr	r2, [pc, #116]	; (8000f00 <main+0x98>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6193      	str	r3, [r2, #24]
	//
	//	MCAL_GPIO_WritePin(GPIOA, 4, 1);
	//#endif

	//TEST CASE 1
	unsigned char ch1 []= {0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 8000e92:	4a1c      	ldr	r2, [pc, #112]	; (8000f04 <main+0x9c>)
 8000e94:	f107 0308 	add.w	r3, r7, #8
 8000e98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e9c:	6018      	str	r0, [r3, #0]
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	8019      	strh	r1, [r3, #0]
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	0c0a      	lsrs	r2, r1, #16
 8000ea6:	701a      	strb	r2, [r3, #0]
	unsigned char ch2 [7]={0};
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	f8c3 2003 	str.w	r2, [r3, #3]

	eeprom_init();
 8000eb2:	f7ff f95d 	bl	8000170 <eeprom_init>
	eeprom_write_Nbytes(0xAF, ch1, 7);
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	2207      	movs	r2, #7
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	20af      	movs	r0, #175	; 0xaf
 8000ec0:	f7ff f976 	bl	80001b0 <eeprom_write_Nbytes>
	eeprom_read_byte(0xAF,ch2, 7);
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2207      	movs	r2, #7
 8000ec8:	4619      	mov	r1, r3
 8000eca:	20af      	movs	r0, #175	; 0xaf
 8000ecc:	f7ff f9c2 	bl	8000254 <eeprom_read_byte>


	//TEST CASE 2
	ch1[0] = 0xA;
 8000ed0:	230a      	movs	r3, #10
 8000ed2:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB;
 8000ed4:	230b      	movs	r3, #11
 8000ed6:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC;
 8000ed8:	230c      	movs	r3, #12
 8000eda:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD;
 8000edc:	230d      	movs	r3, #13
 8000ede:	72fb      	strb	r3, [r7, #11]

	eeprom_write_Nbytes(0xFFF, ch1, 4);
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000eec:	f7ff f960 	bl	80001b0 <eeprom_write_Nbytes>
	eeprom_read_byte(0xFFF,ch2, 4);
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000efa:	f7ff f9ab 	bl	8000254 <eeprom_read_byte>




	while(1)
 8000efe:	e7fe      	b.n	8000efe <main+0x96>
 8000f00:	40021000 	.word	0x40021000
 8000f04:	08000fbc 	.word	0x08000fbc

08000f08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f08:	480d      	ldr	r0, [pc, #52]	; (8000f40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f0a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f0c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f12:	490d      	ldr	r1, [pc, #52]	; (8000f48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <LoopForever+0xe>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f18:	e002      	b.n	8000f20 <LoopCopyDataInit>

08000f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1e:	3304      	adds	r3, #4

08000f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f24:	d3f9      	bcc.n	8000f1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f26:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f28:	4c0a      	ldr	r4, [pc, #40]	; (8000f54 <LoopForever+0x16>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f2c:	e001      	b.n	8000f32 <LoopFillZerobss>

08000f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f30:	3204      	adds	r2, #4

08000f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f34:	d3fb      	bcc.n	8000f2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f36:	f000 f811 	bl	8000f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f3a:	f7ff ff95 	bl	8000e68 <main>

08000f3e <LoopForever>:

LoopForever:
    b LoopForever
 8000f3e:	e7fe      	b.n	8000f3e <LoopForever>
  ldr   r0, =_estack
 8000f40:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f48:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000f4c:	08000fcc 	.word	0x08000fcc
  ldr r2, =_sbss
 8000f50:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000f54:	200000c0 	.word	0x200000c0

08000f58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f58:	e7fe      	b.n	8000f58 <ADC1_2_IRQHandler>
	...

08000f5c <__libc_init_array>:
 8000f5c:	b570      	push	{r4, r5, r6, lr}
 8000f5e:	2500      	movs	r5, #0
 8000f60:	4e0c      	ldr	r6, [pc, #48]	; (8000f94 <__libc_init_array+0x38>)
 8000f62:	4c0d      	ldr	r4, [pc, #52]	; (8000f98 <__libc_init_array+0x3c>)
 8000f64:	1ba4      	subs	r4, r4, r6
 8000f66:	10a4      	asrs	r4, r4, #2
 8000f68:	42a5      	cmp	r5, r4
 8000f6a:	d109      	bne.n	8000f80 <__libc_init_array+0x24>
 8000f6c:	f000 f81a 	bl	8000fa4 <_init>
 8000f70:	2500      	movs	r5, #0
 8000f72:	4e0a      	ldr	r6, [pc, #40]	; (8000f9c <__libc_init_array+0x40>)
 8000f74:	4c0a      	ldr	r4, [pc, #40]	; (8000fa0 <__libc_init_array+0x44>)
 8000f76:	1ba4      	subs	r4, r4, r6
 8000f78:	10a4      	asrs	r4, r4, #2
 8000f7a:	42a5      	cmp	r5, r4
 8000f7c:	d105      	bne.n	8000f8a <__libc_init_array+0x2e>
 8000f7e:	bd70      	pop	{r4, r5, r6, pc}
 8000f80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f84:	4798      	blx	r3
 8000f86:	3501      	adds	r5, #1
 8000f88:	e7ee      	b.n	8000f68 <__libc_init_array+0xc>
 8000f8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f8e:	4798      	blx	r3
 8000f90:	3501      	adds	r5, #1
 8000f92:	e7f2      	b.n	8000f7a <__libc_init_array+0x1e>
 8000f94:	08000fc4 	.word	0x08000fc4
 8000f98:	08000fc4 	.word	0x08000fc4
 8000f9c:	08000fc4 	.word	0x08000fc4
 8000fa0:	08000fc8 	.word	0x08000fc8

08000fa4 <_init>:
 8000fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa6:	bf00      	nop
 8000fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000faa:	bc08      	pop	{r3}
 8000fac:	469e      	mov	lr, r3
 8000fae:	4770      	bx	lr

08000fb0 <_fini>:
 8000fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fb2:	bf00      	nop
 8000fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fb6:	bc08      	pop	{r3}
 8000fb8:	469e      	mov	lr, r3
 8000fba:	4770      	bx	lr
