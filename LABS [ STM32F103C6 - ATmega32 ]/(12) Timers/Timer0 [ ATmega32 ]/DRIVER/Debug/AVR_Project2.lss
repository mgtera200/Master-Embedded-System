
AVR_Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  0000044c  2**0
                  ALLOC
  2 .stab         00000c60  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d6c  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__vector_10>
  2c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c9 01 	call	0x392	; 0x392 <main>
  74:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <WatchDog_Enable>:
 *  Created on: Dec 30, 2023
 *      Author: Dell
 */
#include "WatchDog.h"

void WatchDog_Enable(WatchDog_Prescale_t pre){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <WatchDog_Enable+0x6>
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	8a 83       	std	Y+2, r24	; 0x02

	char temp_register;
	temp_register = WDTCR;
  88:	e1 e4       	ldi	r30, 0x41	; 65
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	89 83       	std	Y+1, r24	; 0x01
	temp_register |= ( ( 1<<3 ) | pre );
  90:	9a 81       	ldd	r25, Y+2	; 0x02
  92:	89 81       	ldd	r24, Y+1	; 0x01
  94:	89 2b       	or	r24, r25
  96:	88 60       	ori	r24, 0x08	; 8
  98:	89 83       	std	Y+1, r24	; 0x01
	WDTCR = temp_register;
  9a:	e1 e4       	ldi	r30, 0x41	; 65
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	89 81       	ldd	r24, Y+1	; 0x01
  a0:	80 83       	st	Z, r24

}
  a2:	0f 90       	pop	r0
  a4:	0f 90       	pop	r0
  a6:	cf 91       	pop	r28
  a8:	df 91       	pop	r29
  aa:	08 95       	ret

000000ac <WatchDog_Disable>:
void WatchDog_Disable(){
  ac:	df 93       	push	r29
  ae:	cf 93       	push	r28
  b0:	0f 92       	push	r0
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62

	char temp_register;
	temp_register = WDTCR;
  b6:	e1 e4       	ldi	r30, 0x41	; 65
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	89 83       	std	Y+1, r24	; 0x01
	temp_register |= (0b11 << 3);
  be:	89 81       	ldd	r24, Y+1	; 0x01
  c0:	88 61       	ori	r24, 0x18	; 24
  c2:	89 83       	std	Y+1, r24	; 0x01
	WDTCR = temp_register;
  c4:	e1 e4       	ldi	r30, 0x41	; 65
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	80 83       	st	Z, r24
	WDTCR &= ~(1<<3);
  cc:	a1 e4       	ldi	r26, 0x41	; 65
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	e1 e4       	ldi	r30, 0x41	; 65
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	87 7f       	andi	r24, 0xF7	; 247
  d8:	8c 93       	st	X, r24
	WDTCR = 0;
  da:	e1 e4       	ldi	r30, 0x41	; 65
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	10 82       	st	Z, r1


}
  e0:	0f 90       	pop	r0
  e2:	cf 91       	pop	r28
  e4:	df 91       	pop	r29
  e6:	08 95       	ret

000000e8 <Timer0_Init>:
#define NULL (void*)0

Timer0_Config_t* Global_Timer_Config_s;
unsigned char TOV_Number;

Timer_Status_t Timer0_Init(Timer0_Config_t *config){
  e8:	df 93       	push	r29
  ea:	cf 93       	push	r28
  ec:	00 d0       	rcall	.+0      	; 0xee <Timer0_Init+0x6>
  ee:	00 d0       	rcall	.+0      	; 0xf0 <Timer0_Init+0x8>
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	9c 83       	std	Y+4, r25	; 0x04
  f6:	8b 83       	std	Y+3, r24	; 0x03

	Timer_Status_t error = Timer_No_Error;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	8a 83       	std	Y+2, r24	; 0x02
	Global_Timer_Config_s = config;
  fc:	8b 81       	ldd	r24, Y+3	; 0x03
  fe:	9c 81       	ldd	r25, Y+4	; 0x04
 100:	90 93 61 00 	sts	0x0061, r25
 104:	80 93 60 00 	sts	0x0060, r24
	unsigned char temp_reg;

	if(NULL == config)
 108:	8b 81       	ldd	r24, Y+3	; 0x03
 10a:	9c 81       	ldd	r25, Y+4	; 0x04
 10c:	00 97       	sbiw	r24, 0x00	; 0
 10e:	11 f4       	brne	.+4      	; 0x114 <Timer0_Init+0x2c>
	{
		error = Timer_Error;
 110:	1a 82       	std	Y+2, r1	; 0x02
 112:	38 c0       	rjmp	.+112    	; 0x184 <Timer0_Init+0x9c>
	}
	else
	{
		temp_reg = TCCR0;
 114:	e3 e5       	ldi	r30, 0x53	; 83
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	89 83       	std	Y+1, r24	; 0x01
		temp_reg &= ~(config->Mode);
 11c:	eb 81       	ldd	r30, Y+3	; 0x03
 11e:	fc 81       	ldd	r31, Y+4	; 0x04
 120:	80 81       	ld	r24, Z
 122:	98 2f       	mov	r25, r24
 124:	90 95       	com	r25
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	89 23       	and	r24, r25
 12a:	89 83       	std	Y+1, r24	; 0x01
		temp_reg |=  (config->Mode);
 12c:	eb 81       	ldd	r30, Y+3	; 0x03
 12e:	fc 81       	ldd	r31, Y+4	; 0x04
 130:	90 81       	ld	r25, Z
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	89 2b       	or	r24, r25
 136:	89 83       	std	Y+1, r24	; 0x01

		temp_reg &= ~(config->Clock);
 138:	eb 81       	ldd	r30, Y+3	; 0x03
 13a:	fc 81       	ldd	r31, Y+4	; 0x04
 13c:	81 81       	ldd	r24, Z+1	; 0x01
 13e:	98 2f       	mov	r25, r24
 140:	90 95       	com	r25
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	89 23       	and	r24, r25
 146:	89 83       	std	Y+1, r24	; 0x01
		temp_reg |=  (config->Clock);
 148:	eb 81       	ldd	r30, Y+3	; 0x03
 14a:	fc 81       	ldd	r31, Y+4	; 0x04
 14c:	91 81       	ldd	r25, Z+1	; 0x01
 14e:	89 81       	ldd	r24, Y+1	; 0x01
 150:	89 2b       	or	r24, r25
 152:	89 83       	std	Y+1, r24	; 0x01

		TCCR0 = temp_reg;
 154:	e3 e5       	ldi	r30, 0x53	; 83
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	80 83       	st	Z, r24

		TIMSK |= config->Output_Compare_Interrupt;
 15c:	a9 e5       	ldi	r26, 0x59	; 89
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	e9 e5       	ldi	r30, 0x59	; 89
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	90 81       	ld	r25, Z
 166:	eb 81       	ldd	r30, Y+3	; 0x03
 168:	fc 81       	ldd	r31, Y+4	; 0x04
 16a:	82 81       	ldd	r24, Z+2	; 0x02
 16c:	89 2b       	or	r24, r25
 16e:	8c 93       	st	X, r24
		TIMSK |= config->Timer_OverFlow_Interrupt;
 170:	a9 e5       	ldi	r26, 0x59	; 89
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	e9 e5       	ldi	r30, 0x59	; 89
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	90 81       	ld	r25, Z
 17a:	eb 81       	ldd	r30, Y+3	; 0x03
 17c:	fc 81       	ldd	r31, Y+4	; 0x04
 17e:	83 81       	ldd	r24, Z+3	; 0x03
 180:	89 2b       	or	r24, r25
 182:	8c 93       	st	X, r24

	}



	return error;
 184:	8a 81       	ldd	r24, Y+2	; 0x02

}
 186:	0f 90       	pop	r0
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	cf 91       	pop	r28
 190:	df 91       	pop	r29
 192:	08 95       	ret

00000194 <Timer0_Stop>:
Timer_Status_t Timer0_Stop(){
 194:	df 93       	push	r29
 196:	cf 93       	push	r28
 198:	00 d0       	rcall	.+0      	; 0x19a <Timer0_Stop+0x6>
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62

	Timer_Status_t error;
	error = Timer_No_Error;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	89 83       	std	Y+1, r24	; 0x01


	TCCR0 &= (0b000 << 0); // NO CLK
 1a2:	e3 e5       	ldi	r30, 0x53	; 83
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	e3 e5       	ldi	r30, 0x53	; 83
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	10 82       	st	Z, r1


	return error;
 1ae:	89 81       	ldd	r24, Y+1	; 0x01

}
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	cf 91       	pop	r28
 1b6:	df 91       	pop	r29
 1b8:	08 95       	ret

000001ba <Timer0_Get_CompareValue>:

Timer_Status_t Timer0_Get_CompareValue(unsigned char *Ticks){
 1ba:	df 93       	push	r29
 1bc:	cf 93       	push	r28
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <Timer0_Get_CompareValue+0x6>
 1c0:	0f 92       	push	r0
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62
 1c6:	9b 83       	std	Y+3, r25	; 0x03
 1c8:	8a 83       	std	Y+2, r24	; 0x02

	Timer_Status_t error;
	error = Timer_No_Error;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	89 83       	std	Y+1, r24	; 0x01


	*Ticks = OCR0;
 1ce:	ec e5       	ldi	r30, 0x5C	; 92
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	ea 81       	ldd	r30, Y+2	; 0x02
 1d6:	fb 81       	ldd	r31, Y+3	; 0x03
 1d8:	80 83       	st	Z, r24


	return error;
 1da:	89 81       	ldd	r24, Y+1	; 0x01

}
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	cf 91       	pop	r28
 1e4:	df 91       	pop	r29
 1e6:	08 95       	ret

000001e8 <Timer0_Set_CompareValue>:
Timer_Status_t Timer0_Set_CompareValue(unsigned char Value){
 1e8:	df 93       	push	r29
 1ea:	cf 93       	push	r28
 1ec:	00 d0       	rcall	.+0      	; 0x1ee <Timer0_Set_CompareValue+0x6>
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	8a 83       	std	Y+2, r24	; 0x02

	Timer_Status_t error;
	error = Timer_No_Error;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	89 83       	std	Y+1, r24	; 0x01


	OCR0 = Value;
 1f8:	ec e5       	ldi	r30, 0x5C	; 92
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	8a 81       	ldd	r24, Y+2	; 0x02
 1fe:	80 83       	st	Z, r24


	return error;
 200:	89 81       	ldd	r24, Y+1	; 0x01

}
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	cf 91       	pop	r28
 208:	df 91       	pop	r29
 20a:	08 95       	ret

0000020c <Timer0_Get_CounterValue>:

Timer_Status_t Timer0_Get_CounterValue(unsigned char *Ticks){
 20c:	df 93       	push	r29
 20e:	cf 93       	push	r28
 210:	00 d0       	rcall	.+0      	; 0x212 <Timer0_Get_CounterValue+0x6>
 212:	0f 92       	push	r0
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	9b 83       	std	Y+3, r25	; 0x03
 21a:	8a 83       	std	Y+2, r24	; 0x02

	Timer_Status_t error;
	error = Timer_No_Error;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	89 83       	std	Y+1, r24	; 0x01


	*Ticks = TCNT0;
 220:	e2 e5       	ldi	r30, 0x52	; 82
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	ea 81       	ldd	r30, Y+2	; 0x02
 228:	fb 81       	ldd	r31, Y+3	; 0x03
 22a:	80 83       	st	Z, r24


	return error;
 22c:	89 81       	ldd	r24, Y+1	; 0x01



}
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	cf 91       	pop	r28
 236:	df 91       	pop	r29
 238:	08 95       	ret

0000023a <Timer0_Set_CounterValue>:
Timer_Status_t Timer0_Set_CounterValue(unsigned char Value){
 23a:	df 93       	push	r29
 23c:	cf 93       	push	r28
 23e:	00 d0       	rcall	.+0      	; 0x240 <Timer0_Set_CounterValue+0x6>
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
 244:	8a 83       	std	Y+2, r24	; 0x02

	Timer_Status_t error;
	error = Timer_No_Error;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	89 83       	std	Y+1, r24	; 0x01


	TCNT0 = Value;
 24a:	e2 e5       	ldi	r30, 0x52	; 82
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	8a 81       	ldd	r24, Y+2	; 0x02
 250:	80 83       	st	Z, r24


	return error;
 252:	89 81       	ldd	r24, Y+1	; 0x01



}
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	cf 91       	pop	r28
 25a:	df 91       	pop	r29
 25c:	08 95       	ret

0000025e <Timer0_Get_OverFlowValue>:

Timer_Status_t Timer0_Get_OverFlowValue(unsigned char *Ticks){
 25e:	df 93       	push	r29
 260:	cf 93       	push	r28
 262:	00 d0       	rcall	.+0      	; 0x264 <Timer0_Get_OverFlowValue+0x6>
 264:	0f 92       	push	r0
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
 26a:	9b 83       	std	Y+3, r25	; 0x03
 26c:	8a 83       	std	Y+2, r24	; 0x02

	Timer_Status_t error;
	error = Timer_No_Error;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	89 83       	std	Y+1, r24	; 0x01


	*Ticks = TOV_Number;
 272:	80 91 62 00 	lds	r24, 0x0062
 276:	ea 81       	ldd	r30, Y+2	; 0x02
 278:	fb 81       	ldd	r31, Y+3	; 0x03
 27a:	80 83       	st	Z, r24


	return error;
 27c:	89 81       	ldd	r24, Y+1	; 0x01


}
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	0f 90       	pop	r0
 284:	cf 91       	pop	r28
 286:	df 91       	pop	r29
 288:	08 95       	ret

0000028a <Timer0_Set_OverFlowValue>:
Timer_Status_t Timer0_Set_OverFlowValue(unsigned char Value){
 28a:	df 93       	push	r29
 28c:	cf 93       	push	r28
 28e:	00 d0       	rcall	.+0      	; 0x290 <Timer0_Set_OverFlowValue+0x6>
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	8a 83       	std	Y+2, r24	; 0x02

	Timer_Status_t error;
	error = Timer_No_Error;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	89 83       	std	Y+1, r24	; 0x01


	TOV_Number = Value;
 29a:	8a 81       	ldd	r24, Y+2	; 0x02
 29c:	80 93 62 00 	sts	0x0062, r24


	return error;
 2a0:	89 81       	ldd	r24, Y+1	; 0x01


}
 2a2:	0f 90       	pop	r0
 2a4:	0f 90       	pop	r0
 2a6:	cf 91       	pop	r28
 2a8:	df 91       	pop	r29
 2aa:	08 95       	ret

000002ac <__vector_10>:


ISR(TIMER0_COMP_vect)
{
 2ac:	1f 92       	push	r1
 2ae:	0f 92       	push	r0
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	0f 92       	push	r0
 2b4:	11 24       	eor	r1, r1
 2b6:	2f 93       	push	r18
 2b8:	3f 93       	push	r19
 2ba:	4f 93       	push	r20
 2bc:	5f 93       	push	r21
 2be:	6f 93       	push	r22
 2c0:	7f 93       	push	r23
 2c2:	8f 93       	push	r24
 2c4:	9f 93       	push	r25
 2c6:	af 93       	push	r26
 2c8:	bf 93       	push	r27
 2ca:	ef 93       	push	r30
 2cc:	ff 93       	push	r31
 2ce:	df 93       	push	r29
 2d0:	cf 93       	push	r28
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
	Global_Timer_Config_s->CompareMatch_CallBack_Ptr ();
 2d6:	e0 91 60 00 	lds	r30, 0x0060
 2da:	f0 91 61 00 	lds	r31, 0x0061
 2de:	06 80       	ldd	r0, Z+6	; 0x06
 2e0:	f7 81       	ldd	r31, Z+7	; 0x07
 2e2:	e0 2d       	mov	r30, r0
 2e4:	09 95       	icall
}
 2e6:	cf 91       	pop	r28
 2e8:	df 91       	pop	r29
 2ea:	ff 91       	pop	r31
 2ec:	ef 91       	pop	r30
 2ee:	bf 91       	pop	r27
 2f0:	af 91       	pop	r26
 2f2:	9f 91       	pop	r25
 2f4:	8f 91       	pop	r24
 2f6:	7f 91       	pop	r23
 2f8:	6f 91       	pop	r22
 2fa:	5f 91       	pop	r21
 2fc:	4f 91       	pop	r20
 2fe:	3f 91       	pop	r19
 300:	2f 91       	pop	r18
 302:	0f 90       	pop	r0
 304:	0f be       	out	0x3f, r0	; 63
 306:	0f 90       	pop	r0
 308:	1f 90       	pop	r1
 30a:	18 95       	reti

0000030c <__vector_11>:

ISR(TIMER0_OVF_vect)
{
 30c:	1f 92       	push	r1
 30e:	0f 92       	push	r0
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	0f 92       	push	r0
 314:	11 24       	eor	r1, r1
 316:	2f 93       	push	r18
 318:	3f 93       	push	r19
 31a:	4f 93       	push	r20
 31c:	5f 93       	push	r21
 31e:	6f 93       	push	r22
 320:	7f 93       	push	r23
 322:	8f 93       	push	r24
 324:	9f 93       	push	r25
 326:	af 93       	push	r26
 328:	bf 93       	push	r27
 32a:	ef 93       	push	r30
 32c:	ff 93       	push	r31
 32e:	df 93       	push	r29
 330:	cf 93       	push	r28
 332:	cd b7       	in	r28, 0x3d	; 61
 334:	de b7       	in	r29, 0x3e	; 62
	TOV_Number++;
 336:	80 91 62 00 	lds	r24, 0x0062
 33a:	8f 5f       	subi	r24, 0xFF	; 255
 33c:	80 93 62 00 	sts	0x0062, r24
	Global_Timer_Config_s->OverFlow_CallBack_Ptr ();
 340:	e0 91 60 00 	lds	r30, 0x0060
 344:	f0 91 61 00 	lds	r31, 0x0061
 348:	04 80       	ldd	r0, Z+4	; 0x04
 34a:	f5 81       	ldd	r31, Z+5	; 0x05
 34c:	e0 2d       	mov	r30, r0
 34e:	09 95       	icall
}
 350:	cf 91       	pop	r28
 352:	df 91       	pop	r29
 354:	ff 91       	pop	r31
 356:	ef 91       	pop	r30
 358:	bf 91       	pop	r27
 35a:	af 91       	pop	r26
 35c:	9f 91       	pop	r25
 35e:	8f 91       	pop	r24
 360:	7f 91       	pop	r23
 362:	6f 91       	pop	r22
 364:	5f 91       	pop	r21
 366:	4f 91       	pop	r20
 368:	3f 91       	pop	r19
 36a:	2f 91       	pop	r18
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <Timer_CompareMatch_CallBack>:
#include "timer.h"

#define F_CPU 16000000UL

void Timer_CompareMatch_CallBack(void)
{
 376:	df 93       	push	r29
 378:	cf 93       	push	r28
 37a:	cd b7       	in	r28, 0x3d	; 61
 37c:	de b7       	in	r29, 0x3e	; 62
	PORTA = ~PORTA;
 37e:	ab e3       	ldi	r26, 0x3B	; 59
 380:	b0 e0       	ldi	r27, 0x00	; 0
 382:	eb e3       	ldi	r30, 0x3B	; 59
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	80 95       	com	r24
 38a:	8c 93       	st	X, r24
}
 38c:	cf 91       	pop	r28
 38e:	df 91       	pop	r29
 390:	08 95       	ret

00000392 <main>:
int main(void)
{
 392:	df 93       	push	r29
 394:	cf 93       	push	r28
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
 39a:	28 97       	sbiw	r28, 0x08	; 8
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	f8 94       	cli
 3a0:	de bf       	out	0x3e, r29	; 62
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF;
 3a6:	ea e3       	ldi	r30, 0x3A	; 58
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	8f ef       	ldi	r24, 0xFF	; 255
 3ac:	80 83       	st	Z, r24
	sei();
 3ae:	78 94       	sei
	Timer0_Config_t timer_config;

	timer_config.Mode = Timer0_Mode_CTC;
 3b0:	88 e0       	ldi	r24, 0x08	; 8
 3b2:	89 83       	std	Y+1, r24	; 0x01
	timer_config.Clock = Timer0_Prescaling_CLK8;
 3b4:	82 e0       	ldi	r24, 0x02	; 2
 3b6:	8a 83       	std	Y+2, r24	; 0x02
	timer_config.Output_Compare_Interrupt = Timer0_Interrupt_OCIE_Enable;
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	8b 83       	std	Y+3, r24	; 0x03
	timer_config.CompareMatch_CallBack_Ptr = Timer_CompareMatch_CallBack;
 3bc:	8b eb       	ldi	r24, 0xBB	; 187
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	98 87       	std	Y+8, r25	; 0x08
 3c2:	8f 83       	std	Y+7, r24	; 0x07

	Timer0_Set_CompareValue(0xAA);
 3c4:	8a ea       	ldi	r24, 0xAA	; 170
 3c6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Timer0_Set_CompareValue>
	Timer0_Init(&timer_config);
 3ca:	ce 01       	movw	r24, r28
 3cc:	01 96       	adiw	r24, 0x01	; 1
 3ce:	0e 94 74 00 	call	0xe8	; 0xe8 <Timer0_Init>
 3d2:	ff cf       	rjmp	.-2      	; 0x3d2 <main+0x40>

000003d4 <_exit>:
 3d4:	f8 94       	cli

000003d6 <__stop_program>:
 3d6:	ff cf       	rjmp	.-2      	; 0x3d6 <__stop_program>
