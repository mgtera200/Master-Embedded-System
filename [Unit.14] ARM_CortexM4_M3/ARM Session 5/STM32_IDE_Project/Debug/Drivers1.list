
Drivers1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000590  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006c0  080006c8  000106c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006c0  080006c0  000106c8  2**0
                  CONTENTS
  4 .ARM          00000000  080006c0  080006c0  000106c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006c0  080006c8  000106c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006c0  080006c0  000106c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006c4  080006c4  000106c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000000  080006c8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  080006c8  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000106c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004a50  00000000  00000000  000106f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000af8  00000000  00000000  00015141  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d74  00000000  00000000  00015c39  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000210  00000000  00000000  000169b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001b8  00000000  00000000  00016bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001a6f  00000000  00000000  00016d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002168  00000000  00000000  000187e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00010f73  00000000  00000000  0001a94f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002b8c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006d8  00000000  00000000  0002b940  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080006a8 	.word	0x080006a8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080006a8 	.word	0x080006a8

08000170 <EXTI0_IRQHandler>:
// ISR functions
//-----------------------------


void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<0); //WRITE 1 TO CLEAR
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20000020 	.word	0x20000020

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<1); //WRITE 1 TO CLEAR
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000020 	.word	0x20000020

080001b8 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<2); //WRITE 1 TO CLEAR
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000020 	.word	0x20000020

080001dc <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<3); //WRITE 1 TO CLEAR
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000020 	.word	0x20000020

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<4); //WRITE 1 TO CLEAR
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20000020 	.word	0x20000020

08000224 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if( EXTI->EXTI_PR & (1<<5))
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->EXTI_PR |= (1<<5); //WRITE 1 TO CLEAR
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[5]();
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<6))
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
	{
		EXTI->EXTI_PR |= (1<<6); //WRITE 1 TO CLEAR
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[6]();
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<7))
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
	{
		EXTI->EXTI_PR |= (1<<7); //WRITE 1 TO CLEAR
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[7]();
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<8))
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
	{
		EXTI->EXTI_PR |= (1<<8); //WRITE 1 TO CLEAR
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[8]();
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<9))
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
	{
		EXTI->EXTI_PR |= (1<<9); //WRITE 1 TO CLEAR
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[9]();
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
	}
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000020 	.word	0x20000020

080002cc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if( EXTI->EXTI_PR & (1<<10))
 80002d0:	4b30      	ldr	r3, [pc, #192]	; (8000394 <EXTI15_10_IRQHandler+0xc8>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d009      	beq.n	80002f0 <EXTI15_10_IRQHandler+0x24>
	{
		EXTI->EXTI_PR |= (1<<10); //WRITE 1 TO CLEAR
 80002dc:	4b2d      	ldr	r3, [pc, #180]	; (8000394 <EXTI15_10_IRQHandler+0xc8>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a2c      	ldr	r2, [pc, #176]	; (8000394 <EXTI15_10_IRQHandler+0xc8>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[10]();
 80002e8:	4b2b      	ldr	r3, [pc, #172]	; (8000398 <EXTI15_10_IRQHandler+0xcc>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
		EXTI->EXTI_PR |= (1<<15); //WRITE 1 TO CLEAR
		GP_IRQ_CallBack[15]();
	}


}
 80002ee:	e04e      	b.n	800038e <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<11))
 80002f0:	4b28      	ldr	r3, [pc, #160]	; (8000394 <EXTI15_10_IRQHandler+0xc8>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d009      	beq.n	8000310 <EXTI15_10_IRQHandler+0x44>
		EXTI->EXTI_PR |= (1<<11); //WRITE 1 TO CLEAR
 80002fc:	4b25      	ldr	r3, [pc, #148]	; (8000394 <EXTI15_10_IRQHandler+0xc8>)
 80002fe:	695b      	ldr	r3, [r3, #20]
 8000300:	4a24      	ldr	r2, [pc, #144]	; (8000394 <EXTI15_10_IRQHandler+0xc8>)
 8000302:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000306:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[11]();
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <EXTI15_10_IRQHandler+0xcc>)
 800030a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030c:	4798      	blx	r3
}
 800030e:	e03e      	b.n	800038e <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<12))
 8000310:	4b20      	ldr	r3, [pc, #128]	; (8000394 <EXTI15_10_IRQHandler+0xc8>)
 8000312:	695b      	ldr	r3, [r3, #20]
 8000314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000318:	2b00      	cmp	r3, #0
 800031a:	d009      	beq.n	8000330 <EXTI15_10_IRQHandler+0x64>
		EXTI->EXTI_PR |= (1<<12); //WRITE 1 TO CLEAR
 800031c:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <EXTI15_10_IRQHandler+0xc8>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a1c      	ldr	r2, [pc, #112]	; (8000394 <EXTI15_10_IRQHandler+0xc8>)
 8000322:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000326:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[12]();
 8000328:	4b1b      	ldr	r3, [pc, #108]	; (8000398 <EXTI15_10_IRQHandler+0xcc>)
 800032a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032c:	4798      	blx	r3
}
 800032e:	e02e      	b.n	800038e <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<13))
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <EXTI15_10_IRQHandler+0xc8>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000338:	2b00      	cmp	r3, #0
 800033a:	d009      	beq.n	8000350 <EXTI15_10_IRQHandler+0x84>
		EXTI->EXTI_PR |= (1<<13); //WRITE 1 TO CLEAR
 800033c:	4b15      	ldr	r3, [pc, #84]	; (8000394 <EXTI15_10_IRQHandler+0xc8>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	4a14      	ldr	r2, [pc, #80]	; (8000394 <EXTI15_10_IRQHandler+0xc8>)
 8000342:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000346:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[13]();
 8000348:	4b13      	ldr	r3, [pc, #76]	; (8000398 <EXTI15_10_IRQHandler+0xcc>)
 800034a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800034c:	4798      	blx	r3
}
 800034e:	e01e      	b.n	800038e <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<14))
 8000350:	4b10      	ldr	r3, [pc, #64]	; (8000394 <EXTI15_10_IRQHandler+0xc8>)
 8000352:	695b      	ldr	r3, [r3, #20]
 8000354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000358:	2b00      	cmp	r3, #0
 800035a:	d009      	beq.n	8000370 <EXTI15_10_IRQHandler+0xa4>
		EXTI->EXTI_PR |= (1<<14); //WRITE 1 TO CLEAR
 800035c:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <EXTI15_10_IRQHandler+0xc8>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	4a0c      	ldr	r2, [pc, #48]	; (8000394 <EXTI15_10_IRQHandler+0xc8>)
 8000362:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000366:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[14]();
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <EXTI15_10_IRQHandler+0xcc>)
 800036a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800036c:	4798      	blx	r3
}
 800036e:	e00e      	b.n	800038e <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<15))
 8000370:	4b08      	ldr	r3, [pc, #32]	; (8000394 <EXTI15_10_IRQHandler+0xc8>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000378:	2b00      	cmp	r3, #0
 800037a:	d008      	beq.n	800038e <EXTI15_10_IRQHandler+0xc2>
		EXTI->EXTI_PR |= (1<<15); //WRITE 1 TO CLEAR
 800037c:	4b05      	ldr	r3, [pc, #20]	; (8000394 <EXTI15_10_IRQHandler+0xc8>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	4a04      	ldr	r2, [pc, #16]	; (8000394 <EXTI15_10_IRQHandler+0xc8>)
 8000382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000386:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[15]();
 8000388:	4b03      	ldr	r3, [pc, #12]	; (8000398 <EXTI15_10_IRQHandler+0xcc>)
 800038a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800038c:	4798      	blx	r3
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40010400 	.word	0x40010400
 8000398:	20000020 	.word	0x20000020

0800039c <I2C1_ER_IRQHandler>:
 * ======================================================================================================================
 */

//Not supported
void I2C1_ER_IRQHandler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0


}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0

}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr

080003b4 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0


}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr

080003c0 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0

}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr

080003cc <SPI1_IRQHandler>:
//------------------<< ISR >>--------------------
//-----------------------------------------------


void SPI1_IRQHandler(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
	Interrupt_flags_bits_t IRQ;
	IRQ.Receive_buffer_not_empty_flag = ( ( SPI1->SPI_SR & (1<<0) ) >> 0 );
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <SPI1_IRQHandler+0x40>)
 80003d4:	689b      	ldr	r3, [r3, #8]
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	b2da      	uxtb	r2, r3
 80003dc:	793b      	ldrb	r3, [r7, #4]
 80003de:	f362 0300 	bfi	r3, r2, #0, #1
 80003e2:	713b      	strb	r3, [r7, #4]
	IRQ.Transmit_buffer_empty_flag = ( ( SPI1->SPI_SR & (1<<1) ) >> 1 );
 80003e4:	4b09      	ldr	r3, [pc, #36]	; (800040c <SPI1_IRQHandler+0x40>)
 80003e6:	689b      	ldr	r3, [r3, #8]
 80003e8:	085b      	lsrs	r3, r3, #1
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	793b      	ldrb	r3, [r7, #4]
 80003f2:	f362 0341 	bfi	r3, r2, #1, #1
 80003f6:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config_s->CallBack_PTR (&IRQ);
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <SPI1_IRQHandler+0x44>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	1d3a      	adds	r2, r7, #4
 8000400:	4610      	mov	r0, r2
 8000402:	4798      	blx	r3



}
 8000404:	bf00      	nop
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40013000 	.word	0x40013000
 8000410:	2000005c 	.word	0x2000005c

08000414 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
	Interrupt_flags_bits_t IRQ;
	IRQ.Receive_buffer_not_empty_flag = ( ( SPI2->SPI_SR & (1<<0) ) >> 0 );
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <SPI2_IRQHandler+0x40>)
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	f003 0301 	and.w	r3, r3, #1
 8000422:	b2da      	uxtb	r2, r3
 8000424:	793b      	ldrb	r3, [r7, #4]
 8000426:	f362 0300 	bfi	r3, r2, #0, #1
 800042a:	713b      	strb	r3, [r7, #4]
	IRQ.Transmit_buffer_empty_flag = ( ( SPI2->SPI_SR & (1<<1) ) >> 1 );
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <SPI2_IRQHandler+0x40>)
 800042e:	689b      	ldr	r3, [r3, #8]
 8000430:	085b      	lsrs	r3, r3, #1
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	b2da      	uxtb	r2, r3
 8000438:	793b      	ldrb	r3, [r7, #4]
 800043a:	f362 0341 	bfi	r3, r2, #1, #1
 800043e:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config_s->CallBack_PTR (&IRQ);
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <SPI2_IRQHandler+0x44>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	1d3a      	adds	r2, r7, #4
 8000448:	4610      	mov	r0, r2
 800044a:	4798      	blx	r3

}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	40003800 	.word	0x40003800
 8000458:	2000005c 	.word	0x2000005c

0800045c <USART1_IRQHandler>:

//-----------------------------------------------
//------------------<< ISR >>--------------------
//-----------------------------------------------
void USART1_IRQHandler(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
	interrupts_Bits IRQ = { ( (USART1->USART_SR) & (0b1<<5) ) >> 5 , ( (USART1->USART_SR) & (0b1<<6) ) >> 6 , ( (USART1->USART_SR) & (0b1<<7) ) >> 7};
 8000462:	2300      	movs	r3, #0
 8000464:	713b      	strb	r3, [r7, #4]
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <USART1_IRQHandler+0x5c>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	095b      	lsrs	r3, r3, #5
 800046c:	f003 0301 	and.w	r3, r3, #1
 8000470:	b2da      	uxtb	r2, r3
 8000472:	793b      	ldrb	r3, [r7, #4]
 8000474:	f362 0300 	bfi	r3, r2, #0, #1
 8000478:	713b      	strb	r3, [r7, #4]
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <USART1_IRQHandler+0x5c>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	099b      	lsrs	r3, r3, #6
 8000480:	f003 0301 	and.w	r3, r3, #1
 8000484:	b2da      	uxtb	r2, r3
 8000486:	793b      	ldrb	r3, [r7, #4]
 8000488:	f362 0341 	bfi	r3, r2, #1, #1
 800048c:	713b      	strb	r3, [r7, #4]
 800048e:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <USART1_IRQHandler+0x5c>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	09db      	lsrs	r3, r3, #7
 8000494:	f003 0301 	and.w	r3, r3, #1
 8000498:	b2da      	uxtb	r2, r3
 800049a:	793b      	ldrb	r3, [r7, #4]
 800049c:	f362 0382 	bfi	r3, r2, #2, #1
 80004a0:	713b      	strb	r3, [r7, #4]
	Global_USART_Config_s->CallBack_FN (&IRQ);
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <USART1_IRQHandler+0x60>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	1d3a      	adds	r2, r7, #4
 80004aa:	4610      	mov	r0, r2
 80004ac:	4798      	blx	r3
}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40013800 	.word	0x40013800
 80004bc:	2000001c 	.word	0x2000001c

080004c0 <OS_SVC_Set>:
//	}
//
//}
//
int OS_SVC_Set(int a,int b,int SVC_ID)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b087      	sub	sp, #28
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
	int result;

	switch(SVC_ID)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	3b01      	subs	r3, #1
 80004d0:	2b03      	cmp	r3, #3
 80004d2:	d818      	bhi.n	8000506 <OS_SVC_Set+0x46>
 80004d4:	a201      	add	r2, pc, #4	; (adr r2, 80004dc <OS_SVC_Set+0x1c>)
 80004d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004da:	bf00      	nop
 80004dc:	080004ed 	.word	0x080004ed
 80004e0:	080004f1 	.word	0x080004f1
 80004e4:	080004f5 	.word	0x080004f5
 80004e8:	080004f9 	.word	0x080004f9
	{
	case 1: //add
		__asm("svc #0x01");
 80004ec:	df01      	svc	1
		break;
 80004ee:	e00a      	b.n	8000506 <OS_SVC_Set+0x46>
	case 2: //sub
		__asm("svc #0x02");
 80004f0:	df02      	svc	2
		break;
 80004f2:	e008      	b.n	8000506 <OS_SVC_Set+0x46>
	case 3: // MULT
		__asm("svc #0x03");
 80004f4:	df03      	svc	3
		break;
 80004f6:	e006      	b.n	8000506 <OS_SVC_Set+0x46>
	case 4: //PendSV
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <OS_SVC_Set+0x58>)
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	4a06      	ldr	r2, [pc, #24]	; (8000518 <OS_SVC_Set+0x58>)
 80004fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000502:	6053      	str	r3, [r2, #4]
		break;
 8000504:	bf00      	nop

	}
	__asm("MOV %[out0],R0": [out0] "=r" (result));
 8000506:	4603      	mov	r3, r0
 8000508:	617b      	str	r3, [r7, #20]
	return result;
 800050a:	697b      	ldr	r3, [r7, #20]
}
 800050c:	4618      	mov	r0, r3
 800050e:	371c      	adds	r7, #28
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	e000ed00 	.word	0xe000ed00

0800051c <OS_SVC_services>:
void OS_SVC_services(int * StackFramePointer)
{
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	//OS_SVC_Set Stack -> R0 -> argument 0 = StackFramePointer
	//OS_SVC_Set Stack : R0,R1,R2,R3,R12,LR,PC,xPSR
	unsigned char SVC_Number;
	unsigned int val1,val2;

	SVC_Number =  *((unsigned char*)( ( (unsigned char*)StackFramePointer[6] ) - 2 )) ;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3318      	adds	r3, #24
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	3b02      	subs	r3, #2
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	75fb      	strb	r3, [r7, #23]

	val1 = StackFramePointer[0];
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	613b      	str	r3, [r7, #16]
	val2 = StackFramePointer[1];
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	3304      	adds	r3, #4
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	60fb      	str	r3, [r7, #12]

	switch(SVC_Number)
 800053e:	7dfb      	ldrb	r3, [r7, #23]
 8000540:	2b02      	cmp	r3, #2
 8000542:	d00b      	beq.n	800055c <OS_SVC_services+0x40>
 8000544:	2b03      	cmp	r3, #3
 8000546:	d010      	beq.n	800056a <OS_SVC_services+0x4e>
 8000548:	2b01      	cmp	r3, #1
 800054a:	d000      	beq.n	800054e <OS_SVC_services+0x32>
	case 3: // MULT
		StackFramePointer[0]= val1 * val2 ;
		break;
	}

	return;
 800054c:	e016      	b.n	800057c <OS_SVC_services+0x60>
		StackFramePointer[0]= val1 + val2 ;
 800054e:	693a      	ldr	r2, [r7, #16]
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	4413      	add	r3, r2
 8000554:	461a      	mov	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	601a      	str	r2, [r3, #0]
		break;
 800055a:	e00e      	b.n	800057a <OS_SVC_services+0x5e>
		StackFramePointer[0]= val1 - val2 ;
 800055c:	693a      	ldr	r2, [r7, #16]
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	1ad3      	subs	r3, r2, r3
 8000562:	461a      	mov	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	601a      	str	r2, [r3, #0]
		break;
 8000568:	e007      	b.n	800057a <OS_SVC_services+0x5e>
		StackFramePointer[0]= val1 * val2 ;
 800056a:	693b      	ldr	r3, [r7, #16]
 800056c:	68fa      	ldr	r2, [r7, #12]
 800056e:	fb02 f303 	mul.w	r3, r2, r3
 8000572:	461a      	mov	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	601a      	str	r2, [r3, #0]
		break;
 8000578:	bf00      	nop
	return;
 800057a:	bf00      	nop




}
 800057c:	371c      	adds	r7, #28
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <SVC_Handler>:
__attribute ((naked)) void SVC_Handler(void)
{
	__asm("TST LR,0x4");
 8000584:	f01e 0f04 	tst.w	lr, #4
	__asm("ITE EQ");
 8000588:	bf0c      	ite	eq
	__asm("MRSEQ R0,MSP");
 800058a:	f3ef 8008 	mrseq	r0, MSP
	__asm("MRSNE R0,PSP");
 800058e:	f3ef 8009 	mrsne	r0, PSP
	__asm("B OS_SVC_services");
 8000592:	f7ff bfc3 	b.w	800051c <OS_SVC_services>



}
 8000596:	bf00      	nop

08000598 <PendSV_Handler>:
void PendSV_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr

080005a4 <main>:

int main(void){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	//	EXTI_CFG.Function_call = PB9_CallBack;
	//	MCAL_EXTI_init(&EXTI_CFG);
	//

	//	MainOS();
	flag =1;
 80005a8:	4b17      	ldr	r3, [pc, #92]	; (8000608 <main+0x64>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	701a      	strb	r2, [r3, #0]
	flag = OS_SVC_Set(3, 3, 1); // ADD
 80005ae:	2201      	movs	r2, #1
 80005b0:	2103      	movs	r1, #3
 80005b2:	2003      	movs	r0, #3
 80005b4:	f7ff ff84 	bl	80004c0 <OS_SVC_Set>
 80005b8:	4603      	mov	r3, r0
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <main+0x64>)
 80005be:	701a      	strb	r2, [r3, #0]
	flag = OS_SVC_Set(3, 3, 2); // SUB
 80005c0:	2202      	movs	r2, #2
 80005c2:	2103      	movs	r1, #3
 80005c4:	2003      	movs	r0, #3
 80005c6:	f7ff ff7b 	bl	80004c0 <OS_SVC_Set>
 80005ca:	4603      	mov	r3, r0
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <main+0x64>)
 80005d0:	701a      	strb	r2, [r3, #0]
	flag = OS_SVC_Set(3, 3, 3); // MULT
 80005d2:	2203      	movs	r2, #3
 80005d4:	2103      	movs	r1, #3
 80005d6:	2003      	movs	r0, #3
 80005d8:	f7ff ff72 	bl	80004c0 <OS_SVC_Set>
 80005dc:	4603      	mov	r3, r0
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <main+0x64>)
 80005e2:	701a      	strb	r2, [r3, #0]
	flag = OS_SVC_Set(0, 0, 4); // PendSV
 80005e4:	2204      	movs	r2, #4
 80005e6:	2100      	movs	r1, #0
 80005e8:	2000      	movs	r0, #0
 80005ea:	f7ff ff69 	bl	80004c0 <OS_SVC_Set>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <main+0x64>)
 80005f4:	701a      	strb	r2, [r3, #0]



	while(1)
	{
		if(flag)
 80005f6:	4b04      	ldr	r3, [pc, #16]	; (8000608 <main+0x64>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d0fb      	beq.n	80005f6 <main+0x52>
		{
			flag=0;
 80005fe:	4b02      	ldr	r3, [pc, #8]	; (8000608 <main+0x64>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
		if(flag)
 8000604:	e7f7      	b.n	80005f6 <main+0x52>
 8000606:	bf00      	nop
 8000608:	20000068 	.word	0x20000068

0800060c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800060e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000610:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <LoopForever+0x6>)
  ldr r1, =_edata
 8000616:	490d      	ldr	r1, [pc, #52]	; (800064c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000618:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <LoopForever+0xe>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800061c:	e002      	b.n	8000624 <LoopCopyDataInit>

0800061e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000622:	3304      	adds	r3, #4

08000624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000628:	d3f9      	bcc.n	800061e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062a:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <LoopForever+0x12>)
  ldr r4, =_ebss
 800062c:	4c0a      	ldr	r4, [pc, #40]	; (8000658 <LoopForever+0x16>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000630:	e001      	b.n	8000636 <LoopFillZerobss>

08000632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000634:	3204      	adds	r2, #4

08000636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000638:	d3fb      	bcc.n	8000632 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800063a:	f000 f811 	bl	8000660 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063e:	f7ff ffb1 	bl	80005a4 <main>

08000642 <LoopForever>:

LoopForever:
    b LoopForever
 8000642:	e7fe      	b.n	8000642 <LoopForever>
  ldr   r0, =_estack
 8000644:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800064c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000650:	080006c8 	.word	0x080006c8
  ldr r2, =_sbss
 8000654:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000658:	2000007c 	.word	0x2000007c

0800065c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800065c:	e7fe      	b.n	800065c <ADC1_2_IRQHandler>
	...

08000660 <__libc_init_array>:
 8000660:	b570      	push	{r4, r5, r6, lr}
 8000662:	2500      	movs	r5, #0
 8000664:	4e0c      	ldr	r6, [pc, #48]	; (8000698 <__libc_init_array+0x38>)
 8000666:	4c0d      	ldr	r4, [pc, #52]	; (800069c <__libc_init_array+0x3c>)
 8000668:	1ba4      	subs	r4, r4, r6
 800066a:	10a4      	asrs	r4, r4, #2
 800066c:	42a5      	cmp	r5, r4
 800066e:	d109      	bne.n	8000684 <__libc_init_array+0x24>
 8000670:	f000 f81a 	bl	80006a8 <_init>
 8000674:	2500      	movs	r5, #0
 8000676:	4e0a      	ldr	r6, [pc, #40]	; (80006a0 <__libc_init_array+0x40>)
 8000678:	4c0a      	ldr	r4, [pc, #40]	; (80006a4 <__libc_init_array+0x44>)
 800067a:	1ba4      	subs	r4, r4, r6
 800067c:	10a4      	asrs	r4, r4, #2
 800067e:	42a5      	cmp	r5, r4
 8000680:	d105      	bne.n	800068e <__libc_init_array+0x2e>
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000688:	4798      	blx	r3
 800068a:	3501      	adds	r5, #1
 800068c:	e7ee      	b.n	800066c <__libc_init_array+0xc>
 800068e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000692:	4798      	blx	r3
 8000694:	3501      	adds	r5, #1
 8000696:	e7f2      	b.n	800067e <__libc_init_array+0x1e>
 8000698:	080006c0 	.word	0x080006c0
 800069c:	080006c0 	.word	0x080006c0
 80006a0:	080006c0 	.word	0x080006c0
 80006a4:	080006c4 	.word	0x080006c4

080006a8 <_init>:
 80006a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006aa:	bf00      	nop
 80006ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ae:	bc08      	pop	{r3}
 80006b0:	469e      	mov	lr, r3
 80006b2:	4770      	bx	lr

080006b4 <_fini>:
 80006b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b6:	bf00      	nop
 80006b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ba:	bc08      	pop	{r3}
 80006bc:	469e      	mov	lr, r3
 80006be:	4770      	bx	lr
