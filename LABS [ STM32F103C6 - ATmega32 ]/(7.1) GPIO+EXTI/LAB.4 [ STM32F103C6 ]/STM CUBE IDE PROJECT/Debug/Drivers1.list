
Drivers1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cb4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000de4  08000de4  00010de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e04  08000e04  00010e0c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e04  08000e04  00010e0c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e04  08000e0c  00010e0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e04  08000e04  00010e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e08  08000e08  00010e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000e0c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000e0c  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010e0c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000321e  00000000  00000000  00010e35  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000077d  00000000  00000000  00014053  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000898  00000000  00000000  000147d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000188  00000000  00000000  00015068  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000140  00000000  00000000  000151f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000f62  00000000  00000000  00015330  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001b12  00000000  00000000  00016292  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000947c  00000000  00000000  00017da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00021220  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004b0  00000000  00000000  0002129c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000dcc 	.word	0x08000dcc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000dcc 	.word	0x08000dcc

08000170 <LCD_Kick>:
Pin_Config_t Pin_config;




void LCD_Kick(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	//LCD_CONTROL_PINS &= ~(1<<EN_PIN); //enable pin = 0;
	MCAL_GPIO_WritePin(GPIOA, 10, 1);
 8000174:	2201      	movs	r2, #1
 8000176:	210a      	movs	r1, #10
 8000178:	4806      	ldr	r0, [pc, #24]	; (8000194 <LCD_Kick+0x24>)
 800017a:	f000 fd34 	bl	8000be6 <MCAL_GPIO_WritePin>
	wait_ms(50);
 800017e:	2032      	movs	r0, #50	; 0x32
 8000180:	f000 fd5c 	bl	8000c3c <wait_ms>
	MCAL_GPIO_WritePin(GPIOA, 10, 0);
 8000184:	2200      	movs	r2, #0
 8000186:	210a      	movs	r1, #10
 8000188:	4802      	ldr	r0, [pc, #8]	; (8000194 <LCD_Kick+0x24>)
 800018a:	f000 fd2c 	bl	8000be6 <MCAL_GPIO_WritePin>
}
 800018e:	bf00      	nop
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40010800 	.word	0x40010800

08000198 <LCD_GPIO_init>:
void LCD_GPIO_init() {
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	Pin_config.Pin_Num = RS_SWITCH;
 800019c:	4b4f      	ldr	r3, [pc, #316]	; (80002dc <LCD_GPIO_init+0x144>)
 800019e:	2208      	movs	r2, #8
 80001a0:	601a      	str	r2, [r3, #0]
	Pin_config.mode = Output_Push_pull;
 80001a2:	4b4e      	ldr	r3, [pc, #312]	; (80002dc <LCD_GPIO_init+0x144>)
 80001a4:	2204      	movs	r2, #4
 80001a6:	605a      	str	r2, [r3, #4]
	Pin_config.Speed_Output = speed_10;
 80001a8:	4b4c      	ldr	r3, [pc, #304]	; (80002dc <LCD_GPIO_init+0x144>)
 80001aa:	2201      	movs	r2, #1
 80001ac:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(GPIOA, &Pin_config);
 80001ae:	494b      	ldr	r1, [pc, #300]	; (80002dc <LCD_GPIO_init+0x144>)
 80001b0:	484b      	ldr	r0, [pc, #300]	; (80002e0 <LCD_GPIO_init+0x148>)
 80001b2:	f000 fc61 	bl	8000a78 <MCAL_GPIO_Init>


	Pin_config.Pin_Num = RW_SWITCH;
 80001b6:	4b49      	ldr	r3, [pc, #292]	; (80002dc <LCD_GPIO_init+0x144>)
 80001b8:	2209      	movs	r2, #9
 80001ba:	601a      	str	r2, [r3, #0]
	Pin_config.mode = Output_Push_pull;
 80001bc:	4b47      	ldr	r3, [pc, #284]	; (80002dc <LCD_GPIO_init+0x144>)
 80001be:	2204      	movs	r2, #4
 80001c0:	605a      	str	r2, [r3, #4]
	Pin_config.Speed_Output = speed_10;
 80001c2:	4b46      	ldr	r3, [pc, #280]	; (80002dc <LCD_GPIO_init+0x144>)
 80001c4:	2201      	movs	r2, #1
 80001c6:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(GPIOA, &Pin_config);
 80001c8:	4944      	ldr	r1, [pc, #272]	; (80002dc <LCD_GPIO_init+0x144>)
 80001ca:	4845      	ldr	r0, [pc, #276]	; (80002e0 <LCD_GPIO_init+0x148>)
 80001cc:	f000 fc54 	bl	8000a78 <MCAL_GPIO_Init>


	Pin_config.Pin_Num = EN_SWITCH;
 80001d0:	4b42      	ldr	r3, [pc, #264]	; (80002dc <LCD_GPIO_init+0x144>)
 80001d2:	220a      	movs	r2, #10
 80001d4:	601a      	str	r2, [r3, #0]
	Pin_config.mode = Output_Push_pull;
 80001d6:	4b41      	ldr	r3, [pc, #260]	; (80002dc <LCD_GPIO_init+0x144>)
 80001d8:	2204      	movs	r2, #4
 80001da:	605a      	str	r2, [r3, #4]
	Pin_config.Speed_Output = speed_10;
 80001dc:	4b3f      	ldr	r3, [pc, #252]	; (80002dc <LCD_GPIO_init+0x144>)
 80001de:	2201      	movs	r2, #1
 80001e0:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(GPIOA, &Pin_config);
 80001e2:	493e      	ldr	r1, [pc, #248]	; (80002dc <LCD_GPIO_init+0x144>)
 80001e4:	483e      	ldr	r0, [pc, #248]	; (80002e0 <LCD_GPIO_init+0x148>)
 80001e6:	f000 fc47 	bl	8000a78 <MCAL_GPIO_Init>


	//============================
	// SET THE NEXT 8 PINS AS OUTPUT
	Pin_config.Pin_Num = 0;
 80001ea:	4b3c      	ldr	r3, [pc, #240]	; (80002dc <LCD_GPIO_init+0x144>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	601a      	str	r2, [r3, #0]
	Pin_config.mode = Output_Push_pull;
 80001f0:	4b3a      	ldr	r3, [pc, #232]	; (80002dc <LCD_GPIO_init+0x144>)
 80001f2:	2204      	movs	r2, #4
 80001f4:	605a      	str	r2, [r3, #4]
	Pin_config.Speed_Output = speed_10;
 80001f6:	4b39      	ldr	r3, [pc, #228]	; (80002dc <LCD_GPIO_init+0x144>)
 80001f8:	2201      	movs	r2, #1
 80001fa:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(GPIOA, &Pin_config);
 80001fc:	4937      	ldr	r1, [pc, #220]	; (80002dc <LCD_GPIO_init+0x144>)
 80001fe:	4838      	ldr	r0, [pc, #224]	; (80002e0 <LCD_GPIO_init+0x148>)
 8000200:	f000 fc3a 	bl	8000a78 <MCAL_GPIO_Init>

	Pin_config.Pin_Num = 1;
 8000204:	4b35      	ldr	r3, [pc, #212]	; (80002dc <LCD_GPIO_init+0x144>)
 8000206:	2201      	movs	r2, #1
 8000208:	601a      	str	r2, [r3, #0]
	Pin_config.mode = Output_Push_pull;
 800020a:	4b34      	ldr	r3, [pc, #208]	; (80002dc <LCD_GPIO_init+0x144>)
 800020c:	2204      	movs	r2, #4
 800020e:	605a      	str	r2, [r3, #4]
	Pin_config.Speed_Output = speed_10;
 8000210:	4b32      	ldr	r3, [pc, #200]	; (80002dc <LCD_GPIO_init+0x144>)
 8000212:	2201      	movs	r2, #1
 8000214:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(GPIOA, &Pin_config);
 8000216:	4931      	ldr	r1, [pc, #196]	; (80002dc <LCD_GPIO_init+0x144>)
 8000218:	4831      	ldr	r0, [pc, #196]	; (80002e0 <LCD_GPIO_init+0x148>)
 800021a:	f000 fc2d 	bl	8000a78 <MCAL_GPIO_Init>

	Pin_config.Pin_Num = 2;
 800021e:	4b2f      	ldr	r3, [pc, #188]	; (80002dc <LCD_GPIO_init+0x144>)
 8000220:	2202      	movs	r2, #2
 8000222:	601a      	str	r2, [r3, #0]
	Pin_config.mode = Output_Push_pull;
 8000224:	4b2d      	ldr	r3, [pc, #180]	; (80002dc <LCD_GPIO_init+0x144>)
 8000226:	2204      	movs	r2, #4
 8000228:	605a      	str	r2, [r3, #4]
	Pin_config.Speed_Output = speed_10;
 800022a:	4b2c      	ldr	r3, [pc, #176]	; (80002dc <LCD_GPIO_init+0x144>)
 800022c:	2201      	movs	r2, #1
 800022e:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(GPIOA, &Pin_config);
 8000230:	492a      	ldr	r1, [pc, #168]	; (80002dc <LCD_GPIO_init+0x144>)
 8000232:	482b      	ldr	r0, [pc, #172]	; (80002e0 <LCD_GPIO_init+0x148>)
 8000234:	f000 fc20 	bl	8000a78 <MCAL_GPIO_Init>

	Pin_config.Pin_Num = 3;
 8000238:	4b28      	ldr	r3, [pc, #160]	; (80002dc <LCD_GPIO_init+0x144>)
 800023a:	2203      	movs	r2, #3
 800023c:	601a      	str	r2, [r3, #0]
	Pin_config.mode = Output_Push_pull;
 800023e:	4b27      	ldr	r3, [pc, #156]	; (80002dc <LCD_GPIO_init+0x144>)
 8000240:	2204      	movs	r2, #4
 8000242:	605a      	str	r2, [r3, #4]
	Pin_config.Speed_Output = speed_10;
 8000244:	4b25      	ldr	r3, [pc, #148]	; (80002dc <LCD_GPIO_init+0x144>)
 8000246:	2201      	movs	r2, #1
 8000248:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(GPIOA, &Pin_config);
 800024a:	4924      	ldr	r1, [pc, #144]	; (80002dc <LCD_GPIO_init+0x144>)
 800024c:	4824      	ldr	r0, [pc, #144]	; (80002e0 <LCD_GPIO_init+0x148>)
 800024e:	f000 fc13 	bl	8000a78 <MCAL_GPIO_Init>

	Pin_config.Pin_Num = 4;
 8000252:	4b22      	ldr	r3, [pc, #136]	; (80002dc <LCD_GPIO_init+0x144>)
 8000254:	2204      	movs	r2, #4
 8000256:	601a      	str	r2, [r3, #0]
	Pin_config.mode = Output_Push_pull;
 8000258:	4b20      	ldr	r3, [pc, #128]	; (80002dc <LCD_GPIO_init+0x144>)
 800025a:	2204      	movs	r2, #4
 800025c:	605a      	str	r2, [r3, #4]
	Pin_config.Speed_Output = speed_10;
 800025e:	4b1f      	ldr	r3, [pc, #124]	; (80002dc <LCD_GPIO_init+0x144>)
 8000260:	2201      	movs	r2, #1
 8000262:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(GPIOA, &Pin_config);
 8000264:	491d      	ldr	r1, [pc, #116]	; (80002dc <LCD_GPIO_init+0x144>)
 8000266:	481e      	ldr	r0, [pc, #120]	; (80002e0 <LCD_GPIO_init+0x148>)
 8000268:	f000 fc06 	bl	8000a78 <MCAL_GPIO_Init>

	Pin_config.Pin_Num = 5;
 800026c:	4b1b      	ldr	r3, [pc, #108]	; (80002dc <LCD_GPIO_init+0x144>)
 800026e:	2205      	movs	r2, #5
 8000270:	601a      	str	r2, [r3, #0]
	Pin_config.mode = Output_Push_pull;
 8000272:	4b1a      	ldr	r3, [pc, #104]	; (80002dc <LCD_GPIO_init+0x144>)
 8000274:	2204      	movs	r2, #4
 8000276:	605a      	str	r2, [r3, #4]
	Pin_config.Speed_Output = speed_10;
 8000278:	4b18      	ldr	r3, [pc, #96]	; (80002dc <LCD_GPIO_init+0x144>)
 800027a:	2201      	movs	r2, #1
 800027c:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(GPIOA, &Pin_config);
 800027e:	4917      	ldr	r1, [pc, #92]	; (80002dc <LCD_GPIO_init+0x144>)
 8000280:	4817      	ldr	r0, [pc, #92]	; (80002e0 <LCD_GPIO_init+0x148>)
 8000282:	f000 fbf9 	bl	8000a78 <MCAL_GPIO_Init>

	Pin_config.Pin_Num = 6;
 8000286:	4b15      	ldr	r3, [pc, #84]	; (80002dc <LCD_GPIO_init+0x144>)
 8000288:	2206      	movs	r2, #6
 800028a:	601a      	str	r2, [r3, #0]
	Pin_config.mode = Output_Push_pull;
 800028c:	4b13      	ldr	r3, [pc, #76]	; (80002dc <LCD_GPIO_init+0x144>)
 800028e:	2204      	movs	r2, #4
 8000290:	605a      	str	r2, [r3, #4]
	Pin_config.Speed_Output = speed_10;
 8000292:	4b12      	ldr	r3, [pc, #72]	; (80002dc <LCD_GPIO_init+0x144>)
 8000294:	2201      	movs	r2, #1
 8000296:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(GPIOA, &Pin_config);
 8000298:	4910      	ldr	r1, [pc, #64]	; (80002dc <LCD_GPIO_init+0x144>)
 800029a:	4811      	ldr	r0, [pc, #68]	; (80002e0 <LCD_GPIO_init+0x148>)
 800029c:	f000 fbec 	bl	8000a78 <MCAL_GPIO_Init>

	Pin_config.Pin_Num = 7;
 80002a0:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <LCD_GPIO_init+0x144>)
 80002a2:	2207      	movs	r2, #7
 80002a4:	601a      	str	r2, [r3, #0]
	Pin_config.mode = Output_Push_pull;
 80002a6:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <LCD_GPIO_init+0x144>)
 80002a8:	2204      	movs	r2, #4
 80002aa:	605a      	str	r2, [r3, #4]
	Pin_config.Speed_Output = speed_10;
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <LCD_GPIO_init+0x144>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(GPIOA, &Pin_config);
 80002b2:	490a      	ldr	r1, [pc, #40]	; (80002dc <LCD_GPIO_init+0x144>)
 80002b4:	480a      	ldr	r0, [pc, #40]	; (80002e0 <LCD_GPIO_init+0x148>)
 80002b6:	f000 fbdf 	bl	8000a78 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, 0);
 80002ba:	2200      	movs	r2, #0
 80002bc:	210a      	movs	r1, #10
 80002be:	4808      	ldr	r0, [pc, #32]	; (80002e0 <LCD_GPIO_init+0x148>)
 80002c0:	f000 fc91 	bl	8000be6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, 0);
 80002c4:	2200      	movs	r2, #0
 80002c6:	2108      	movs	r1, #8
 80002c8:	4805      	ldr	r0, [pc, #20]	; (80002e0 <LCD_GPIO_init+0x148>)
 80002ca:	f000 fc8c 	bl	8000be6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, 0);
 80002ce:	2200      	movs	r2, #0
 80002d0:	2109      	movs	r1, #9
 80002d2:	4803      	ldr	r0, [pc, #12]	; (80002e0 <LCD_GPIO_init+0x148>)
 80002d4:	f000 fc87 	bl	8000be6 <MCAL_GPIO_WritePin>

}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000020 	.word	0x20000020
 80002e0:	40010800 	.word	0x40010800

080002e4 <LCD_Send_Command>:
	// Write mode
	MCAL_GPIO_WritePin(GPIOA, 9, 0);


}
void LCD_Send_Command(uint16_t command){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	80fb      	strh	r3, [r7, #6]
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 80002ee:	88fb      	ldrh	r3, [r7, #6]
 80002f0:	4619      	mov	r1, r3
 80002f2:	480b      	ldr	r0, [pc, #44]	; (8000320 <LCD_Send_Command+0x3c>)
 80002f4:	f000 fc95 	bl	8000c22 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, 0);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2109      	movs	r1, #9
 80002fc:	4808      	ldr	r0, [pc, #32]	; (8000320 <LCD_Send_Command+0x3c>)
 80002fe:	f000 fc72 	bl	8000be6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, 0);
 8000302:	2200      	movs	r2, #0
 8000304:	2108      	movs	r1, #8
 8000306:	4806      	ldr	r0, [pc, #24]	; (8000320 <LCD_Send_Command+0x3c>)
 8000308:	f000 fc6d 	bl	8000be6 <MCAL_GPIO_WritePin>
	wait_ms(1);
 800030c:	2001      	movs	r0, #1
 800030e:	f000 fc95 	bl	8000c3c <wait_ms>
	LCD_Kick();
 8000312:	f7ff ff2d 	bl	8000170 <LCD_Kick>


}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40010800 	.word	0x40010800

08000324 <LCD_Send_Character>:

void LCD_Send_Character(uint16_t character){
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	80fb      	strh	r3, [r7, #6]

	MCAL_GPIO_WritePort(LCD_CTRL, character);
 800032e:	88fb      	ldrh	r3, [r7, #6]
 8000330:	4619      	mov	r1, r3
 8000332:	480b      	ldr	r0, [pc, #44]	; (8000360 <LCD_Send_Character+0x3c>)
 8000334:	f000 fc75 	bl	8000c22 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, 0);
 8000338:	2200      	movs	r2, #0
 800033a:	2109      	movs	r1, #9
 800033c:	4808      	ldr	r0, [pc, #32]	; (8000360 <LCD_Send_Character+0x3c>)
 800033e:	f000 fc52 	bl	8000be6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, 1);
 8000342:	2201      	movs	r2, #1
 8000344:	2108      	movs	r1, #8
 8000346:	4806      	ldr	r0, [pc, #24]	; (8000360 <LCD_Send_Character+0x3c>)
 8000348:	f000 fc4d 	bl	8000be6 <MCAL_GPIO_WritePin>
	wait_ms(1);
 800034c:	2001      	movs	r0, #1
 800034e:	f000 fc75 	bl	8000c3c <wait_ms>
	LCD_Kick();
 8000352:	f7ff ff0d 	bl	8000170 <LCD_Kick>

}
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40010800 	.word	0x40010800

08000364 <LCD_Clear_Screen>:

void LCD_Clear_Screen(void){
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0

	LCD_Send_Command(LCD_CLEAR);
 8000368:	2001      	movs	r0, #1
 800036a:	f7ff ffbb 	bl	80002e4 <LCD_Send_Command>
}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}

08000372 <LCD_Init>:

void LCD_Init(void){
 8000372:	b580      	push	{r7, lr}
 8000374:	af00      	add	r7, sp, #0

	wait_ms(20);
 8000376:	2014      	movs	r0, #20
 8000378:	f000 fc60 	bl	8000c3c <wait_ms>
	LCD_GPIO_init();
 800037c:	f7ff ff0c 	bl	8000198 <LCD_GPIO_init>
	wait_ms(15);
 8000380:	200f      	movs	r0, #15
 8000382:	f000 fc5b 	bl	8000c3c <wait_ms>
	LCD_Clear_Screen();
 8000386:	f7ff ffed 	bl	8000364 <LCD_Clear_Screen>
	LCD_Send_Command(LCD_FUNCTION_8BIT_2LINES);
 800038a:	2038      	movs	r0, #56	; 0x38
 800038c:	f7ff ffaa 	bl	80002e4 <LCD_Send_Command>
	LCD_Send_Command(LCD_ENTRY_MODE);
 8000390:	2006      	movs	r0, #6
 8000392:	f7ff ffa7 	bl	80002e4 <LCD_Send_Command>
	LCD_Send_Command(LCD_BEGIN_AT_FIRST_ROW);
 8000396:	2080      	movs	r0, #128	; 0x80
 8000398:	f7ff ffa4 	bl	80002e4 <LCD_Send_Command>
	LCD_Send_Command(LCD_DISP_ON_CURSOR_BLINK);
 800039c:	200f      	movs	r0, #15
 800039e:	f7ff ffa1 	bl	80002e4 <LCD_Send_Command>
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}

080003a6 <LCD_Send_String>:
void LCD_Send_String(const char* string){
 80003a6:	b580      	push	{r7, lr}
 80003a8:	b084      	sub	sp, #16
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	6078      	str	r0, [r7, #4]

	int count =0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60fb      	str	r3, [r7, #12]
	while(1){
		if(count == 16)//First line end reached
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	2b10      	cmp	r3, #16
 80003b6:	d102      	bne.n	80003be <LCD_Send_String+0x18>
		{
			LCD_Send_Command(LCD_BEGIN_AT_SECOND_ROW);
 80003b8:	20c0      	movs	r0, #192	; 0xc0
 80003ba:	f7ff ff93 	bl	80002e4 <LCD_Send_Command>
		}
		if(count == 32)//Second line end reached
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	2b20      	cmp	r3, #32
 80003c2:	d106      	bne.n	80003d2 <LCD_Send_String+0x2c>
		{
			LCD_Clear_Screen();
 80003c4:	f7ff ffce 	bl	8000364 <LCD_Clear_Screen>
			LCD_Send_Command(LCD_BEGIN_AT_FIRST_ROW);
 80003c8:	2080      	movs	r0, #128	; 0x80
 80003ca:	f7ff ff8b 	bl	80002e4 <LCD_Send_Command>
			count=0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60fb      	str	r3, [r7, #12]
		}
		LCD_Send_Character(*string);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	b29b      	uxth	r3, r3
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff ffa3 	bl	8000324 <LCD_Send_Character>
		string++;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	3301      	adds	r3, #1
 80003e2:	607b      	str	r3, [r7, #4]
		count++;
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	3301      	adds	r3, #1
 80003e8:	60fb      	str	r3, [r7, #12]
		if(*string == '\0')//End of the string reached
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d000      	beq.n	80003f4 <LCD_Send_String+0x4e>
		if(count == 16)//First line end reached
 80003f2:	e7de      	b.n	80003b2 <LCD_Send_String+0xc>
		{
			break;//stop
 80003f4:	bf00      	nop
		}
	}
}
 80003f6:	bf00      	nop
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
	...

08000400 <check_port_return_binary>:


//-----------------------------
// Private function
//-----------------------------
uint32_t check_port_return_binary(GPIO_REGISTERS_t* port){ // This function used to return the 4 bits required to set the AFIO register..
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
														  // based on which port we will use in order to map the GPIO pin to EXTI peripheral

	int binary;

	if(port == GPIOA){
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a0c      	ldr	r2, [pc, #48]	; (800043c <check_port_return_binary+0x3c>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d102      	bne.n	8000416 <check_port_return_binary+0x16>
		binary = 0;
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	e00c      	b.n	8000430 <check_port_return_binary+0x30>
	}
	else if(port == GPIOB)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a09      	ldr	r2, [pc, #36]	; (8000440 <check_port_return_binary+0x40>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d102      	bne.n	8000424 <check_port_return_binary+0x24>
	{
		binary = 1;
 800041e:	2301      	movs	r3, #1
 8000420:	60fb      	str	r3, [r7, #12]
 8000422:	e005      	b.n	8000430 <check_port_return_binary+0x30>
	}
	else if(port == GPIOC)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a07      	ldr	r2, [pc, #28]	; (8000444 <check_port_return_binary+0x44>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d101      	bne.n	8000430 <check_port_return_binary+0x30>
	{
		binary = 2;
 800042c:	2302      	movs	r3, #2
 800042e:	60fb      	str	r3, [r7, #12]
	}

	return binary;
 8000430:	68fb      	ldr	r3, [r7, #12]


}
 8000432:	4618      	mov	r0, r3
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40010800 	.word	0x40010800
 8000440:	40010c00 	.word	0x40010c00
 8000444:	40011000 	.word	0x40011000

08000448 <MCAL_EXTI_init>:
 * @param [in]	-Pin_config_s: Is a pointer to the structure that contains the information of the pin we want to configure
 * @retval		-none
 * Note			-In Our package LQFP48 we have only GPIOA and GPIOB
 */

void MCAL_EXTI_init(EXTI_Config_t* EXTI_Config_s){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]

	MCAL_EXTI_Update(EXTI_Config_s);
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f000 f881 	bl	8000558 <MCAL_EXTI_Update>
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
	...

08000460 <MCAL_EXTI_DeInit>:
 * @brief 		-This Function used to deinitialize specific Pin that was configured as External interrupt pin
 * @param [in]	-Pin_config_s: Is a pointer to the structure that contains the information of the pin we want to configure
 * @retval		-none
 * Note			-In Our package LQFP48 we have only GPIOA and GPIOB
 */
void MCAL_EXTI_DeInit(EXTI_Config_t* EXTI_Config_s){
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]

	// 1- Reset the External interrupt pin to reset state in the GPIO register
	MCAL_GPIO_DeInit(EXTI_Config_s->EXTI_GPIO_Mapping.Port,EXTI_Config_s->EXTI_GPIO_Mapping.Pin_num);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	791b      	ldrb	r3, [r3, #4]
 8000470:	4619      	mov	r1, r3
 8000472:	4610      	mov	r0, r2
 8000474:	f000 fb7f 	bl	8000b76 <MCAL_GPIO_DeInit>

	// 2- Disconnect the pin from the EXTI peripheral using AFIO registers
	uint8_t index;
	index = ( EXTI_Config_s->EXTI_GPIO_Mapping.Pin_num ) / 4;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	791b      	ldrb	r3, [r3, #4]
 800047c:	089b      	lsrs	r3, r3, #2
 800047e:	73fb      	strb	r3, [r7, #15]

	uint8_t shift;
	shift = ( ( EXTI_Config_s->EXTI_GPIO_Mapping.Pin_num ) % 4 ) * 4;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	791b      	ldrb	r3, [r3, #4]
 8000484:	f003 0303 	and.w	r3, r3, #3
 8000488:	b2db      	uxtb	r3, r3
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	73bb      	strb	r3, [r7, #14]

	AFIO->AFIO_EXTICR[index] &= ~(0x0F << shift);
 800048e:	4a2f      	ldr	r2, [pc, #188]	; (800054c <MCAL_EXTI_DeInit+0xec>)
 8000490:	7bfb      	ldrb	r3, [r7, #15]
 8000492:	3302      	adds	r3, #2
 8000494:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000498:	7bbb      	ldrb	r3, [r7, #14]
 800049a:	210f      	movs	r1, #15
 800049c:	fa01 f303 	lsl.w	r3, r1, r3
 80004a0:	43db      	mvns	r3, r3
 80004a2:	4618      	mov	r0, r3
 80004a4:	4929      	ldr	r1, [pc, #164]	; (800054c <MCAL_EXTI_DeInit+0xec>)
 80004a6:	7bfb      	ldrb	r3, [r7, #15]
 80004a8:	4002      	ands	r2, r0
 80004aa:	3302      	adds	r3, #2
 80004ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// 3- Reset EXTI Falling\Rising registers
	EXTI->EXTI_FTSR &= ~(1 << EXTI_Config_s->EXTI_GPIO_Mapping.Pin_num);
 80004b0:	4b27      	ldr	r3, [pc, #156]	; (8000550 <MCAL_EXTI_DeInit+0xf0>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	687a      	ldr	r2, [r7, #4]
 80004b6:	7912      	ldrb	r2, [r2, #4]
 80004b8:	4611      	mov	r1, r2
 80004ba:	2201      	movs	r2, #1
 80004bc:	408a      	lsls	r2, r1
 80004be:	43d2      	mvns	r2, r2
 80004c0:	4611      	mov	r1, r2
 80004c2:	4a23      	ldr	r2, [pc, #140]	; (8000550 <MCAL_EXTI_DeInit+0xf0>)
 80004c4:	400b      	ands	r3, r1
 80004c6:	60d3      	str	r3, [r2, #12]
	EXTI->EXTI_RTSR &= ~(1 << EXTI_Config_s->EXTI_GPIO_Mapping.Pin_num);
 80004c8:	4b21      	ldr	r3, [pc, #132]	; (8000550 <MCAL_EXTI_DeInit+0xf0>)
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	7912      	ldrb	r2, [r2, #4]
 80004d0:	4611      	mov	r1, r2
 80004d2:	2201      	movs	r2, #1
 80004d4:	408a      	lsls	r2, r1
 80004d6:	43d2      	mvns	r2, r2
 80004d8:	4611      	mov	r1, r2
 80004da:	4a1d      	ldr	r2, [pc, #116]	; (8000550 <MCAL_EXTI_DeInit+0xf0>)
 80004dc:	400b      	ands	r3, r1
 80004de:	6093      	str	r3, [r2, #8]

	// 4- Enable interrupt line mask in EXTI peripheral
	EXTI->EXTI_IMR &= ~(1 << EXTI_Config_s->EXTI_GPIO_Mapping.Pin_num);
 80004e0:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <MCAL_EXTI_DeInit+0xf0>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	7912      	ldrb	r2, [r2, #4]
 80004e8:	4611      	mov	r1, r2
 80004ea:	2201      	movs	r2, #1
 80004ec:	408a      	lsls	r2, r1
 80004ee:	43d2      	mvns	r2, r2
 80004f0:	4611      	mov	r1, r2
 80004f2:	4a17      	ldr	r2, [pc, #92]	; (8000550 <MCAL_EXTI_DeInit+0xf0>)
 80004f4:	400b      	ands	r3, r1
 80004f6:	6013      	str	r3, [r2, #0]

	// 5- Enable interrupt mask in NVIC peripheral
	if(EXTI_Config_s->EXTI_GPIO_Mapping.IRQ_num <= 31)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	795b      	ldrb	r3, [r3, #5]
 80004fc:	2b1f      	cmp	r3, #31
 80004fe:	d80c      	bhi.n	800051a <MCAL_EXTI_DeInit+0xba>
	{
		NVIC->NVIC_ISER0 &= ~(1 << EXTI_Config_s->EXTI_GPIO_Mapping.IRQ_num);
 8000500:	4b14      	ldr	r3, [pc, #80]	; (8000554 <MCAL_EXTI_DeInit+0xf4>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	7952      	ldrb	r2, [r2, #5]
 8000508:	4611      	mov	r1, r2
 800050a:	2201      	movs	r2, #1
 800050c:	408a      	lsls	r2, r1
 800050e:	43d2      	mvns	r2, r2
 8000510:	4611      	mov	r1, r2
 8000512:	4a10      	ldr	r2, [pc, #64]	; (8000554 <MCAL_EXTI_DeInit+0xf4>)
 8000514:	400b      	ands	r3, r1
 8000516:	6013      	str	r3, [r2, #0]
	else if( (EXTI_Config_s->EXTI_GPIO_Mapping.IRQ_num > 31) && (EXTI_Config_s->EXTI_GPIO_Mapping.IRQ_num <= 63) )
	{
		NVIC->NVIC_ISER1 &= ~(1 << ( EXTI_Config_s->EXTI_GPIO_Mapping.IRQ_num - 32) );

	}
}
 8000518:	e014      	b.n	8000544 <MCAL_EXTI_DeInit+0xe4>
	else if( (EXTI_Config_s->EXTI_GPIO_Mapping.IRQ_num > 31) && (EXTI_Config_s->EXTI_GPIO_Mapping.IRQ_num <= 63) )
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	795b      	ldrb	r3, [r3, #5]
 800051e:	2b1f      	cmp	r3, #31
 8000520:	d910      	bls.n	8000544 <MCAL_EXTI_DeInit+0xe4>
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	795b      	ldrb	r3, [r3, #5]
 8000526:	2b3f      	cmp	r3, #63	; 0x3f
 8000528:	d80c      	bhi.n	8000544 <MCAL_EXTI_DeInit+0xe4>
		NVIC->NVIC_ISER1 &= ~(1 << ( EXTI_Config_s->EXTI_GPIO_Mapping.IRQ_num - 32) );
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <MCAL_EXTI_DeInit+0xf4>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	7952      	ldrb	r2, [r2, #5]
 8000532:	3a20      	subs	r2, #32
 8000534:	2101      	movs	r1, #1
 8000536:	fa01 f202 	lsl.w	r2, r1, r2
 800053a:	43d2      	mvns	r2, r2
 800053c:	4611      	mov	r1, r2
 800053e:	4a05      	ldr	r2, [pc, #20]	; (8000554 <MCAL_EXTI_DeInit+0xf4>)
 8000540:	400b      	ands	r3, r1
 8000542:	6053      	str	r3, [r2, #4]
}
 8000544:	bf00      	nop
 8000546:	3710      	adds	r7, #16
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40010000 	.word	0x40010000
 8000550:	40010400 	.word	0x40010400
 8000554:	e000e100 	.word	0xe000e100

08000558 <MCAL_EXTI_Update>:
 */




void MCAL_EXTI_Update(EXTI_Config_t* EXTI_Config_s){
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]

	// 1- first we need to configure the desired pin as an input floating
	Pin_Config_t Pin_config_s;
	Pin_config_s.Pin_Num = EXTI_Config_s->EXTI_GPIO_Mapping.Pin_num;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	60fb      	str	r3, [r7, #12]
	Pin_config_s.mode = Input_floating;
 8000566:	2301      	movs	r3, #1
 8000568:	613b      	str	r3, [r7, #16]
	MCAL_GPIO_Init(EXTI_Config_s->EXTI_GPIO_Mapping.Port, &Pin_config_s);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f107 020c 	add.w	r2, r7, #12
 8000572:	4611      	mov	r1, r2
 8000574:	4618      	mov	r0, r3
 8000576:	f000 fa7f 	bl	8000a78 <MCAL_GPIO_Init>

	// 2- Connect the pin to EXTI peripheral using AFIO registers

	uint8_t index;
	index = ( EXTI_Config_s->EXTI_GPIO_Mapping.Pin_num ) / 4 ;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	089b      	lsrs	r3, r3, #2
 8000580:	77fb      	strb	r3, [r7, #31]

	uint8_t shift;
	shift = ( ( EXTI_Config_s->EXTI_GPIO_Mapping.Pin_num ) % 4 ) * 4  ;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	791b      	ldrb	r3, [r3, #4]
 8000586:	f003 0303 	and.w	r3, r3, #3
 800058a:	b2db      	uxtb	r3, r3
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	77bb      	strb	r3, [r7, #30]

	uint32_t binary;
	binary = check_port_return_binary(EXTI_Config_s->EXTI_GPIO_Mapping.Port);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff ff33 	bl	8000400 <check_port_return_binary>
 800059a:	61b8      	str	r0, [r7, #24]

	AFIO->AFIO_EXTICR[index] &= ~(0x0F << shift);
 800059c:	4a7f      	ldr	r2, [pc, #508]	; (800079c <MCAL_EXTI_Update+0x244>)
 800059e:	7ffb      	ldrb	r3, [r7, #31]
 80005a0:	3302      	adds	r3, #2
 80005a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005a6:	7fbb      	ldrb	r3, [r7, #30]
 80005a8:	210f      	movs	r1, #15
 80005aa:	fa01 f303 	lsl.w	r3, r1, r3
 80005ae:	43db      	mvns	r3, r3
 80005b0:	4618      	mov	r0, r3
 80005b2:	497a      	ldr	r1, [pc, #488]	; (800079c <MCAL_EXTI_Update+0x244>)
 80005b4:	7ffb      	ldrb	r3, [r7, #31]
 80005b6:	4002      	ands	r2, r0
 80005b8:	3302      	adds	r3, #2
 80005ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->AFIO_EXTICR[index] |= (binary << shift);
 80005be:	4a77      	ldr	r2, [pc, #476]	; (800079c <MCAL_EXTI_Update+0x244>)
 80005c0:	7ffb      	ldrb	r3, [r7, #31]
 80005c2:	3302      	adds	r3, #2
 80005c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80005c8:	7fbb      	ldrb	r3, [r7, #30]
 80005ca:	69ba      	ldr	r2, [r7, #24]
 80005cc:	409a      	lsls	r2, r3
 80005ce:	4873      	ldr	r0, [pc, #460]	; (800079c <MCAL_EXTI_Update+0x244>)
 80005d0:	7ffb      	ldrb	r3, [r7, #31]
 80005d2:	430a      	orrs	r2, r1
 80005d4:	3302      	adds	r3, #2
 80005d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]


	// 3- Set EXTI Falling\rising registers to match the user requirements

	if( (EXTI_Config_s->Rising_or_Falling) == FALLING)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	7a1b      	ldrb	r3, [r3, #8]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d122      	bne.n	8000628 <MCAL_EXTI_Update+0xd0>
	{
		EXTI->EXTI_FTSR &= ~(1 << EXTI_Config_s->EXTI_GPIO_Mapping.Pin_num);
 80005e2:	4b6f      	ldr	r3, [pc, #444]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	7912      	ldrb	r2, [r2, #4]
 80005ea:	4611      	mov	r1, r2
 80005ec:	2201      	movs	r2, #1
 80005ee:	408a      	lsls	r2, r1
 80005f0:	43d2      	mvns	r2, r2
 80005f2:	4611      	mov	r1, r2
 80005f4:	4a6a      	ldr	r2, [pc, #424]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 80005f6:	400b      	ands	r3, r1
 80005f8:	60d3      	str	r3, [r2, #12]
		EXTI->EXTI_FTSR |=  (1 << EXTI_Config_s->EXTI_GPIO_Mapping.Pin_num);
 80005fa:	4b69      	ldr	r3, [pc, #420]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 80005fc:	68db      	ldr	r3, [r3, #12]
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	7912      	ldrb	r2, [r2, #4]
 8000602:	4611      	mov	r1, r2
 8000604:	2201      	movs	r2, #1
 8000606:	408a      	lsls	r2, r1
 8000608:	4611      	mov	r1, r2
 800060a:	4a65      	ldr	r2, [pc, #404]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 800060c:	430b      	orrs	r3, r1
 800060e:	60d3      	str	r3, [r2, #12]
		EXTI->EXTI_RTSR &= ~(1 << EXTI_Config_s->EXTI_GPIO_Mapping.Pin_num); // so that if we update from rising to falling
 8000610:	4b63      	ldr	r3, [pc, #396]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	7912      	ldrb	r2, [r2, #4]
 8000618:	4611      	mov	r1, r2
 800061a:	2201      	movs	r2, #1
 800061c:	408a      	lsls	r2, r1
 800061e:	43d2      	mvns	r2, r2
 8000620:	4611      	mov	r1, r2
 8000622:	4a5f      	ldr	r2, [pc, #380]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 8000624:	400b      	ands	r3, r1
 8000626:	6093      	str	r3, [r2, #8]

	}
	if( (EXTI_Config_s->Rising_or_Falling) == RISING)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	7a1b      	ldrb	r3, [r3, #8]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d123      	bne.n	8000678 <MCAL_EXTI_Update+0x120>
	{
		EXTI->EXTI_RTSR &= ~(1 << EXTI_Config_s->EXTI_GPIO_Mapping.Pin_num);
 8000630:	4b5b      	ldr	r3, [pc, #364]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	7912      	ldrb	r2, [r2, #4]
 8000638:	4611      	mov	r1, r2
 800063a:	2201      	movs	r2, #1
 800063c:	408a      	lsls	r2, r1
 800063e:	43d2      	mvns	r2, r2
 8000640:	4611      	mov	r1, r2
 8000642:	4a57      	ldr	r2, [pc, #348]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 8000644:	400b      	ands	r3, r1
 8000646:	6093      	str	r3, [r2, #8]
		EXTI->EXTI_RTSR |= (1 << EXTI_Config_s->EXTI_GPIO_Mapping.Pin_num);
 8000648:	4b55      	ldr	r3, [pc, #340]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	7912      	ldrb	r2, [r2, #4]
 8000650:	4611      	mov	r1, r2
 8000652:	2201      	movs	r2, #1
 8000654:	408a      	lsls	r2, r1
 8000656:	4611      	mov	r1, r2
 8000658:	4a51      	ldr	r2, [pc, #324]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 800065a:	430b      	orrs	r3, r1
 800065c:	6093      	str	r3, [r2, #8]
		EXTI->EXTI_FTSR &= ~(1 << EXTI_Config_s->EXTI_GPIO_Mapping.Pin_num); // so that if we update from falling to rising
 800065e:	4b50      	ldr	r3, [pc, #320]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 8000660:	68db      	ldr	r3, [r3, #12]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	7912      	ldrb	r2, [r2, #4]
 8000666:	4611      	mov	r1, r2
 8000668:	2201      	movs	r2, #1
 800066a:	408a      	lsls	r2, r1
 800066c:	43d2      	mvns	r2, r2
 800066e:	4611      	mov	r1, r2
 8000670:	4a4b      	ldr	r2, [pc, #300]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 8000672:	400b      	ands	r3, r1
 8000674:	60d3      	str	r3, [r2, #12]
 8000676:	e031      	b.n	80006dc <MCAL_EXTI_Update+0x184>

	}
	else if( (EXTI_Config_s->Rising_or_Falling) == BOTH)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	7a1b      	ldrb	r3, [r3, #8]
 800067c:	2b02      	cmp	r3, #2
 800067e:	d12d      	bne.n	80006dc <MCAL_EXTI_Update+0x184>
	{
		EXTI->EXTI_FTSR &= ~(1 << EXTI_Config_s->EXTI_GPIO_Mapping.Pin_num);
 8000680:	4b47      	ldr	r3, [pc, #284]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	7912      	ldrb	r2, [r2, #4]
 8000688:	4611      	mov	r1, r2
 800068a:	2201      	movs	r2, #1
 800068c:	408a      	lsls	r2, r1
 800068e:	43d2      	mvns	r2, r2
 8000690:	4611      	mov	r1, r2
 8000692:	4a43      	ldr	r2, [pc, #268]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 8000694:	400b      	ands	r3, r1
 8000696:	60d3      	str	r3, [r2, #12]
		EXTI->EXTI_FTSR |=  (1 << EXTI_Config_s->EXTI_GPIO_Mapping.Pin_num);
 8000698:	4b41      	ldr	r3, [pc, #260]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	7912      	ldrb	r2, [r2, #4]
 80006a0:	4611      	mov	r1, r2
 80006a2:	2201      	movs	r2, #1
 80006a4:	408a      	lsls	r2, r1
 80006a6:	4611      	mov	r1, r2
 80006a8:	4a3d      	ldr	r2, [pc, #244]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 80006aa:	430b      	orrs	r3, r1
 80006ac:	60d3      	str	r3, [r2, #12]
		EXTI->EXTI_RTSR &= ~(1 << EXTI_Config_s->EXTI_GPIO_Mapping.Pin_num);
 80006ae:	4b3c      	ldr	r3, [pc, #240]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	7912      	ldrb	r2, [r2, #4]
 80006b6:	4611      	mov	r1, r2
 80006b8:	2201      	movs	r2, #1
 80006ba:	408a      	lsls	r2, r1
 80006bc:	43d2      	mvns	r2, r2
 80006be:	4611      	mov	r1, r2
 80006c0:	4a37      	ldr	r2, [pc, #220]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 80006c2:	400b      	ands	r3, r1
 80006c4:	6093      	str	r3, [r2, #8]
		EXTI->EXTI_RTSR |=  (1 << EXTI_Config_s->EXTI_GPIO_Mapping.Pin_num);
 80006c6:	4b36      	ldr	r3, [pc, #216]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	7912      	ldrb	r2, [r2, #4]
 80006ce:	4611      	mov	r1, r2
 80006d0:	2201      	movs	r2, #1
 80006d2:	408a      	lsls	r2, r1
 80006d4:	4611      	mov	r1, r2
 80006d6:	4a32      	ldr	r2, [pc, #200]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 80006d8:	430b      	orrs	r3, r1
 80006da:	6093      	str	r3, [r2, #8]
	}

	// 4- Disable interrupt line mask in EXTI peripheral

	EXTI->EXTI_IMR &= ~(1 << EXTI_Config_s->EXTI_GPIO_Mapping.Pin_num);
 80006dc:	4b30      	ldr	r3, [pc, #192]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	7912      	ldrb	r2, [r2, #4]
 80006e4:	4611      	mov	r1, r2
 80006e6:	2201      	movs	r2, #1
 80006e8:	408a      	lsls	r2, r1
 80006ea:	43d2      	mvns	r2, r2
 80006ec:	4611      	mov	r1, r2
 80006ee:	4a2c      	ldr	r2, [pc, #176]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 80006f0:	400b      	ands	r3, r1
 80006f2:	6013      	str	r3, [r2, #0]
	EXTI->EXTI_IMR |= (1 << EXTI_Config_s->EXTI_GPIO_Mapping.Pin_num);
 80006f4:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	7912      	ldrb	r2, [r2, #4]
 80006fc:	4611      	mov	r1, r2
 80006fe:	2201      	movs	r2, #1
 8000700:	408a      	lsls	r2, r1
 8000702:	4611      	mov	r1, r2
 8000704:	4a26      	ldr	r2, [pc, #152]	; (80007a0 <MCAL_EXTI_Update+0x248>)
 8000706:	430b      	orrs	r3, r1
 8000708:	6013      	str	r3, [r2, #0]

	// 5- Disable interrupt mask in NVIC peripheral

	if(EXTI_Config_s->EXTI_GPIO_Mapping.IRQ_num <= 31)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	795b      	ldrb	r3, [r3, #5]
 800070e:	2b1f      	cmp	r3, #31
 8000710:	d817      	bhi.n	8000742 <MCAL_EXTI_Update+0x1ea>
	{
		NVIC->NVIC_ISER0 &= ~(1 << EXTI_Config_s->EXTI_GPIO_Mapping.IRQ_num);
 8000712:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <MCAL_EXTI_Update+0x24c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	7952      	ldrb	r2, [r2, #5]
 800071a:	4611      	mov	r1, r2
 800071c:	2201      	movs	r2, #1
 800071e:	408a      	lsls	r2, r1
 8000720:	43d2      	mvns	r2, r2
 8000722:	4611      	mov	r1, r2
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <MCAL_EXTI_Update+0x24c>)
 8000726:	400b      	ands	r3, r1
 8000728:	6013      	str	r3, [r2, #0]
		NVIC->NVIC_ISER0 |= (1 << EXTI_Config_s->EXTI_GPIO_Mapping.IRQ_num);
 800072a:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <MCAL_EXTI_Update+0x24c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	7952      	ldrb	r2, [r2, #5]
 8000732:	4611      	mov	r1, r2
 8000734:	2201      	movs	r2, #1
 8000736:	408a      	lsls	r2, r1
 8000738:	4611      	mov	r1, r2
 800073a:	4a1a      	ldr	r2, [pc, #104]	; (80007a4 <MCAL_EXTI_Update+0x24c>)
 800073c:	430b      	orrs	r3, r1
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	e020      	b.n	8000784 <MCAL_EXTI_Update+0x22c>
	}
	else if( (EXTI_Config_s->EXTI_GPIO_Mapping.IRQ_num > 31) && (EXTI_Config_s->EXTI_GPIO_Mapping.IRQ_num <= 63) )
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	795b      	ldrb	r3, [r3, #5]
 8000746:	2b1f      	cmp	r3, #31
 8000748:	d91c      	bls.n	8000784 <MCAL_EXTI_Update+0x22c>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	795b      	ldrb	r3, [r3, #5]
 800074e:	2b3f      	cmp	r3, #63	; 0x3f
 8000750:	d818      	bhi.n	8000784 <MCAL_EXTI_Update+0x22c>
	{
		NVIC->NVIC_ISER1 &= ~(1 << ( EXTI_Config_s->EXTI_GPIO_Mapping.IRQ_num - 32) );
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MCAL_EXTI_Update+0x24c>)
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	7952      	ldrb	r2, [r2, #5]
 800075a:	3a20      	subs	r2, #32
 800075c:	2101      	movs	r1, #1
 800075e:	fa01 f202 	lsl.w	r2, r1, r2
 8000762:	43d2      	mvns	r2, r2
 8000764:	4611      	mov	r1, r2
 8000766:	4a0f      	ldr	r2, [pc, #60]	; (80007a4 <MCAL_EXTI_Update+0x24c>)
 8000768:	400b      	ands	r3, r1
 800076a:	6053      	str	r3, [r2, #4]
		NVIC->NVIC_ISER1 |= (1 << ( EXTI_Config_s->EXTI_GPIO_Mapping.IRQ_num - 32) );
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <MCAL_EXTI_Update+0x24c>)
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	7952      	ldrb	r2, [r2, #5]
 8000774:	3a20      	subs	r2, #32
 8000776:	2101      	movs	r1, #1
 8000778:	fa01 f202 	lsl.w	r2, r1, r2
 800077c:	4611      	mov	r1, r2
 800077e:	4a09      	ldr	r2, [pc, #36]	; (80007a4 <MCAL_EXTI_Update+0x24c>)
 8000780:	430b      	orrs	r3, r1
 8000782:	6053      	str	r3, [r2, #4]
	}


	// 6- store the call back function in our array

	GP_IRQ_CallBack[EXTI_Config_s->EXTI_GPIO_Mapping.Pin_num] = EXTI_Config_s->Function_call;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	791b      	ldrb	r3, [r3, #4]
 8000788:	4619      	mov	r1, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	4a06      	ldr	r2, [pc, #24]	; (80007a8 <MCAL_EXTI_Update+0x250>)
 8000790:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

}
 8000794:	bf00      	nop
 8000796:	3720      	adds	r7, #32
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40010000 	.word	0x40010000
 80007a0:	40010400 	.word	0x40010400
 80007a4:	e000e100 	.word	0xe000e100
 80007a8:	2000002c 	.word	0x2000002c

080007ac <EXTI0_IRQHandler>:
// ISR functions
//-----------------------------


void EXTI0_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<0); //WRITE 1 TO CLEAR
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <EXTI0_IRQHandler+0x1c>)
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <EXTI0_IRQHandler+0x1c>)
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 80007bc:	4b03      	ldr	r3, [pc, #12]	; (80007cc <EXTI0_IRQHandler+0x20>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4798      	blx	r3
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40010400 	.word	0x40010400
 80007cc:	2000002c 	.word	0x2000002c

080007d0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<1); //WRITE 1 TO CLEAR
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <EXTI1_IRQHandler+0x1c>)
 80007d6:	695b      	ldr	r3, [r3, #20]
 80007d8:	4a04      	ldr	r2, [pc, #16]	; (80007ec <EXTI1_IRQHandler+0x1c>)
 80007da:	f043 0302 	orr.w	r3, r3, #2
 80007de:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 80007e0:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <EXTI1_IRQHandler+0x20>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	4798      	blx	r3
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40010400 	.word	0x40010400
 80007f0:	2000002c 	.word	0x2000002c

080007f4 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<2); //WRITE 1 TO CLEAR
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <EXTI2_IRQHandler+0x1c>)
 80007fa:	695b      	ldr	r3, [r3, #20]
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <EXTI2_IRQHandler+0x1c>)
 80007fe:	f043 0304 	orr.w	r3, r3, #4
 8000802:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <EXTI2_IRQHandler+0x20>)
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	4798      	blx	r3
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40010400 	.word	0x40010400
 8000814:	2000002c 	.word	0x2000002c

08000818 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<3); //WRITE 1 TO CLEAR
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <EXTI3_IRQHandler+0x1c>)
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <EXTI3_IRQHandler+0x1c>)
 8000822:	f043 0308 	orr.w	r3, r3, #8
 8000826:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <EXTI3_IRQHandler+0x20>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	4798      	blx	r3
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40010400 	.word	0x40010400
 8000838:	2000002c 	.word	0x2000002c

0800083c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<4); //WRITE 1 TO CLEAR
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <EXTI4_IRQHandler+0x1c>)
 8000842:	695b      	ldr	r3, [r3, #20]
 8000844:	4a04      	ldr	r2, [pc, #16]	; (8000858 <EXTI4_IRQHandler+0x1c>)
 8000846:	f043 0310 	orr.w	r3, r3, #16
 800084a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 800084c:	4b03      	ldr	r3, [pc, #12]	; (800085c <EXTI4_IRQHandler+0x20>)
 800084e:	691b      	ldr	r3, [r3, #16]
 8000850:	4798      	blx	r3
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40010400 	.word	0x40010400
 800085c:	2000002c 	.word	0x2000002c

08000860 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	if( EXTI->EXTI_PR & (1<<5))
 8000864:	4b26      	ldr	r3, [pc, #152]	; (8000900 <EXTI9_5_IRQHandler+0xa0>)
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	f003 0320 	and.w	r3, r3, #32
 800086c:	2b00      	cmp	r3, #0
 800086e:	d008      	beq.n	8000882 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->EXTI_PR |= (1<<5); //WRITE 1 TO CLEAR
 8000870:	4b23      	ldr	r3, [pc, #140]	; (8000900 <EXTI9_5_IRQHandler+0xa0>)
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	4a22      	ldr	r2, [pc, #136]	; (8000900 <EXTI9_5_IRQHandler+0xa0>)
 8000876:	f043 0320 	orr.w	r3, r3, #32
 800087a:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[5]();
 800087c:	4b21      	ldr	r3, [pc, #132]	; (8000904 <EXTI9_5_IRQHandler+0xa4>)
 800087e:	695b      	ldr	r3, [r3, #20]
 8000880:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<6))
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <EXTI9_5_IRQHandler+0xa0>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800088a:	2b00      	cmp	r3, #0
 800088c:	d008      	beq.n	80008a0 <EXTI9_5_IRQHandler+0x40>
	{
		EXTI->EXTI_PR |= (1<<6); //WRITE 1 TO CLEAR
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <EXTI9_5_IRQHandler+0xa0>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	4a1b      	ldr	r2, [pc, #108]	; (8000900 <EXTI9_5_IRQHandler+0xa0>)
 8000894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000898:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[6]();
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <EXTI9_5_IRQHandler+0xa4>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<7))
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <EXTI9_5_IRQHandler+0xa0>)
 80008a2:	695b      	ldr	r3, [r3, #20]
 80008a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d008      	beq.n	80008be <EXTI9_5_IRQHandler+0x5e>
	{
		EXTI->EXTI_PR |= (1<<7); //WRITE 1 TO CLEAR
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <EXTI9_5_IRQHandler+0xa0>)
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	4a13      	ldr	r2, [pc, #76]	; (8000900 <EXTI9_5_IRQHandler+0xa0>)
 80008b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b6:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[7]();
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <EXTI9_5_IRQHandler+0xa4>)
 80008ba:	69db      	ldr	r3, [r3, #28]
 80008bc:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<8))
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <EXTI9_5_IRQHandler+0xa0>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d008      	beq.n	80008dc <EXTI9_5_IRQHandler+0x7c>
	{
		EXTI->EXTI_PR |= (1<<8); //WRITE 1 TO CLEAR
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <EXTI9_5_IRQHandler+0xa0>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <EXTI9_5_IRQHandler+0xa0>)
 80008d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008d4:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[8]();
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <EXTI9_5_IRQHandler+0xa4>)
 80008d8:	6a1b      	ldr	r3, [r3, #32]
 80008da:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<9))
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <EXTI9_5_IRQHandler+0xa0>)
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d008      	beq.n	80008fa <EXTI9_5_IRQHandler+0x9a>
	{
		EXTI->EXTI_PR |= (1<<9); //WRITE 1 TO CLEAR
 80008e8:	4b05      	ldr	r3, [pc, #20]	; (8000900 <EXTI9_5_IRQHandler+0xa0>)
 80008ea:	695b      	ldr	r3, [r3, #20]
 80008ec:	4a04      	ldr	r2, [pc, #16]	; (8000900 <EXTI9_5_IRQHandler+0xa0>)
 80008ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008f2:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[9]();
 80008f4:	4b03      	ldr	r3, [pc, #12]	; (8000904 <EXTI9_5_IRQHandler+0xa4>)
 80008f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f8:	4798      	blx	r3
	}
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40010400 	.word	0x40010400
 8000904:	2000002c 	.word	0x2000002c

08000908 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	if( EXTI->EXTI_PR & (1<<10))
 800090c:	4b30      	ldr	r3, [pc, #192]	; (80009d0 <EXTI15_10_IRQHandler+0xc8>)
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000914:	2b00      	cmp	r3, #0
 8000916:	d009      	beq.n	800092c <EXTI15_10_IRQHandler+0x24>
	{
		EXTI->EXTI_PR |= (1<<10); //WRITE 1 TO CLEAR
 8000918:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <EXTI15_10_IRQHandler+0xc8>)
 800091a:	695b      	ldr	r3, [r3, #20]
 800091c:	4a2c      	ldr	r2, [pc, #176]	; (80009d0 <EXTI15_10_IRQHandler+0xc8>)
 800091e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000922:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[10]();
 8000924:	4b2b      	ldr	r3, [pc, #172]	; (80009d4 <EXTI15_10_IRQHandler+0xcc>)
 8000926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000928:	4798      	blx	r3
		EXTI->EXTI_PR |= (1<<15); //WRITE 1 TO CLEAR
		GP_IRQ_CallBack[15]();
	}


}
 800092a:	e04e      	b.n	80009ca <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<11))
 800092c:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <EXTI15_10_IRQHandler+0xc8>)
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000934:	2b00      	cmp	r3, #0
 8000936:	d009      	beq.n	800094c <EXTI15_10_IRQHandler+0x44>
		EXTI->EXTI_PR |= (1<<11); //WRITE 1 TO CLEAR
 8000938:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <EXTI15_10_IRQHandler+0xc8>)
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	4a24      	ldr	r2, [pc, #144]	; (80009d0 <EXTI15_10_IRQHandler+0xc8>)
 800093e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000942:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[11]();
 8000944:	4b23      	ldr	r3, [pc, #140]	; (80009d4 <EXTI15_10_IRQHandler+0xcc>)
 8000946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000948:	4798      	blx	r3
}
 800094a:	e03e      	b.n	80009ca <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<12))
 800094c:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <EXTI15_10_IRQHandler+0xc8>)
 800094e:	695b      	ldr	r3, [r3, #20]
 8000950:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000954:	2b00      	cmp	r3, #0
 8000956:	d009      	beq.n	800096c <EXTI15_10_IRQHandler+0x64>
		EXTI->EXTI_PR |= (1<<12); //WRITE 1 TO CLEAR
 8000958:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <EXTI15_10_IRQHandler+0xc8>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	4a1c      	ldr	r2, [pc, #112]	; (80009d0 <EXTI15_10_IRQHandler+0xc8>)
 800095e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000962:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[12]();
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <EXTI15_10_IRQHandler+0xcc>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	4798      	blx	r3
}
 800096a:	e02e      	b.n	80009ca <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<13))
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <EXTI15_10_IRQHandler+0xc8>)
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000974:	2b00      	cmp	r3, #0
 8000976:	d009      	beq.n	800098c <EXTI15_10_IRQHandler+0x84>
		EXTI->EXTI_PR |= (1<<13); //WRITE 1 TO CLEAR
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <EXTI15_10_IRQHandler+0xc8>)
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <EXTI15_10_IRQHandler+0xc8>)
 800097e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000982:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[13]();
 8000984:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <EXTI15_10_IRQHandler+0xcc>)
 8000986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000988:	4798      	blx	r3
}
 800098a:	e01e      	b.n	80009ca <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<14))
 800098c:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <EXTI15_10_IRQHandler+0xc8>)
 800098e:	695b      	ldr	r3, [r3, #20]
 8000990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000994:	2b00      	cmp	r3, #0
 8000996:	d009      	beq.n	80009ac <EXTI15_10_IRQHandler+0xa4>
		EXTI->EXTI_PR |= (1<<14); //WRITE 1 TO CLEAR
 8000998:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <EXTI15_10_IRQHandler+0xc8>)
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	4a0c      	ldr	r2, [pc, #48]	; (80009d0 <EXTI15_10_IRQHandler+0xc8>)
 800099e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a2:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[14]();
 80009a4:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <EXTI15_10_IRQHandler+0xcc>)
 80009a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009a8:	4798      	blx	r3
}
 80009aa:	e00e      	b.n	80009ca <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<15))
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <EXTI15_10_IRQHandler+0xc8>)
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d008      	beq.n	80009ca <EXTI15_10_IRQHandler+0xc2>
		EXTI->EXTI_PR |= (1<<15); //WRITE 1 TO CLEAR
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <EXTI15_10_IRQHandler+0xc8>)
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <EXTI15_10_IRQHandler+0xc8>)
 80009be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009c2:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[15]();
 80009c4:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <EXTI15_10_IRQHandler+0xcc>)
 80009c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009c8:	4798      	blx	r3
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40010400 	.word	0x40010400
 80009d4:	2000002c 	.word	0x2000002c

080009d8 <get_CRLH_position>:
 *  ENG-TERA
 */
#include "GPIO_DRIVER.h"


int get_CRLH_position(uint32_t pin_num){
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

	switch(pin_num)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b0f      	cmp	r3, #15
 80009e4:	d842      	bhi.n	8000a6c <get_CRLH_position+0x94>
 80009e6:	a201      	add	r2, pc, #4	; (adr r2, 80009ec <get_CRLH_position+0x14>)
 80009e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ec:	08000a2d 	.word	0x08000a2d
 80009f0:	08000a31 	.word	0x08000a31
 80009f4:	08000a35 	.word	0x08000a35
 80009f8:	08000a39 	.word	0x08000a39
 80009fc:	08000a3d 	.word	0x08000a3d
 8000a00:	08000a41 	.word	0x08000a41
 8000a04:	08000a45 	.word	0x08000a45
 8000a08:	08000a49 	.word	0x08000a49
 8000a0c:	08000a4d 	.word	0x08000a4d
 8000a10:	08000a51 	.word	0x08000a51
 8000a14:	08000a55 	.word	0x08000a55
 8000a18:	08000a59 	.word	0x08000a59
 8000a1c:	08000a5d 	.word	0x08000a5d
 8000a20:	08000a61 	.word	0x08000a61
 8000a24:	08000a65 	.word	0x08000a65
 8000a28:	08000a69 	.word	0x08000a69
	{
	case 0:
		return 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	e01e      	b.n	8000a6e <get_CRLH_position+0x96>
	case 1:
		return 4;
 8000a30:	2304      	movs	r3, #4
 8000a32:	e01c      	b.n	8000a6e <get_CRLH_position+0x96>
	case 2:
		return 8;
 8000a34:	2308      	movs	r3, #8
 8000a36:	e01a      	b.n	8000a6e <get_CRLH_position+0x96>
	case 3:
		return 12;
 8000a38:	230c      	movs	r3, #12
 8000a3a:	e018      	b.n	8000a6e <get_CRLH_position+0x96>
	case 4:
		return 16;
 8000a3c:	2310      	movs	r3, #16
 8000a3e:	e016      	b.n	8000a6e <get_CRLH_position+0x96>
	case 5:
		return 20;
 8000a40:	2314      	movs	r3, #20
 8000a42:	e014      	b.n	8000a6e <get_CRLH_position+0x96>
	case 6:
		return 24;
 8000a44:	2318      	movs	r3, #24
 8000a46:	e012      	b.n	8000a6e <get_CRLH_position+0x96>
	case 7:
		return 28;
 8000a48:	231c      	movs	r3, #28
 8000a4a:	e010      	b.n	8000a6e <get_CRLH_position+0x96>
	case 8:
		return 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	e00e      	b.n	8000a6e <get_CRLH_position+0x96>
	case 9:
		return 4;
 8000a50:	2304      	movs	r3, #4
 8000a52:	e00c      	b.n	8000a6e <get_CRLH_position+0x96>
	case 10:
		return 8;
 8000a54:	2308      	movs	r3, #8
 8000a56:	e00a      	b.n	8000a6e <get_CRLH_position+0x96>
	case 11:
		return 12;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	e008      	b.n	8000a6e <get_CRLH_position+0x96>
	case 12:
		return 16;
 8000a5c:	2310      	movs	r3, #16
 8000a5e:	e006      	b.n	8000a6e <get_CRLH_position+0x96>
	case 13:
		return 20;
 8000a60:	2314      	movs	r3, #20
 8000a62:	e004      	b.n	8000a6e <get_CRLH_position+0x96>
	case 14:
		return 24;
 8000a64:	2318      	movs	r3, #24
 8000a66:	e002      	b.n	8000a6e <get_CRLH_position+0x96>
	case 15:
		return 28;
 8000a68:	231c      	movs	r3, #28
 8000a6a:	e000      	b.n	8000a6e <get_CRLH_position+0x96>
	}
	return 0;
 8000a6c:	2300      	movs	r3, #0

}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr

08000a78 <MCAL_GPIO_Init>:
 * @param [in]	-Pin_config_s: Is a pointer to the structure that contains the information of the pin we want to configure
 * @retval		-none
 * Note			-In Our package LQFP48 we have only GPIOA and GPIOB
 */

void MCAL_GPIO_Init(GPIO_REGISTERS_t *GPIOx, Pin_Config_t * Pin_config_s){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]

	volatile uint32_t *configRegister = NULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
	uint32_t pinConfig = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]

	configRegister = (Pin_config_s->Pin_Num < 8)? &GPIOx->GPIOx_CRL : &GPIOx->GPIOx_CRH;
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b07      	cmp	r3, #7
 8000a90:	d801      	bhi.n	8000a96 <MCAL_GPIO_Init+0x1e>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	e001      	b.n	8000a9a <MCAL_GPIO_Init+0x22>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	60bb      	str	r3, [r7, #8]
	(*configRegister) &= ~(0x000F << get_CRLH_position(Pin_config_s->Pin_Num));
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff99 	bl	80009d8 <get_CRLH_position>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	230f      	movs	r3, #15
 8000aaa:	4093      	lsls	r3, r2
 8000aac:	43da      	mvns	r2, r3
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	601a      	str	r2, [r3, #0]

	/* IF OUTPUT */

	if( (Pin_config_s->mode == Output_ALF_Push_pull) || (Pin_config_s->mode == Output_ALF_Open_drain) || (Pin_config_s->mode == Output_Open_drain) || (Pin_config_s->mode == Output_Push_pull) )
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	2b06      	cmp	r3, #6
 8000abe:	d00b      	beq.n	8000ad8 <MCAL_GPIO_Init+0x60>
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	2b07      	cmp	r3, #7
 8000ac6:	d007      	beq.n	8000ad8 <MCAL_GPIO_Init+0x60>
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2b05      	cmp	r3, #5
 8000ace:	d003      	beq.n	8000ad8 <MCAL_GPIO_Init+0x60>
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d10a      	bne.n	8000aee <MCAL_GPIO_Init+0x76>
	{
		pinConfig = ( ( ( (Pin_config_s->mode - 4 )<< 2 ) | (Pin_config_s->Speed_Output) ) & 0x0F );
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	3b04      	subs	r3, #4
 8000ade:	009a      	lsls	r2, r3, #2
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	f003 030f 	and.w	r3, r3, #15
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	e031      	b.n	8000b52 <MCAL_GPIO_Init+0xda>
	}

	else // IF INPUT
	{
		if( (Pin_config_s->mode == Input_Analog) || (Pin_config_s ->mode == Input_floating) )
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <MCAL_GPIO_Init+0x86>
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d106      	bne.n	8000b0c <MCAL_GPIO_Init+0x94>
		{
			pinConfig =( ( (Pin_config_s->mode << 2) | 0x00 ) & 0x0F );
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	f003 030f 	and.w	r3, r3, #15
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	e022      	b.n	8000b52 <MCAL_GPIO_Init+0xda>
		}
		else if(Pin_config_s->mode == Input_AF)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	2b08      	cmp	r3, #8
 8000b12:	d102      	bne.n	8000b1a <MCAL_GPIO_Init+0xa2>
		{
			pinConfig =( ( (Input_floating << 2 ) | 0x00 ) & 0x0F );
 8000b14:	2304      	movs	r3, #4
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	e01b      	b.n	8000b52 <MCAL_GPIO_Init+0xda>
		}
		else // IF INPUT PULLUP\PULLDOWN
		{
			pinConfig = ( ( (Input_PullUp << 2 ) | 0x00 ) & 0x0F );
 8000b1a:	2308      	movs	r3, #8
 8000b1c:	60fb      	str	r3, [r7, #12]
			if(Pin_config_s->mode == Input_PullUp) // IF PULL UP
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d10a      	bne.n	8000b3c <MCAL_GPIO_Init+0xc4>
			{
				GPIOx->GPIOx_ODR |= (1<<Pin_config_s->Pin_Num) ;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	683a      	ldr	r2, [r7, #0]
 8000b2c:	6812      	ldr	r2, [r2, #0]
 8000b2e:	2101      	movs	r1, #1
 8000b30:	fa01 f202 	lsl.w	r2, r1, r2
 8000b34:	431a      	orrs	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	e00a      	b.n	8000b52 <MCAL_GPIO_Init+0xda>
			}
			else // IF PULL DOWN
			{
				GPIOx->GPIOx_ODR &= ~(1<<Pin_config_s->Pin_Num) ;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	683a      	ldr	r2, [r7, #0]
 8000b42:	6812      	ldr	r2, [r2, #0]
 8000b44:	2101      	movs	r1, #1
 8000b46:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4a:	43d2      	mvns	r2, r2
 8000b4c:	401a      	ands	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	60da      	str	r2, [r3, #12]

			}
		}
	}
	(*configRegister) |=( (pinConfig) << get_CRLH_position(Pin_config_s->Pin_Num) );
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ff3e 	bl	80009d8 <get_CRLH_position>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	fa03 f202 	lsl.w	r2, r3, r2
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	601a      	str	r2, [r3, #0]
}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <MCAL_GPIO_DeInit>:
 * @param [in]	-GPIOx: Where x could be from A >> E depending on the Package
 * @param [in]	-Pin_num: The pin number which we want to reset
 * @retval		-None
 * Note			-None
 */
void MCAL_GPIO_DeInit(GPIO_REGISTERS_t *GPIOx,uint8_t Pin_num){
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b084      	sub	sp, #16
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	70fb      	strb	r3, [r7, #3]

//	GPIOx->GPIOx_CRH = 0x44444444;
//	GPIOx->GPIOx_CRL = 0x44444444;
//	GPIOx->GPIOx_ODR = 0;

	volatile uint32_t *configRegister = NULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]

		configRegister = (Pin_num < 8)? &GPIOx->GPIOx_CRL : &GPIOx->GPIOx_CRH;
 8000b86:	78fb      	ldrb	r3, [r7, #3]
 8000b88:	2b07      	cmp	r3, #7
 8000b8a:	d801      	bhi.n	8000b90 <MCAL_GPIO_DeInit+0x1a>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	e001      	b.n	8000b94 <MCAL_GPIO_DeInit+0x1e>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3304      	adds	r3, #4
 8000b94:	60fb      	str	r3, [r7, #12]
		(*configRegister) &= ~(0x000F << get_CRLH_position(Pin_num));
 8000b96:	78fb      	ldrb	r3, [r7, #3]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff1d 	bl	80009d8 <get_CRLH_position>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	4093      	lsls	r3, r2
 8000ba4:	43da      	mvns	r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	401a      	ands	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	601a      	str	r2, [r3, #0]
		(*configRegister) |= (0x0004 << get_CRLH_position(Pin_num));
 8000bb0:	78fb      	ldrb	r3, [r7, #3]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff ff10 	bl	80009d8 <get_CRLH_position>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	2304      	movs	r3, #4
 8000bbc:	fa03 f202 	lsl.w	r2, r3, r2
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	601a      	str	r2, [r3, #0]

		GPIOx->GPIOx_ODR &= ~(1<<Pin_num) ;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	78fa      	ldrb	r2, [r7, #3]
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd6:	43d2      	mvns	r2, r2
 8000bd8:	401a      	ands	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	60da      	str	r2, [r3, #12]



}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <MCAL_GPIO_WritePin>:
 * @param [in]	-Value: 1 for output high or 0 for output low
 * @param [in]	-Pin_Num: Variable contains the output pin number
 * @retval		-None
 * Note			-None
 */
void MCAL_GPIO_WritePin(GPIO_REGISTERS_t *GPIOx,uint32_t Pin_Num,uint32_t Value){
 8000be6:	b480      	push	{r7}
 8000be8:	b085      	sub	sp, #20
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	60f8      	str	r0, [r7, #12]
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]

GPIOx->GPIOx_ODR &= ~(1<<Pin_Num);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000bfe:	43d2      	mvns	r2, r2
 8000c00:	401a      	ands	r2, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	60da      	str	r2, [r3, #12]
GPIOx->GPIOx_ODR |= (Value<<Pin_Num);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	68da      	ldr	r2, [r3, #12]
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	431a      	orrs	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	60da      	str	r2, [r3, #12]

}
 8000c18:	bf00      	nop
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr

08000c22 <MCAL_GPIO_WritePort>:
 * @param [in]	-GPIOx: Where x could be from A >> E depending on the Package
 * @param [in]	-Value: The value of the data we want to send as an output on the port pins
 * @retval		-None
 * Note			-None
 */
void MCAL_GPIO_WritePort(GPIO_REGISTERS_t *GPIOx, uint32_t Value){
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	6039      	str	r1, [r7, #0]

	GPIOx->GPIOx_ODR = (uint32_t)Value;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	683a      	ldr	r2, [r7, #0]
 8000c30:	60da      	str	r2, [r3, #12]
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <wait_ms>:
#include "EXTI_DRIVER.h"
#include "lcd.h"

unsigned int flag = 0;

void wait_ms(uint32_t time){
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0; i<time; i++)
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	e00b      	b.n	8000c62 <wait_ms+0x26>
		for(j=0; j<255; j++);
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	e002      	b.n	8000c56 <wait_ms+0x1a>
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	3301      	adds	r3, #1
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	2bfe      	cmp	r3, #254	; 0xfe
 8000c5a:	d9f9      	bls.n	8000c50 <wait_ms+0x14>
	for(i=0; i<time; i++)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d3ef      	bcc.n	8000c4a <wait_ms+0xe>
}
 8000c6a:	bf00      	nop
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <PB9_CallBack>:

void PB9_CallBack(){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
	flag = 1;
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <PB9_CallBack+0x38>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	601a      	str	r2, [r3, #0]
	LCD_Send_String("IRQ EXTI9 IS HAPPENNED");
 8000c80:	480b      	ldr	r0, [pc, #44]	; (8000cb0 <PB9_CallBack+0x3c>)
 8000c82:	f7ff fb90 	bl	80003a6 <LCD_Send_String>
	wait_ms(300);
 8000c86:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c8a:	f7ff ffd7 	bl	8000c3c <wait_ms>
	EXTI_Config_t EXTI_CFG2;
	EXTI_CFG2.EXTI_GPIO_Mapping = PB9_EXTI9;
 8000c8e:	4a09      	ldr	r2, [pc, #36]	; (8000cb4 <PB9_CallBack+0x40>)
 8000c90:	463b      	mov	r3, r7
 8000c92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c96:	e883 0003 	stmia.w	r3, {r0, r1}
	MCAL_EXTI_DeInit(&EXTI_CFG2);
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fbdf 	bl	8000460 <MCAL_EXTI_DeInit>

}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000001c 	.word	0x2000001c
 8000cb0:	08000de4 	.word	0x08000de4
 8000cb4:	08000dfc 	.word	0x08000dfc

08000cb8 <main>:


int main(void){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0


	// Enable clock
	GPIOA_CLOCK_EN();
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <main+0x68>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <main+0x68>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6193      	str	r3, [r2, #24]
	GPIOB_CLOCK_EN();
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <main+0x68>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <main+0x68>)
 8000cd0:	f043 0308 	orr.w	r3, r3, #8
 8000cd4:	6193      	str	r3, [r2, #24]
	AFIO_CLOCK_EN();
 8000cd6:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <main+0x68>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	4a11      	ldr	r2, [pc, #68]	; (8000d20 <main+0x68>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6193      	str	r3, [r2, #24]

	LCD_Init();
 8000ce2:	f7ff fb46 	bl	8000372 <LCD_Init>
	LCD_Clear_Screen();
 8000ce6:	f7ff fb3d 	bl	8000364 <LCD_Clear_Screen>
	//LCD_Clear_Screen();

	EXTI_Config_t EXTI_CFG;
	EXTI_CFG.EXTI_GPIO_Mapping = PB9_EXTI9;
 8000cea:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <main+0x6c>)
 8000cec:	463b      	mov	r3, r7
 8000cee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cf2:	e883 0003 	stmia.w	r3, {r0, r1}
	EXTI_CFG.Rising_or_Falling = FALLING;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	723b      	strb	r3, [r7, #8]
	EXTI_CFG.Function_call = PB9_CallBack;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <main+0x70>)
 8000cfc:	60fb      	str	r3, [r7, #12]
	MCAL_EXTI_init(&EXTI_CFG);
 8000cfe:	463b      	mov	r3, r7
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fba1 	bl	8000448 <MCAL_EXTI_init>
	flag =1;
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <main+0x74>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	601a      	str	r2, [r3, #0]
	while(1)
	{
		if(flag)
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <main+0x74>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0fb      	beq.n	8000d0c <main+0x54>
		{
			LCD_Clear_Screen();
 8000d14:	f7ff fb26 	bl	8000364 <LCD_Clear_Screen>
			flag=0;
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <main+0x74>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
		if(flag)
 8000d1e:	e7f5      	b.n	8000d0c <main+0x54>
 8000d20:	40021000 	.word	0x40021000
 8000d24:	08000dfc 	.word	0x08000dfc
 8000d28:	08000c75 	.word	0x08000c75
 8000d2c:	2000001c 	.word	0x2000001c

08000d30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d32:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d34:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d3a:	490d      	ldr	r1, [pc, #52]	; (8000d70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d3c:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <LoopForever+0xe>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d40:	e002      	b.n	8000d48 <LoopCopyDataInit>

08000d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d46:	3304      	adds	r3, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d4c:	d3f9      	bcc.n	8000d42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d50:	4c0a      	ldr	r4, [pc, #40]	; (8000d7c <LoopForever+0x16>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d54:	e001      	b.n	8000d5a <LoopFillZerobss>

08000d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d58:	3204      	adds	r2, #4

08000d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d5c:	d3fb      	bcc.n	8000d56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d5e:	f000 f811 	bl	8000d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d62:	f7ff ffa9 	bl	8000cb8 <main>

08000d66 <LoopForever>:

LoopForever:
    b LoopForever
 8000d66:	e7fe      	b.n	8000d66 <LoopForever>
  ldr   r0, =_estack
 8000d68:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d74:	08000e0c 	.word	0x08000e0c
  ldr r2, =_sbss
 8000d78:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d7c:	20000068 	.word	0x20000068

08000d80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC1_2_IRQHandler>
	...

08000d84 <__libc_init_array>:
 8000d84:	b570      	push	{r4, r5, r6, lr}
 8000d86:	2500      	movs	r5, #0
 8000d88:	4e0c      	ldr	r6, [pc, #48]	; (8000dbc <__libc_init_array+0x38>)
 8000d8a:	4c0d      	ldr	r4, [pc, #52]	; (8000dc0 <__libc_init_array+0x3c>)
 8000d8c:	1ba4      	subs	r4, r4, r6
 8000d8e:	10a4      	asrs	r4, r4, #2
 8000d90:	42a5      	cmp	r5, r4
 8000d92:	d109      	bne.n	8000da8 <__libc_init_array+0x24>
 8000d94:	f000 f81a 	bl	8000dcc <_init>
 8000d98:	2500      	movs	r5, #0
 8000d9a:	4e0a      	ldr	r6, [pc, #40]	; (8000dc4 <__libc_init_array+0x40>)
 8000d9c:	4c0a      	ldr	r4, [pc, #40]	; (8000dc8 <__libc_init_array+0x44>)
 8000d9e:	1ba4      	subs	r4, r4, r6
 8000da0:	10a4      	asrs	r4, r4, #2
 8000da2:	42a5      	cmp	r5, r4
 8000da4:	d105      	bne.n	8000db2 <__libc_init_array+0x2e>
 8000da6:	bd70      	pop	{r4, r5, r6, pc}
 8000da8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dac:	4798      	blx	r3
 8000dae:	3501      	adds	r5, #1
 8000db0:	e7ee      	b.n	8000d90 <__libc_init_array+0xc>
 8000db2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000db6:	4798      	blx	r3
 8000db8:	3501      	adds	r5, #1
 8000dba:	e7f2      	b.n	8000da2 <__libc_init_array+0x1e>
 8000dbc:	08000e04 	.word	0x08000e04
 8000dc0:	08000e04 	.word	0x08000e04
 8000dc4:	08000e04 	.word	0x08000e04
 8000dc8:	08000e08 	.word	0x08000e08

08000dcc <_init>:
 8000dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dce:	bf00      	nop
 8000dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dd2:	bc08      	pop	{r3}
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	4770      	bx	lr

08000dd8 <_fini>:
 8000dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dda:	bf00      	nop
 8000ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dde:	bc08      	pop	{r3}
 8000de0:	469e      	mov	lr, r3
 8000de2:	4770      	bx	lr
